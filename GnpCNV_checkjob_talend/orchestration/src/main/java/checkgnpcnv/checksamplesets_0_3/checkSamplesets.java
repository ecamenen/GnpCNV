// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package checkgnpcnv.checksamplesets_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: checkSamplesets Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class checkSamplesets implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (excelFileIn != null) {

				this.setProperty("excelFileIn", excelFileIn.toString());

			}

			if (properties != null) {

				this.setProperty("properties", properties.toString());

			}

			if (tab != null) {

				this.setProperty("tab", tab.toString());

			}

			if (workdir != null) {

				this.setProperty("workdir", workdir.toString());

			}

		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String excelFileIn;

		public String getExcelFileIn() {
			return this.excelFileIn;
		}

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		public String tab;

		public String getTab() {
			return this.tab;
		}

		public String workdir;

		public String getWorkdir() {
			return this.workdir;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.3";
	private final String jobName = "checkSamplesets";
	private final String projectName = "CHECKGNPCNV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					checkSamplesets.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(checkSamplesets.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputFullRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row23_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("* " + jobName);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFixedFlowInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row11Struct row14 = row11;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tContextLoad_2 begin ] start
				 */

				ok_Hash.put("tContextLoad_2", false);
				start_Hash.put("tContextLoad_2", System.currentTimeMillis());

				currentComponent = "tContextLoad_2";

				int tos_count_tContextLoad_2 = 0;

				java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_2 = 0;

				/**
				 * [tContextLoad_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row11Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row11Struct>();
				row11 = new row11Struct();
				row11.key = "tab";
				row11.value = "SAMPLESETS";
				cacheList_tFixedFlowInput_1.add(row11);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row11Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row11 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tContextLoad_2 main ] start
						 */

						currentComponent = "tContextLoad_2";

						// ////////////////////////
						String tmp_key_tContextLoad_2 = null;
						String key_tContextLoad_2 = null;
						if (row11.key != null) {
							tmp_key_tContextLoad_2 = row11.key.trim();
							if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2
									.startsWith("!"))) {
								tmp_key_tContextLoad_2 = null;
							} else {
								row11.key = tmp_key_tContextLoad_2;
							}
						}
						if (row11.key != null) {
							key_tContextLoad_2 = row11.key;
						}
						String value_tContextLoad_2 = null;
						if (row11.value != null) {
							value_tContextLoad_2 = row11.value;
						}

						if (tmp_key_tContextLoad_2 != null) {
							try {
								if (key_tContextLoad_2 != null
										&& "encoding"
												.equals(key_tContextLoad_2)) {
									context.encoding = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "excelFileIn"
												.equals(key_tContextLoad_2)) {
									context.excelFileIn = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "properties"
												.equals(key_tContextLoad_2)) {
									context.properties = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "tab".equals(key_tContextLoad_2)) {
									context.tab = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "workdir".equals(key_tContextLoad_2)) {
									context.workdir = value_tContextLoad_2;
								}

								if (context.getProperty(key_tContextLoad_2) != null) {
									assignList_tContextLoad_2
											.add(key_tContextLoad_2);
								} else {
									newPropertyList_tContextLoad_2
											.add(key_tContextLoad_2);
								}
								if (value_tContextLoad_2 == null) {
									context.setProperty(key_tContextLoad_2, "");
								} else {
									context.setProperty(key_tContextLoad_2,
											value_tContextLoad_2);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_2
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_2++;
						}
						// ////////////////////////

						row14 = row11;

						tos_count_tContextLoad_2++;

						/**
						 * [tContextLoad_2 main ] stop
						 */

						/**
						 * [tRunJob_1 main ] start
						 */

						currentComponent = "tRunJob_1";

						java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

						paraList_tRunJob_1.add("--father_pid=" + pid);

						paraList_tRunJob_1.add("--root_pid=" + rootPid);

						paraList_tRunJob_1.add("--father_node=tRunJob_1");

						paraList_tRunJob_1.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_1.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_1.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_1 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_1 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
								&& childResumePath_tRunJob_1 != null) {
							paraList_tRunJob_1
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_1");

						java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();

						parentContextMap_tRunJob_1.put("encoding",
								context.encoding);

						parentContextMap_tRunJob_1.put("excelFileIn",
								context.excelFileIn);

						parentContextMap_tRunJob_1.put("properties",
								context.properties);

						parentContextMap_tRunJob_1.put("tab", context.tab);

						parentContextMap_tRunJob_1.put("workdir",
								context.workdir);

						java.util.Enumeration<?> propertyNames_tRunJob_1 = context
								.propertyNames();
						while (propertyNames_tRunJob_1.hasMoreElements()) {
							String key_tRunJob_1 = (String) propertyNames_tRunJob_1
									.nextElement();
							Object value_tRunJob_1 = (Object) context
									.get(key_tRunJob_1);
							paraList_tRunJob_1.add("--context_param "
									+ key_tRunJob_1 + "=" + value_tRunJob_1);

						}

						Object obj_tRunJob_1 = null;

						checkgnpcnv.pivotexcel_0_1.pivotExcel childJob_tRunJob_1 = new checkgnpcnv.pivotexcel_0_1.pivotExcel();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_1) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
									.entrySet()) {
								dataSources_tRunJob_1.put(
										talendDataSourceEntry_tRunJob_1
												.getKey(),
										talendDataSourceEntry_tRunJob_1
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_1
									.setDataSources(dataSources_tRunJob_1);
						}

						childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

						String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
								.runJob((String[]) paraList_tRunJob_1
										.toArray(new String[paraList_tRunJob_1
												.size()]));

						errorCode = childJob_tRunJob_1.getErrorCode();

						if (childJob_tRunJob_1.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_1
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getErrorCode());
						}
						if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_1
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_1.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_1
										.getStatus())) {
							throw new RuntimeException(
									"Child job running failed");
						}

						tos_count_tRunJob_1++;

						/**
						 * [tRunJob_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tContextLoad_2 end ] start
				 */

				currentComponent = "tContextLoad_2";

				java.util.Enumeration<?> enu_tContextLoad_2 = context
						.propertyNames();
				while (enu_tContextLoad_2.hasMoreElements()) {
					String key_tContextLoad_2 = (String) enu_tContextLoad_2
							.nextElement();
					if (!assignList_tContextLoad_2.contains(key_tContextLoad_2)
							&& !newPropertyList_tContextLoad_2
									.contains(key_tContextLoad_2)) {
						noAssignList_tContextLoad_2.add(key_tContextLoad_2);
					}
				}

				String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2
						.toString();
				String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2
						.substring(1,
								newPropertyStr_tContextLoad_2.length() - 1);

				String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2
						.toString();
				String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2
						.substring(1, noAssignStr_tContextLoad_2.length() - 1);

				globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_2);
				globalMap.put("tContextLoad_2_KEY_NOT_LOADED",
						noAssign_tContextLoad_2);

				globalMap.put("tContextLoad_2_NB_LINE", nb_line_tContextLoad_2);

				List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_2));

				ok_Hash.put("tContextLoad_2", true);
				end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				/**
				 * [tContextLoad_2 end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileInputDelimited_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tContextLoad_2 finally ] start
				 */

				currentComponent = "tContextLoad_2";

				/**
				 * [tContextLoad_2 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row15Struct row15 = new row15Struct();

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								context.encoding));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("sampleset_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_size");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_taxonomy_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_type");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_name");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_description");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_phenotype");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_population");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("sampleset_sex");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = context.workdir
							+ "/tmp/temp.tmp";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp.tmp",
								context.encoding, "\t", "\n", false, 1, 0, -1,
								-1, true);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row13 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row13 = new row13Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							temp = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);
							if (temp.length() > 0) {

								try {

									row13.id = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3
											.setException(ex_tFileInputDelimited_3);
								}

							} else {

								row13.id = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row13.sampleset_id = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row13.sampleset_size = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row13.sampleset_taxonomy_id = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row13.sampleset_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row13.sampleset_name = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row13.sampleset_description = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row13.sampleset_phenotype = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row13.sampleset_population = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 9;

							row13.sampleset_sex = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row13 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tFilterColumns_3 main ] start
							 */

							currentComponent = "tFilterColumns_3";

							row15.sampleset_id = row13.sampleset_id;

							row15.sampleset_size = row13.sampleset_size;

							row15.sampleset_taxonomy_id = row13.sampleset_taxonomy_id;

							row15.sampleset_type = row13.sampleset_type;

							row15.sampleset_name = row13.sampleset_name;

							row15.sampleset_description = row13.sampleset_description;

							row15.sampleset_phenotype = row13.sampleset_phenotype;

							row15.sampleset_population = row13.sampleset_population;

							row15.sampleset_sex = row13.sampleset_sex;

							nb_line_tFilterColumns_3++;

							tos_count_tFilterColumns_3++;

							/**
							 * [tFilterColumns_3 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_3 main ] start
							 */

							currentComponent = "tFileOutputDelimited_3";

							StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
							if (row15.sampleset_id != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_id);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_size != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_size);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_taxonomy_id != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_taxonomy_id);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_type != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_type);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_name != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_name);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_description != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_description);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_phenotype != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_phenotype);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_population != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_population);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_tFileOutputDelimited_3);
							if (row15.sampleset_sex != null) {
								sb_tFileOutputDelimited_3
										.append(row15.sampleset_sex);
							}
							sb_tFileOutputDelimited_3
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

							nb_line_tFileOutputDelimited_3++;
							resourceMap.put("nb_line_tFileOutputDelimited_3",
									nb_line_tFileOutputDelimited_3);

							outtFileOutputDelimited_3
									.write(sb_tFileOutputDelimited_3.toString());

							tos_count_tFileOutputDelimited_3++;

							/**
							 * [tFileOutputDelimited_3 main ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE",
						nb_line_tFilterColumns_3);

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				tFileInputFullRow_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileRowCount_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();
				row32Struct row32 = new row32Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workdir + "/tmp/temp3.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_1 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_1", false);
				start_Hash.put("tFileInputFullRow_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_1";

				int tos_count_tFileInputFullRow_1 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

				try {// }
					fid_tFileInputFullRow_1 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp2.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_1.nextRecord()) {// }
						row31 = null;
						boolean whetherReject_tFileInputFullRow_1 = false;
						row31 = new row31Struct();
						row31.line = fid_tFileInputFullRow_1.get(0);

						/**
						 * [tFileInputFullRow_1 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_1 main ] start
						 */

						currentComponent = "tFileInputFullRow_1";

						tos_count_tFileInputFullRow_1++;

						/**
						 * [tFileInputFullRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						row32 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches(
								(!row31.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row32 == null) {
								row32 = new row32Struct();
							}
							row32.line = row31.line;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row32.line != null) {
								sb_tFileOutputDelimited_1.append(row32.line);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputFullRow_1 end ] start
						 */

						currentComponent = "tFileInputFullRow_1";

					}
				} finally {
					if (fid_tFileInputFullRow_1 != null) {
						fid_tFileInputFullRow_1.close();
					}
				}
				globalMap.put("tFileInputFullRow_1_NB_LINE",
						fid_tFileInputFullRow_1.getRowNumber());

				ok_Hash.put("tFileInputFullRow_1", true);
				end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_1 finally ] start
				 */

				currentComponent = "tFileInputFullRow_1";

				/**
				 * [tFileInputFullRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.workdir + "/tmp/temp3.tmp";
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp3.tmp")),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp3.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) > 1) {

					tFileInputDelimited_4Process(globalMap);
				}

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcheckLookupStruct implements
			routines.system.IPersistableRow<copyOfcheckLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcheckLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toMetaDataFileStruct implements
			routines.system.IPersistableRow<toMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class checkLookupStruct implements
			routines.system.IPersistableRow<checkLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(checkLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_4Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFixedFlowInput_2Process(globalMap);
				tFixedFlowInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row16Struct row16 = new row16Struct();
				toMetaDataFileStruct toMetaDataFile = new toMetaDataFileStruct();
				copyOfcheckLookupStruct copyOfcheckLookup = new copyOfcheckLookupStruct();
				checkLookupStruct checkLookup = new checkLookupStruct();
				row9Struct row9 = new row9Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) globalMap
						.get("tHash_Lookup_row23"));

				row23Struct row23HashKey = new row23Struct();
				row23Struct row23Default = new row23Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcheckLookupStruct copyOfcheckLookup_tmp = new copyOfcheckLookupStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_3 begin ] start
				 */

				ok_Hash.put("tBufferOutput_3", false);
				start_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				currentComponent = "tBufferOutput_3";

				int tos_count_tBufferOutput_3 = 0;

				/**
				 * [tBufferOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toMetaDataFileStruct toMetaDataFile_tmp = new toMetaDataFileStruct();
				checkLookupStruct checkLookup_tmp = new checkLookupStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tBufferOutput_2 begin ] start
				 */

				ok_Hash.put("tBufferOutput_2", false);
				start_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				currentComponent = "tBufferOutput_2";

				int tos_count_tBufferOutput_2 = 0;

				/**
				 * [tBufferOutput_2 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_1", false);
				start_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_1";

				int tos_count_tSchemaComplianceCheck_1 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_1 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row1Struct row1) {
						// validate nullable (empty as null)
						if ((row1.sampleset_id == null)
								|| ("".equals(row1.sampleset_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.sampleset_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_id != null) {
							if (row1.sampleset_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row1.sampleset_size == null)
								|| ("".equals(row1.sampleset_size))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.sampleset_size != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_size);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_size != null) {
							if (row1.sampleset_size.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_size:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row1.sampleset_taxonomy_id == null)
								|| ("".equals(row1.sampleset_taxonomy_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.sampleset_taxonomy_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_taxonomy_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_taxonomy_id != null) {
							if (row1.sampleset_taxonomy_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_taxonomy_id:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_type != null
									&& (!"".equals(row1.sampleset_type))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_type != null
								&& (!"".equals(row1.sampleset_type))) {
							if (row1.sampleset_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_type:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_name != null
									&& (!"".equals(row1.sampleset_name))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_name);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_name != null
								&& (!"".equals(row1.sampleset_name))) {
							if (row1.sampleset_name.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_name:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_description != null
									&& (!"".equals(row1.sampleset_description))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_description != null
								&& (!"".equals(row1.sampleset_description))) {
							if (row1.sampleset_description.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_description:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_phenotype != null
									&& (!"".equals(row1.sampleset_phenotype))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_phenotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_phenotype != null
								&& (!"".equals(row1.sampleset_phenotype))) {
							if (row1.sampleset_phenotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_phenotype:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_population != null
									&& (!"".equals(row1.sampleset_population))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_population);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_population != null
								&& (!"".equals(row1.sampleset_population))) {
							if (row1.sampleset_population.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_population:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_sex != null
									&& (!"".equals(row1.sampleset_sex))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_sex);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_sex != null
								&& (!"".equals(row1.sampleset_sex))) {
							if (row1.sampleset_sex.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_sex:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

				/**
				 * [tSchemaComplianceCheck_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				try {

					Object filename_tFileInputDelimited_4 = context.workdir
							+ "/tmp/temp3.tmp";
					if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
						if (footer_value_tFileInputDelimited_4 > 0
								|| random_value_tFileInputDelimited_4 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp3.tmp",
								context.encoding, "\t", "\n", false, 1, 0, -1,
								-1, true);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_4 != null
							&& fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_4 = 0;

							columnIndexWithD_tFileInputDelimited_4 = 0;

							row1.sampleset_id = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 1;

							row1.sampleset_size = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 2;

							row1.sampleset_taxonomy_id = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 3;

							row1.sampleset_type = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 4;

							row1.sampleset_name = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 5;

							row1.sampleset_description = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 6;

							row1.sampleset_phenotype = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 7;

							row1.sampleset_population = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							columnIndexWithD_tFileInputDelimited_4 = 8;

							row1.sampleset_sex = fid_tFileInputDelimited_4
									.get(columnIndexWithD_tFileInputDelimited_4);

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {
							row9 = null;

							/**
							 * [tSchemaComplianceCheck_1 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_1";

							row16 = null;
							row9 = null;
							rsvUtil_tSchemaComplianceCheck_1
									.setRowValue_0(row1);
							if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row16 = new row16Struct();
								row16.sampleset_id = row1.sampleset_id;
								row16.sampleset_size = row1.sampleset_size;
								row16.sampleset_taxonomy_id = row1.sampleset_taxonomy_id;
								row16.sampleset_type = row1.sampleset_type;
								row16.sampleset_name = row1.sampleset_name;
								row16.sampleset_description = row1.sampleset_description;
								row16.sampleset_phenotype = row1.sampleset_phenotype;
								row16.sampleset_population = row1.sampleset_population;
								row16.sampleset_sex = row1.sampleset_sex;
							}
							if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row9 = new row9Struct();
								row9.sampleset_id = row1.sampleset_id;
								row9.sampleset_size = row1.sampleset_size;
								row9.sampleset_taxonomy_id = row1.sampleset_taxonomy_id;
								row9.sampleset_type = row1.sampleset_type;
								row9.sampleset_name = row1.sampleset_name;
								row9.sampleset_description = row1.sampleset_description;
								row9.sampleset_phenotype = row1.sampleset_phenotype;
								row9.sampleset_population = row1.sampleset_population;
								row9.sampleset_sex = row1.sampleset_sex;
								row9.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
								row9.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_1.reset();

							tos_count_tSchemaComplianceCheck_1++;

							/**
							 * [tSchemaComplianceCheck_1 main ] stop
							 */
							// Start of branch "row16"
							if (row16 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row7HashKey.SamplesetTypeCV = row16.sampleset_type;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7
												.getCount(row7HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.SamplesetTypeCV = '"
									// + row7HashKey.SamplesetTypeCV + "'");
								} // G 071

								row7Struct row7 = null;

								row7Struct fromLookup_row7 = null;
								row7 = row7Default;

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7.hasNext()) { // G
																			// 099

									fromLookup_row7 = tHash_Lookup_row7.next();

								} // G 099

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									toMetaDataFile = null;
									checkLookup = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table : 'toMetaDataFile'
										toMetaDataFile_tmp.sampleset_id = row16.sampleset_id;
										toMetaDataFile_tmp.sampleset_size = row16.sampleset_size;
										toMetaDataFile_tmp.sampleset_taxonomy_id = row16.sampleset_taxonomy_id;
										toMetaDataFile_tmp.sampleset_type = row16.sampleset_type;
										toMetaDataFile_tmp.sampleset_name = row16.sampleset_name;
										toMetaDataFile_tmp.sampleset_description = row16.sampleset_description;
										toMetaDataFile_tmp.sampleset_phenotype = row16.sampleset_phenotype;
										toMetaDataFile_tmp.sampleset_population = row16.sampleset_population;
										toMetaDataFile_tmp.sampleset_sex = row16.sampleset_sex;
										toMetaDataFile = toMetaDataFile_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'checkLookup'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_2) {
										checkLookup_tmp.sampleset_id = row16.sampleset_id;
										checkLookup_tmp.sampleset_size = row16.sampleset_size;
										checkLookup_tmp.sampleset_taxonomy_id = row16.sampleset_taxonomy_id;
										checkLookup_tmp.sampleset_type = row16.sampleset_type;
										checkLookup_tmp.sampleset_name = row16.sampleset_name;
										checkLookup_tmp.sampleset_description = row16.sampleset_description;
										checkLookup_tmp.sampleset_phenotype = row16.sampleset_phenotype;
										checkLookup_tmp.sampleset_population = row16.sampleset_population;
										checkLookup_tmp.sampleset_sex = row16.sampleset_sex;
										checkLookup_tmp.errorMessage = "Sampleset type ("
												+ row16.sampleset_type
												+ ") tab does not match the list ("
												+ row7.SamplesetTypeCV + ") !";
										checkLookup = checkLookup_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "toMetaDataFile"
								if (toMetaDataFile != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row23"
									// /////////////////////////////////////////////

									boolean forceLooprow23 = false;

									row23Struct row23ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										row23HashKey.SexCV = toMetaDataFile.sampleset_sex;

										row23HashKey.hashCodeDirty = true;

										tHash_Lookup_row23.lookup(row23HashKey);

										if (!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row23 != null
											&& tHash_Lookup_row23
													.getCount(row23HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.SexCV = '"
										// + row23HashKey.SexCV + "'");
									} // G 071

									row23Struct row23 = null;

									row23Struct fromLookup_row23 = null;
									row23 = row23Default;

									if (tHash_Lookup_row23 != null
											&& tHash_Lookup_row23.hasNext()) { // G
																				// 099

										fromLookup_row23 = tHash_Lookup_row23
												.next();

									} // G 099

									if (fromLookup_row23 != null) {
										row23 = fromLookup_row23;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										copyOfcheckLookup = null;

										if (!rejectedInnerJoin_tMap_1) {
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table :
										// 'copyOfcheckLookup'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_1) {
											copyOfcheckLookup_tmp.sampleset_id = toMetaDataFile.sampleset_id;
											copyOfcheckLookup_tmp.sampleset_size = toMetaDataFile.sampleset_size;
											copyOfcheckLookup_tmp.sampleset_taxonomy_id = toMetaDataFile.sampleset_taxonomy_id;
											copyOfcheckLookup_tmp.sampleset_type = toMetaDataFile.sampleset_type;
											copyOfcheckLookup_tmp.sampleset_name = toMetaDataFile.sampleset_name;
											copyOfcheckLookup_tmp.sampleset_description = toMetaDataFile.sampleset_description;
											copyOfcheckLookup_tmp.sampleset_phenotype = toMetaDataFile.sampleset_phenotype;
											copyOfcheckLookup_tmp.sampleset_population = toMetaDataFile.sampleset_population;
											copyOfcheckLookup_tmp.sampleset_sex = toMetaDataFile.sampleset_sex;
											copyOfcheckLookup_tmp.errorMessage = "Sex ("
													+ toMetaDataFile.sampleset_sex
													+ ") tab does not match the list!";
											copyOfcheckLookup = copyOfcheckLookup_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "copyOfcheckLookup"
									if (copyOfcheckLookup != null) {

										/**
										 * [tBufferOutput_1 main ] start
										 */

										currentComponent = "tBufferOutput_1";

										String[] row_tBufferOutput_1 = new String[] {
												"", "", "", "", "", "", "", "",
												"", "", };
										if (copyOfcheckLookup.sampleset_id != null) {

											row_tBufferOutput_1[0] = copyOfcheckLookup.sampleset_id;

										} else {
											row_tBufferOutput_1[0] = null;
										}
										if (copyOfcheckLookup.sampleset_size != null) {

											row_tBufferOutput_1[1] = copyOfcheckLookup.sampleset_size;

										} else {
											row_tBufferOutput_1[1] = null;
										}
										if (copyOfcheckLookup.sampleset_taxonomy_id != null) {

											row_tBufferOutput_1[2] = copyOfcheckLookup.sampleset_taxonomy_id;

										} else {
											row_tBufferOutput_1[2] = null;
										}
										if (copyOfcheckLookup.sampleset_type != null) {

											row_tBufferOutput_1[3] = copyOfcheckLookup.sampleset_type;

										} else {
											row_tBufferOutput_1[3] = null;
										}
										if (copyOfcheckLookup.sampleset_name != null) {

											row_tBufferOutput_1[4] = copyOfcheckLookup.sampleset_name;

										} else {
											row_tBufferOutput_1[4] = null;
										}
										if (copyOfcheckLookup.sampleset_description != null) {

											row_tBufferOutput_1[5] = copyOfcheckLookup.sampleset_description;

										} else {
											row_tBufferOutput_1[5] = null;
										}
										if (copyOfcheckLookup.sampleset_phenotype != null) {

											row_tBufferOutput_1[6] = copyOfcheckLookup.sampleset_phenotype;

										} else {
											row_tBufferOutput_1[6] = null;
										}
										if (copyOfcheckLookup.sampleset_population != null) {

											row_tBufferOutput_1[7] = copyOfcheckLookup.sampleset_population;

										} else {
											row_tBufferOutput_1[7] = null;
										}
										if (copyOfcheckLookup.sampleset_sex != null) {

											row_tBufferOutput_1[8] = copyOfcheckLookup.sampleset_sex;

										} else {
											row_tBufferOutput_1[8] = null;
										}
										if (copyOfcheckLookup.errorMessage != null) {

											row_tBufferOutput_1[9] = copyOfcheckLookup.errorMessage;

										} else {
											row_tBufferOutput_1[9] = null;
										}
										globalBuffer.add(row_tBufferOutput_1);

										tos_count_tBufferOutput_1++;

										/**
										 * [tBufferOutput_1 main ] stop
										 */

									} // End of branch "copyOfcheckLookup"

								} // End of branch "toMetaDataFile"

								// Start of branch "checkLookup"
								if (checkLookup != null) {

									/**
									 * [tBufferOutput_3 main ] start
									 */

									currentComponent = "tBufferOutput_3";

									String[] row_tBufferOutput_3 = new String[] {
											"", "", "", "", "", "", "", "", "",
											"", };
									if (checkLookup.sampleset_id != null) {

										row_tBufferOutput_3[0] = checkLookup.sampleset_id;

									} else {
										row_tBufferOutput_3[0] = null;
									}
									if (checkLookup.sampleset_size != null) {

										row_tBufferOutput_3[1] = checkLookup.sampleset_size;

									} else {
										row_tBufferOutput_3[1] = null;
									}
									if (checkLookup.sampleset_taxonomy_id != null) {

										row_tBufferOutput_3[2] = checkLookup.sampleset_taxonomy_id;

									} else {
										row_tBufferOutput_3[2] = null;
									}
									if (checkLookup.sampleset_type != null) {

										row_tBufferOutput_3[3] = checkLookup.sampleset_type;

									} else {
										row_tBufferOutput_3[3] = null;
									}
									if (checkLookup.sampleset_name != null) {

										row_tBufferOutput_3[4] = checkLookup.sampleset_name;

									} else {
										row_tBufferOutput_3[4] = null;
									}
									if (checkLookup.sampleset_description != null) {

										row_tBufferOutput_3[5] = checkLookup.sampleset_description;

									} else {
										row_tBufferOutput_3[5] = null;
									}
									if (checkLookup.sampleset_phenotype != null) {

										row_tBufferOutput_3[6] = checkLookup.sampleset_phenotype;

									} else {
										row_tBufferOutput_3[6] = null;
									}
									if (checkLookup.sampleset_population != null) {

										row_tBufferOutput_3[7] = checkLookup.sampleset_population;

									} else {
										row_tBufferOutput_3[7] = null;
									}
									if (checkLookup.sampleset_sex != null) {

										row_tBufferOutput_3[8] = checkLookup.sampleset_sex;

									} else {
										row_tBufferOutput_3[8] = null;
									}
									if (checkLookup.errorMessage != null) {

										row_tBufferOutput_3[9] = checkLookup.errorMessage;

									} else {
										row_tBufferOutput_3[9] = null;
									}
									globalBuffer.add(row_tBufferOutput_3);

									tos_count_tBufferOutput_3++;

									/**
									 * [tBufferOutput_3 main ] stop
									 */

								} // End of branch "checkLookup"

							} // End of branch "row16"

							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								row6.sampleset_id = row9.sampleset_id;

								row6.sampleset_size = row9.sampleset_size;

								row6.sampleset_taxonomy_id = row9.sampleset_taxonomy_id;

								row6.sampleset_type = row9.sampleset_type;

								row6.sampleset_name = row9.sampleset_name;

								row6.sampleset_description = row9.sampleset_description;

								row6.sampleset_phenotype = row9.sampleset_phenotype;

								row6.sampleset_population = row9.sampleset_population;

								row6.sampleset_sex = row9.sampleset_sex;

								row6.errorMessage = row9.errorMessage;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tBufferOutput_2 main ] start
								 */

								currentComponent = "tBufferOutput_2";

								String[] row_tBufferOutput_2 = new String[] {
										"", "", "", "", "", "", "", "", "", "", };
								if (row6.sampleset_id != null) {

									row_tBufferOutput_2[0] = row6.sampleset_id;

								} else {
									row_tBufferOutput_2[0] = null;
								}
								if (row6.sampleset_size != null) {

									row_tBufferOutput_2[1] = row6.sampleset_size;

								} else {
									row_tBufferOutput_2[1] = null;
								}
								if (row6.sampleset_taxonomy_id != null) {

									row_tBufferOutput_2[2] = row6.sampleset_taxonomy_id;

								} else {
									row_tBufferOutput_2[2] = null;
								}
								if (row6.sampleset_type != null) {

									row_tBufferOutput_2[3] = row6.sampleset_type;

								} else {
									row_tBufferOutput_2[3] = null;
								}
								if (row6.sampleset_name != null) {

									row_tBufferOutput_2[4] = row6.sampleset_name;

								} else {
									row_tBufferOutput_2[4] = null;
								}
								if (row6.sampleset_description != null) {

									row_tBufferOutput_2[5] = row6.sampleset_description;

								} else {
									row_tBufferOutput_2[5] = null;
								}
								if (row6.sampleset_phenotype != null) {

									row_tBufferOutput_2[6] = row6.sampleset_phenotype;

								} else {
									row_tBufferOutput_2[6] = null;
								}
								if (row6.sampleset_population != null) {

									row_tBufferOutput_2[7] = row6.sampleset_population;

								} else {
									row_tBufferOutput_2[7] = null;
								}
								if (row6.sampleset_sex != null) {

									row_tBufferOutput_2[8] = row6.sampleset_sex;

								} else {
									row_tBufferOutput_2[8] = null;
								}
								if (row6.errorMessage != null) {

									row_tBufferOutput_2[9] = row6.errorMessage;

								} else {
									row_tBufferOutput_2[9] = null;
								}
								globalBuffer.add(row_tBufferOutput_2);

								tos_count_tBufferOutput_2++;

								/**
								 * [tBufferOutput_2 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp3.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_4 != null) {
							fid_tFileInputDelimited_4.close();
						}
					}
					if (fid_tFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								fid_tFileInputDelimited_4.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				ok_Hash.put("tSchemaComplianceCheck_1", true);
				end_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row23 != null) {
					tHash_Lookup_row23.endGet();
				}
				globalMap.remove("tHash_Lookup_row23");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				/**
				 * [tBufferOutput_1 end ] stop
				 */

				/**
				 * [tBufferOutput_3 end ] start
				 */

				currentComponent = "tBufferOutput_3";

				ok_Hash.put("tBufferOutput_3", true);
				end_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				/**
				 * [tBufferOutput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tBufferOutput_2 end ] start
				 */

				currentComponent = "tBufferOutput_2";

				ok_Hash.put("tBufferOutput_2", true);
				end_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				/**
				 * [tBufferOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row23");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				/**
				 * [tSchemaComplianceCheck_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_3 finally ] start
				 */

				currentComponent = "tBufferOutput_3";

				/**
				 * [tBufferOutput_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_2 finally ] start
				 */

				currentComponent = "tBufferOutput_2";

				/**
				 * [tBufferOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workdir + "/bad/samplesets.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								context.encoding));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("sampleset_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_size");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_taxonomy_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_name");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_description");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_phenotype");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_population");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_sex");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("errorMessage");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[10];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row4.sampleset_id = row_tBufferInput_1[0];

					}

					else {
						row4.sampleset_id = null;
					}
					if (1 < row_tBufferInput_1.length) {

						row4.sampleset_size = row_tBufferInput_1[1];

					}

					else {
						row4.sampleset_size = null;
					}
					if (2 < row_tBufferInput_1.length) {

						row4.sampleset_taxonomy_id = row_tBufferInput_1[2];

					}

					else {
						row4.sampleset_taxonomy_id = null;
					}
					if (3 < row_tBufferInput_1.length) {

						row4.sampleset_type = row_tBufferInput_1[3];

					}

					else {
						row4.sampleset_type = null;
					}
					if (4 < row_tBufferInput_1.length) {

						row4.sampleset_name = row_tBufferInput_1[4];

					}

					else {
						row4.sampleset_name = null;
					}
					if (5 < row_tBufferInput_1.length) {

						row4.sampleset_description = row_tBufferInput_1[5];

					}

					else {
						row4.sampleset_description = null;
					}
					if (6 < row_tBufferInput_1.length) {

						row4.sampleset_phenotype = row_tBufferInput_1[6];

					}

					else {
						row4.sampleset_phenotype = null;
					}
					if (7 < row_tBufferInput_1.length) {

						row4.sampleset_population = row_tBufferInput_1[7];

					}

					else {
						row4.sampleset_population = null;
					}
					if (8 < row_tBufferInput_1.length) {

						row4.sampleset_sex = row_tBufferInput_1[8];

					}

					else {
						row4.sampleset_sex = null;
					}
					if (9 < row_tBufferInput_1.length) {

						row4.errorMessage = row_tBufferInput_1[9];

					}

					else {
						row4.errorMessage = null;
					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row4.sampleset_id != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_size != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_size);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_taxonomy_id != null) {
						sb_tFileOutputDelimited_2
								.append(row4.sampleset_taxonomy_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_type != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_type);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_name != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_name);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_description != null) {
						sb_tFileOutputDelimited_2
								.append(row4.sampleset_description);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_phenotype != null) {
						sb_tFileOutputDelimited_2
								.append(row4.sampleset_phenotype);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_population != null) {
						sb_tFileOutputDelimited_2
								.append(row4.sampleset_population);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_sex != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_sex);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.errorMessage != null) {
						sb_tFileOutputDelimited_2.append(row4.errorMessage);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.SamplesetTypeCV == null) ? 0
								: this.SamplesetTypeCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.SamplesetTypeCV == null) {
				if (other.SamplesetTypeCV != null)
					return false;

			} else if (!this.SamplesetTypeCV.equals(other.SamplesetTypeCV))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.SamplesetTypeCV = this.SamplesetTypeCV;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.SamplesetTypeCV = this.SamplesetTypeCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SamplesetTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SamplesetTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SamplesetTypeCV,
					other.SamplesetTypeCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SamplesetTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SamplesetTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SamplesetTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SamplesetTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				row2Struct row2 = new row2Struct();
				row19Struct row19 = new row19Struct();

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tUnite_1 - inputs:(row18,row19)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 -
				// inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row16,row7)
				// outputs:(toMetaDataFile,checkLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				int nb_line_tFixedFlowInput_2 = 0;
				List<row18Struct> cacheList_tFixedFlowInput_2 = new java.util.ArrayList<row18Struct>();
				row18 = new row18Struct();
				row18.SamplesetTypeCV = "";
				cacheList_tFixedFlowInput_2.add(row18);
				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {
					for (row18Struct tmpRow_tFixedFlowInput_2 : cacheList_tFixedFlowInput_2) {
						nb_line_tFixedFlowInput_2++;
						row18 = tmpRow_tFixedFlowInput_2;

						/**
						 * [tFixedFlowInput_2 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_2 main ] start
						 */

						currentComponent = "tFixedFlowInput_2";

						tos_count_tFixedFlowInput_2++;

						/**
						 * [tFixedFlowInput_2 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row7 = new row7Struct();

						row7.SamplesetTypeCV = row18.SamplesetTypeCV;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.SamplesetTypeCV = row7.SamplesetTypeCV;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tFixedFlowInput_2 end ] start
						 */

						currentComponent = "tFixedFlowInput_2";

					}
				}
				cacheList_tFixedFlowInput_2.clear();
				globalMap.put("tFixedFlowInput_2_NB_LINE",
						nb_line_tFixedFlowInput_2);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.AnalysisTypeCV = null;

								row2.CollectionCV = null;

								row2.ContactRoleCV = null;

								row2.LinkDbCV = null;

								row2.MethodTypeCV = null;

								row2.OriginCV = null;

								row2.RecipientStatusCV = null;

								row2.ReferenceTypeCV = null;

								row2.SamplesetTypeCV = null;

								row2.SexCV = null;

								row2.StrandTypeCV = null;

								row2.StudyTypeCV = null;

								row2.SubjectAgeUnitsCV = null;

								row2.VariantCallTypeCV = null;

								row2.VariantCallZygosityCV = null;

								row2.VariantRegionTypeCV = null;

								row2.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.AnalysisTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.CollectionCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ContactRoleCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.LinkDbCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.MethodTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.OriginCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.RecipientStatusCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ReferenceTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SamplesetTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SexCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StrandTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StudyTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SubjectAgeUnitsCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallZygosityCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantRegionTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BooleanCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterColumns_2 main ] start
							 */

							currentComponent = "tFilterColumns_2";

							row19.SamplesetTypeCV = row2.SamplesetTypeCV;

							nb_line_tFilterColumns_2++;

							tos_count_tFilterColumns_2++;

							/**
							 * [tFilterColumns_2 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row7 = new row7Struct();

							row7.SamplesetTypeCV = row19.SamplesetTypeCV;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.SamplesetTypeCV = row7.SamplesetTypeCV;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row23Struct implements
			routines.system.IPersistableComparableLookupRow<row23Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.SexCV == null) ? 0 : this.SexCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.SexCV == null) {
				if (other.SexCV != null)
					return false;

			} else if (!this.SexCV.equals(other.SexCV))

				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.SexCV = this.SexCV;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.SexCV = this.SexCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SexCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SexCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SexCV=" + SexCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SexCV, other.SexCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SexCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SexCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SexCV=" + SexCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.SexCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.SexCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SexCV=" + SexCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkSamplesets = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkSamplesets.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkSamplesets.length == 0) {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkSamplesets = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkSamplesets, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkSamplesets, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkSamplesets) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();

				row23Struct row23 = new row23Struct();

				/**
				 * [tAdvancedHash_row23 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row23", false);
				start_Hash.put("tAdvancedHash_row23",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row23";

				int tos_count_tAdvancedHash_row23 = 0;

				// connection name:row23
				// source node:tUnite_2 - inputs:(row20,row22)
				// outputs:(row23,row23) | target node:tAdvancedHash_row23 -
				// inputs:(row23) outputs:()
				// linked node: tMap_1 - inputs:(toMetaDataFile,row23)
				// outputs:(copyOfcheckLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row23Struct> getLookup(matchingModeEnum_row23);

				globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);

				/**
				 * [tAdvancedHash_row23 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				int nb_line_tFixedFlowInput_3 = 0;
				List<row20Struct> cacheList_tFixedFlowInput_3 = new java.util.ArrayList<row20Struct>();
				row20 = new row20Struct();
				row20.SexCV = "";
				cacheList_tFixedFlowInput_3.add(row20);
				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {
					for (row20Struct tmpRow_tFixedFlowInput_3 : cacheList_tFixedFlowInput_3) {
						nb_line_tFixedFlowInput_3++;
						row20 = tmpRow_tFixedFlowInput_3;

						/**
						 * [tFixedFlowInput_3 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_3 main ] start
						 */

						currentComponent = "tFixedFlowInput_3";

						tos_count_tFixedFlowInput_3++;

						/**
						 * [tFixedFlowInput_3 main ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// ////////

						// for output
						row23 = new row23Struct();

						row23.SexCV = row20.SexCV;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row23 main ] start
						 */

						currentComponent = "tAdvancedHash_row23";

						row23Struct row23_HashRow = new row23Struct();

						row23_HashRow.SexCV = row23.SexCV;

						tHash_Lookup_row23.put(row23_HashRow);

						tos_count_tAdvancedHash_row23++;

						/**
						 * [tAdvancedHash_row23 main ] stop
						 */

						/**
						 * [tFixedFlowInput_3 end ] start
						 */

						currentComponent = "tFixedFlowInput_3";

					}
				}
				cacheList_tFixedFlowInput_3.clear();
				globalMap.put("tFixedFlowInput_3_NB_LINE",
						nb_line_tFixedFlowInput_3);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_4 begin ] start
				 */

				ok_Hash.put("tFilterColumns_4", false);
				start_Hash.put("tFilterColumns_4", System.currentTimeMillis());

				currentComponent = "tFilterColumns_4";

				int tos_count_tFilterColumns_4 = 0;

				int nb_line_tFilterColumns_4 = 0;

				/**
				 * [tFilterColumns_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('\"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('\"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {
						rowstate_tFileInputDelimited_5.reset();

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row21 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row21 = new row21Struct();
						try {

							char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_5_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row21.AnalysisTypeCV = null;

								row21.CollectionCV = null;

								row21.ContactRoleCV = null;

								row21.LinkDbCV = null;

								row21.MethodTypeCV = null;

								row21.OriginCV = null;

								row21.RecipientStatusCV = null;

								row21.ReferenceTypeCV = null;

								row21.SamplesetTypeCV = null;

								row21.SexCV = null;

								row21.StrandTypeCV = null;

								row21.StudyTypeCV = null;

								row21.SubjectAgeUnitsCV = null;

								row21.VariantCallTypeCV = null;

								row21.VariantCallZygosityCV = null;

								row21.VariantRegionTypeCV = null;

								row21.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.AnalysisTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.CollectionCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.ContactRoleCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.LinkDbCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.MethodTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.OriginCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.RecipientStatusCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.ReferenceTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.SamplesetTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.SexCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.StrandTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.StudyTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.SubjectAgeUnitsCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.VariantCallTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.VariantCallZygosityCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.VariantRegionTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 16;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row21.BooleanCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row21.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tFilterColumns_4 main ] start
							 */

							currentComponent = "tFilterColumns_4";

							row22.SexCV = row21.SexCV;

							nb_line_tFilterColumns_4++;

							tos_count_tFilterColumns_4++;

							/**
							 * [tFilterColumns_4 main ] stop
							 */

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							// ////////

							// for output
							row23 = new row23Struct();

							row23.SexCV = row22.SexCV;

							nb_line_tUnite_2++;

							// ////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row23 main ] start
							 */

							currentComponent = "tAdvancedHash_row23";

							row23Struct row23_HashRow = new row23Struct();

							row23_HashRow.SexCV = row23.SexCV;

							tHash_Lookup_row23.put(row23_HashRow);

							tos_count_tAdvancedHash_row23++;

							/**
							 * [tAdvancedHash_row23 main ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tFilterColumns_4 end ] start
				 */

				currentComponent = "tFilterColumns_4";

				globalMap.put("tFilterColumns_4_NB_LINE",
						nb_line_tFilterColumns_4);

				ok_Hash.put("tFilterColumns_4", true);
				end_Hash.put("tFilterColumns_4", System.currentTimeMillis());

				/**
				 * [tFilterColumns_4 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row23 end ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				tHash_Lookup_row23.endPut();

				ok_Hash.put("tAdvancedHash_row23", true);
				end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row23 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tFilterColumns_4 finally ] start
				 */

				currentComponent = "tFilterColumns_4";

				/**
				 * [tFilterColumns_4 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row23 finally ] start
				 */

				currentComponent = "tAdvancedHash_row23";

				/**
				 * [tAdvancedHash_row23 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final checkSamplesets checkSamplesetsClass = new checkSamplesets();

		int exitCode = checkSamplesetsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer
				.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = checkSamplesets.class
					.getClassLoader().getResourceAsStream(
							"checkgnpcnv/checksamplesets_0_3/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.encoding = (String) context.getProperty("encoding");
			context.excelFileIn = (String) context.getProperty("excelFileIn");
			context.properties = (String) context.getProperty("properties");
			context.tab = (String) context.getProperty("tab");
			context.workdir = (String) context.getProperty("workdir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("excelFileIn")) {
				context.excelFileIn = (String) parentContextMap
						.get("excelFileIn");
			}
			if (parentContextMap.containsKey("properties")) {
				context.properties = (String) parentContextMap
						.get("properties");
			}
			if (parentContextMap.containsKey("tab")) {
				context.tab = (String) parentContextMap.get("tab");
			}
			if (parentContextMap.containsKey("workdir")) {
				context.workdir = (String) parentContextMap.get("workdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : checkSamplesets");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 304981 characters generated by Talend Open Studio for Data Integration on the
 * 25 août 2017 11:49:55 CEST
 ************************************************************************************************/
