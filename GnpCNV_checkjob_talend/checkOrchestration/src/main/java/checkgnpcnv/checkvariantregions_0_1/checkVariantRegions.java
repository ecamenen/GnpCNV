// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package checkgnpcnv.checkvariantregions_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: checkVariantRegions Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class checkVariantRegions implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (csvDir != null) {

				this.setProperty("csvDir", csvDir.toString());

			}

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (excelFileIn != null) {

				this.setProperty("excelFileIn", excelFileIn.toString());

			}

			if (properties != null) {

				this.setProperty("properties", properties.toString());

			}

			if (workdir != null) {

				this.setProperty("workdir", workdir.toString());

			}

		}

		public String csvDir;

		public String getCsvDir() {
			return this.csvDir;
		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String excelFileIn;

		public String getExcelFileIn() {
			return this.excelFileIn;
		}

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		public String workdir;

		public String getWorkdir() {
			return this.workdir;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "checkVariantRegions";
	private final String projectName = "CHECKGNPCNV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					checkVariantRegions.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(checkVariantRegions.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("* " + jobName);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputExcel_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row1Struct row1 = new row1Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_4, false),
								context.encoding));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("variant_region_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("variant_region_type");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("assertion_method");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("assembly");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("chr");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("contig");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("outer_start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("inner_start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("inner_stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("outer_stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4
							.write("supporting_variant_call_ids");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4
							.write("supporting_variant_region_ids");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("description");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				Object source_tFileInputExcel_2 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof java.io.InputStream
						|| source_tFileInputExcel_2 instanceof String) {
					excelReader_tFileInputExcel_2 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_2.addSheetName(
							"VARIANT REGIONS", false);
					int start_column_tFileInputExcel_2 = 1 - 1;
					int end_column_tFileInputExcel_2 = -1;
					if (start_column_tFileInputExcel_2 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_2 = start_column_tFileInputExcel_2 + 15 - 1;

					} else if (end_column_tFileInputExcel_2 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 - 15 + 1;
					}

					if (end_column_tFileInputExcel_2 < 0
							|| start_column_tFileInputExcel_2 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2;

					int header_tFileInputExcel_2 = 4;
					int limit_tFileInputExcel_2 = -1;

					int nb_line_tFileInputExcel_2 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_2 instanceof String) {
						excelReader_tFileInputExcel_2.parse(
								(String) source_tFileInputExcel_2,
								context.encoding);
					} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_2.parse(
								(java.io.InputStream) source_tFileInputExcel_2,
								context.encoding);
					}

					while ((header_tFileInputExcel_2--) > 0
							&& excelReader_tFileInputExcel_2.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_2.next();
					}

					while (excelReader_tFileInputExcel_2.hasNext()) {
						int emptyColumnCount_tFileInputExcel_2 = 0;

						if (limit_tFileInputExcel_2 != -1
								&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
							excelReader_tFileInputExcel_2.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_2 = excelReader_tFileInputExcel_2
								.next();
						row3 = null;
						row1 = null;
						int tempRowLength_tFileInputExcel_2 = 15;

						int columnIndex_tFileInputExcel_2 = 0;

						String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];

						for (int i_tFileInputExcel_2 = 0; i_tFileInputExcel_2 < tempRowLength_tFileInputExcel_2; i_tFileInputExcel_2++) {
							int current_tFileInputExcel_2 = i_tFileInputExcel_2
									+ start_column_tFileInputExcel_2;
							if (current_tFileInputExcel_2 <= actual_end_column_tFileInputExcel_2) {
								if (current_tFileInputExcel_2 < row_tFileInputExcel_2
										.size()) {
									String column_tFileInputExcel_2 = row_tFileInputExcel_2
											.get(current_tFileInputExcel_2);
									if (column_tFileInputExcel_2 != null) {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = column_tFileInputExcel_2;
									} else {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
									}
								} else {
									temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
								}
							} else {
								temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_2 = false;
						row3 = new row3Struct();
						int curColNum_tFileInputExcel_2 = -1;
						String curColName_tFileInputExcel_2 = "";

						try {
							columnIndex_tFileInputExcel_2 = 0;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "variant_region_id";

								row3.variant_region_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.variant_region_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 1;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "variant_region_type";

								row3.variant_region_type = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.variant_region_type = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 2;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "assertion_method";

								row3.assertion_method = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.assertion_method = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 3;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "assembly";

								row3.assembly = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.assembly = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 4;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "chr";

								row3.chr = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.chr = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 5;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "contig";

								row3.contig = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.contig = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 6;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "outer_start";

								row3.outer_start = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.outer_start = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 7;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "start";

								row3.start = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.start = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 8;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "inner_start";

								row3.inner_start = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.inner_start = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 9;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "inner_stop";

								row3.inner_stop = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.inner_stop = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 10;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "stop";

								row3.stop = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.stop = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 11;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "outer_stop";

								row3.outer_stop = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.outer_stop = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 12;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "supporting_variant_call_ids";

								row3.supporting_variant_call_ids = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.supporting_variant_call_ids = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 13;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "supporting_variant_region_ids";

								row3.supporting_variant_region_ids = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.supporting_variant_region_ids = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 14;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "description";

								row3.description = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row3.description = null;
								emptyColumnCount_tFileInputExcel_2++;
							}

							nb_line_tFileInputExcel_2++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_2 = true;
							row1 = new row1Struct();
							row1.variant_region_id = row3.variant_region_id;
							row1.variant_region_type = row3.variant_region_type;
							row1.assertion_method = row3.assertion_method;
							row1.assembly = row3.assembly;
							row1.chr = row3.chr;
							row1.contig = row3.contig;
							row1.outer_start = row3.outer_start;
							row1.start = row3.start;
							row1.inner_start = row3.inner_start;
							row1.inner_stop = row3.inner_stop;
							row1.stop = row3.stop;
							row1.outer_stop = row3.outer_stop;
							row1.supporting_variant_call_ids = row3.supporting_variant_call_ids;
							row1.supporting_variant_region_ids = row3.supporting_variant_region_ids;
							row1.description = row3.description;
							row1.errorMessage = e.getMessage() + " - Line: "
									+ tos_count_tFileInputExcel_2 + " column: "
									+ curColName_tFileInputExcel_2 + " (No. "
									+ curColNum_tFileInputExcel_2 + ")";
							row3 = null;
						}

						/**
						 * [tFileInputExcel_2 begin ] stop
						 */

						/**
						 * [tFileInputExcel_2 main ] start
						 */

						currentComponent = "tFileInputExcel_2";

						tos_count_tFileInputExcel_2++;

						/**
						 * [tFileInputExcel_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
							if (row3.variant_region_id != null) {
								sb_tFileOutputDelimited_4
										.append(row3.variant_region_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.variant_region_type != null) {
								sb_tFileOutputDelimited_4
										.append(row3.variant_region_type);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.assertion_method != null) {
								sb_tFileOutputDelimited_4
										.append(row3.assertion_method);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.assembly != null) {
								sb_tFileOutputDelimited_4.append(row3.assembly);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.chr != null) {
								sb_tFileOutputDelimited_4.append(row3.chr);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.contig != null) {
								sb_tFileOutputDelimited_4.append(row3.contig);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.outer_start != null) {
								sb_tFileOutputDelimited_4
										.append(row3.outer_start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.start != null) {
								sb_tFileOutputDelimited_4.append(row3.start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.inner_start != null) {
								sb_tFileOutputDelimited_4
										.append(row3.inner_start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.inner_stop != null) {
								sb_tFileOutputDelimited_4
										.append(row3.inner_stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.stop != null) {
								sb_tFileOutputDelimited_4.append(row3.stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.outer_stop != null) {
								sb_tFileOutputDelimited_4
										.append(row3.outer_stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.supporting_variant_call_ids != null) {
								sb_tFileOutputDelimited_4
										.append(row3.supporting_variant_call_ids);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.supporting_variant_region_ids != null) {
								sb_tFileOutputDelimited_4
										.append(row3.supporting_variant_region_ids);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row3.description != null) {
								sb_tFileOutputDelimited_4
										.append(row3.description);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4",
									nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4
									.write(sb_tFileOutputDelimited_4.toString());

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

						} // End of branch "row3"

						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tDie_1 main ] start
							 */

							currentComponent = "tDie_1";

							globalMap.put("tDie_1_DIE_PRIORITY", 5);
							System.err
									.println("VariantRegions sheet badly formated.");

							globalMap.put("tDie_1_DIE_MESSAGE",
									"VariantRegions sheet badly formated.");
							globalMap.put("tDie_1_DIE_MESSAGES",
									"VariantRegions sheet badly formated.");
							currentComponent = "tDie_1";
							status = "failure";
							errorCode = new Integer(1);
							globalMap.put("tDie_1_DIE_CODE", errorCode);

							if (true) {
								throw new TDieException();
							}

							tos_count_tDie_1++;

							/**
							 * [tDie_1 main ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputExcel_2 end ] start
						 */

						currentComponent = "tFileInputExcel_2";

					}

					try {
						if (excelReader_tFileInputExcel_2 != null) {
							excelReader_tFileInputExcel_2.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_2) {
						if (!(e_tFileInputExcel_2.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_2.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_2_NB_LINE",
							nb_line_tFileInputExcel_2);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				tFileInputFullRow_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFileInputExcel_2:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileRowCount_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_1 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_1", false);
				start_Hash.put("tFileInputFullRow_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_1";

				int tos_count_tFileInputFullRow_1 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

				try {// }
					fid_tFileInputFullRow_1 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_1.nextRecord()) {// }
						row11 = null;
						boolean whetherReject_tFileInputFullRow_1 = false;
						row11 = new row11Struct();
						row11.line = fid_tFileInputFullRow_1.get(0);

						/**
						 * [tFileInputFullRow_1 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_1 main ] start
						 */

						currentComponent = "tFileInputFullRow_1";

						tos_count_tFileInputFullRow_1++;

						/**
						 * [tFileInputFullRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						row13 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches(
								(!row11.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row13 == null) {
								row13 = new row13Struct();
							}
							row13.line = row11.line;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row13.line != null) {
								sb_tFileOutputDelimited_1.append(row13.line);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "row13"

						/**
						 * [tFileInputFullRow_1 end ] start
						 */

						currentComponent = "tFileInputFullRow_1";

					}
				} finally {
					if (fid_tFileInputFullRow_1 != null) {
						fid_tFileInputFullRow_1.close();
					}
				}
				globalMap.put("tFileInputFullRow_1_NB_LINE",
						fid_tFileInputFullRow_1.getRowNumber());

				ok_Hash.put("tFileInputFullRow_1", true);
				end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_1 finally ] start
				 */

				currentComponent = "tFileInputFullRow_1";

				/**
				 * [tFileInputFullRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.workdir + "/tmp/temp2.tmp";
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp")),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) > 1) {

					tFileInputDelimited_2Process(globalMap);
				}

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public static class checkLookupStruct implements
			routines.system.IPersistableRow<checkLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(checkLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFixedFlowInput_1Process(globalMap);

				row12Struct row12 = new row12Struct();
				row5Struct row5 = new row5Struct();
				checkLookupStruct checkLookup = new checkLookupStruct();
				row9Struct row9 = new row9Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tBufferOutput_3 begin ] start
				 */

				ok_Hash.put("tBufferOutput_3", false);
				start_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				currentComponent = "tBufferOutput_3";

				int tos_count_tBufferOutput_3 = 0;

				/**
				 * [tBufferOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				checkLookupStruct checkLookup_tmp = new checkLookupStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tBufferOutput_2 begin ] start
				 */

				ok_Hash.put("tBufferOutput_2", false);
				start_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				currentComponent = "tBufferOutput_2";

				int tos_count_tBufferOutput_2 = 0;

				/**
				 * [tBufferOutput_2 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_1", false);
				start_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_1";

				int tos_count_tSchemaComplianceCheck_1 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_1 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row12Struct row12) {
						// validate nullable (empty as null)
						if ((row12.variant_region_id == null)
								|| ("".equals(row12.variant_region_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row12.variant_region_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.variant_region_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"variant_region_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row12.variant_region_type == null)
								|| ("".equals(row12.variant_region_type))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row12.variant_region_type != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.variant_region_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"variant_region_type:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row12.assertion_method == null)
								|| ("".equals(row12.assertion_method))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row12.assertion_method != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.assertion_method);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"assertion_method:");
						errorMessageThrough = "";
						try {
							if (row12.assembly != null
									&& (!"".equals(row12.assembly))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.assembly);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"assembly:");
						errorMessageThrough = "";
						try {
							if (row12.chr != null && (!"".equals(row12.chr))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.chr);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"chr:");
						errorMessageThrough = "";
						try {
							if (row12.contig != null
									&& (!"".equals(row12.contig))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.contig);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"contig:");
						errorMessageThrough = "";
						try {
							if (row12.outer_start != null
									&& (!"".equals(row12.outer_start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.outer_start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"outer_start:");
						errorMessageThrough = "";
						try {
							if (row12.start != null
									&& (!"".equals(row12.start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"start:");
						errorMessageThrough = "";
						try {
							if (row12.inner_start != null
									&& (!"".equals(row12.inner_start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.inner_start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"inner_start:");
						errorMessageThrough = "";
						try {
							if (row12.inner_stop != null
									&& (!"".equals(row12.inner_stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.inner_stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"inner_stop:");
						errorMessageThrough = "";
						try {
							if (row12.stop != null && (!"".equals(row12.stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"stop:");
						errorMessageThrough = "";
						try {
							if (row12.outer_stop != null
									&& (!"".equals(row12.outer_stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.outer_stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"outer_stop:");
						errorMessageThrough = "";
						try {
							if (row12.supporting_variant_call_ids != null
									&& (!"".equals(row12.supporting_variant_call_ids))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.supporting_variant_call_ids);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"supporting_variant_call_ids:");
						errorMessageThrough = "";
						try {
							if (row12.supporting_variant_region_ids != null
									&& (!"".equals(row12.supporting_variant_region_ids))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.supporting_variant_region_ids);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"supporting_variant_region_ids:");
						errorMessageThrough = "";
						try {
							if (row12.description != null
									&& (!"".equals(row12.description))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row12.description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"description:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

				/**
				 * [tSchemaComplianceCheck_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.workdir
							+ "/tmp/temp2.tmp";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp2.tmp",
								context.encoding, "\t", "\n", true, 1, 0, -1,
								-1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row12 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row12 = new row12Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row12.variant_region_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row12.variant_region_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row12.assertion_method = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row12.assembly = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row12.chr = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row12.contig = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row12.outer_start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row12.start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row12.inner_start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row12.inner_stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row12.stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row12.outer_stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row12.supporting_variant_call_ids = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row12.supporting_variant_region_ids = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row12.description = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row12 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {
							row9 = null;

							/**
							 * [tSchemaComplianceCheck_1 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_1";

							row5 = null;
							row9 = null;
							rsvUtil_tSchemaComplianceCheck_1
									.setRowValue_0(row12);
							if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row5 = new row5Struct();
								row5.variant_region_id = row12.variant_region_id;
								row5.variant_region_type = row12.variant_region_type;
								row5.assertion_method = row12.assertion_method;
								row5.assembly = row12.assembly;
								row5.chr = row12.chr;
								row5.contig = row12.contig;
								row5.outer_start = row12.outer_start;
								row5.start = row12.start;
								row5.inner_start = row12.inner_start;
								row5.inner_stop = row12.inner_stop;
								row5.stop = row12.stop;
								row5.outer_stop = row12.outer_stop;
								row5.supporting_variant_call_ids = row12.supporting_variant_call_ids;
								row5.supporting_variant_region_ids = row12.supporting_variant_region_ids;
								row5.description = row12.description;
							}
							if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row9 = new row9Struct();
								row9.variant_region_id = row12.variant_region_id;
								row9.variant_region_type = row12.variant_region_type;
								row9.assertion_method = row12.assertion_method;
								row9.assembly = row12.assembly;
								row9.chr = row12.chr;
								row9.contig = row12.contig;
								row9.outer_start = row12.outer_start;
								row9.start = row12.start;
								row9.inner_start = row12.inner_start;
								row9.inner_stop = row12.inner_stop;
								row9.stop = row12.stop;
								row9.outer_stop = row12.outer_stop;
								row9.supporting_variant_call_ids = row12.supporting_variant_call_ids;
								row9.supporting_variant_region_ids = row12.supporting_variant_region_ids;
								row9.description = row12.description;
								row9.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
								row9.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_1.reset();

							tos_count_tSchemaComplianceCheck_1++;

							/**
							 * [tSchemaComplianceCheck_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row7HashKey.VariantRegionTypeCV = row5.variant_region_type;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7
												.getCount(row7HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.VariantRegionTypeCV = '"
									// + row7HashKey.VariantRegionTypeCV + "'");
								} // G 071

								row7Struct row7 = null;

								row7Struct fromLookup_row7 = null;
								row7 = row7Default;

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7.hasNext()) { // G
																			// 099

									fromLookup_row7 = tHash_Lookup_row7.next();

								} // G 099

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									checkLookup = null;

									if (!rejectedInnerJoin_tMap_2) {
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'checkLookup'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_2) {
										checkLookup_tmp.variant_region_id = row5.variant_region_id;
										checkLookup_tmp.variant_region_type = row5.variant_region_type;
										checkLookup_tmp.assertion_method = row5.assertion_method;
										checkLookup_tmp.assembly = row5.assembly;
										checkLookup_tmp.chr = row5.chr;
										checkLookup_tmp.contig = row5.contig;
										checkLookup_tmp.outer_start = row5.outer_start;
										checkLookup_tmp.start = row5.start;
										checkLookup_tmp.inner_start = row5.inner_start;
										checkLookup_tmp.inner_stop = row5.inner_stop;
										checkLookup_tmp.stop = row5.stop;
										checkLookup_tmp.outer_stop = row5.outer_stop;
										checkLookup_tmp.supporting_variant_call_ids = row5.supporting_variant_call_ids;
										checkLookup_tmp.supporting_variant_region_ids = row5.supporting_variant_region_ids;
										checkLookup_tmp.description = row5.description;
										checkLookup_tmp.errorMessage = "Variant region type ("
												+ row5.variant_region_type
												+ ") does not match the list!";
										checkLookup = checkLookup_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "checkLookup"
								if (checkLookup != null) {

									/**
									 * [tBufferOutput_3 main ] start
									 */

									currentComponent = "tBufferOutput_3";

									String[] row_tBufferOutput_3 = new String[] {
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", "", "", "", };
									if (checkLookup.variant_region_id != null) {

										row_tBufferOutput_3[0] = checkLookup.variant_region_id;

									} else {
										row_tBufferOutput_3[0] = null;
									}
									if (checkLookup.variant_region_type != null) {

										row_tBufferOutput_3[1] = checkLookup.variant_region_type;

									} else {
										row_tBufferOutput_3[1] = null;
									}
									if (checkLookup.assertion_method != null) {

										row_tBufferOutput_3[2] = checkLookup.assertion_method;

									} else {
										row_tBufferOutput_3[2] = null;
									}
									if (checkLookup.assembly != null) {

										row_tBufferOutput_3[3] = checkLookup.assembly;

									} else {
										row_tBufferOutput_3[3] = null;
									}
									if (checkLookup.chr != null) {

										row_tBufferOutput_3[4] = checkLookup.chr;

									} else {
										row_tBufferOutput_3[4] = null;
									}
									if (checkLookup.contig != null) {

										row_tBufferOutput_3[5] = checkLookup.contig;

									} else {
										row_tBufferOutput_3[5] = null;
									}
									if (checkLookup.outer_start != null) {

										row_tBufferOutput_3[6] = checkLookup.outer_start;

									} else {
										row_tBufferOutput_3[6] = null;
									}
									if (checkLookup.start != null) {

										row_tBufferOutput_3[7] = checkLookup.start;

									} else {
										row_tBufferOutput_3[7] = null;
									}
									if (checkLookup.inner_start != null) {

										row_tBufferOutput_3[8] = checkLookup.inner_start;

									} else {
										row_tBufferOutput_3[8] = null;
									}
									if (checkLookup.inner_stop != null) {

										row_tBufferOutput_3[9] = checkLookup.inner_stop;

									} else {
										row_tBufferOutput_3[9] = null;
									}
									if (checkLookup.stop != null) {

										row_tBufferOutput_3[10] = checkLookup.stop;

									} else {
										row_tBufferOutput_3[10] = null;
									}
									if (checkLookup.outer_stop != null) {

										row_tBufferOutput_3[11] = checkLookup.outer_stop;

									} else {
										row_tBufferOutput_3[11] = null;
									}
									if (checkLookup.supporting_variant_call_ids != null) {

										row_tBufferOutput_3[12] = checkLookup.supporting_variant_call_ids;

									} else {
										row_tBufferOutput_3[12] = null;
									}
									if (checkLookup.supporting_variant_region_ids != null) {

										row_tBufferOutput_3[13] = checkLookup.supporting_variant_region_ids;

									} else {
										row_tBufferOutput_3[13] = null;
									}
									if (checkLookup.description != null) {

										row_tBufferOutput_3[14] = checkLookup.description;

									} else {
										row_tBufferOutput_3[14] = null;
									}
									if (checkLookup.errorMessage != null) {

										row_tBufferOutput_3[15] = checkLookup.errorMessage;

									} else {
										row_tBufferOutput_3[15] = null;
									}
									globalBuffer.add(row_tBufferOutput_3);

									tos_count_tBufferOutput_3++;

									/**
									 * [tBufferOutput_3 main ] stop
									 */

								} // End of branch "checkLookup"

							} // End of branch "row5"

							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								row6.variant_region_id = row9.variant_region_id;

								row6.variant_region_type = row9.variant_region_type;

								row6.assertion_method = row9.assertion_method;

								row6.assembly = row9.assembly;

								row6.chr = row9.chr;

								row6.contig = row9.contig;

								row6.outer_start = row9.outer_start;

								row6.start = row9.start;

								row6.inner_start = row9.inner_start;

								row6.inner_stop = row9.inner_stop;

								row6.stop = row9.stop;

								row6.outer_stop = row9.outer_stop;

								row6.supporting_variant_call_ids = row9.supporting_variant_call_ids;

								row6.supporting_variant_region_ids = row9.supporting_variant_region_ids;

								row6.description = row9.description;

								row6.errorMessage = row9.errorMessage;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tBufferOutput_2 main ] start
								 */

								currentComponent = "tBufferOutput_2";

								String[] row_tBufferOutput_2 = new String[] {
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", "", "", "", };
								if (row6.variant_region_id != null) {

									row_tBufferOutput_2[0] = row6.variant_region_id;

								} else {
									row_tBufferOutput_2[0] = null;
								}
								if (row6.variant_region_type != null) {

									row_tBufferOutput_2[1] = row6.variant_region_type;

								} else {
									row_tBufferOutput_2[1] = null;
								}
								if (row6.assertion_method != null) {

									row_tBufferOutput_2[2] = row6.assertion_method;

								} else {
									row_tBufferOutput_2[2] = null;
								}
								if (row6.assembly != null) {

									row_tBufferOutput_2[3] = row6.assembly;

								} else {
									row_tBufferOutput_2[3] = null;
								}
								if (row6.chr != null) {

									row_tBufferOutput_2[4] = row6.chr;

								} else {
									row_tBufferOutput_2[4] = null;
								}
								if (row6.contig != null) {

									row_tBufferOutput_2[5] = row6.contig;

								} else {
									row_tBufferOutput_2[5] = null;
								}
								if (row6.outer_start != null) {

									row_tBufferOutput_2[6] = row6.outer_start;

								} else {
									row_tBufferOutput_2[6] = null;
								}
								if (row6.start != null) {

									row_tBufferOutput_2[7] = row6.start;

								} else {
									row_tBufferOutput_2[7] = null;
								}
								if (row6.inner_start != null) {

									row_tBufferOutput_2[8] = row6.inner_start;

								} else {
									row_tBufferOutput_2[8] = null;
								}
								if (row6.inner_stop != null) {

									row_tBufferOutput_2[9] = row6.inner_stop;

								} else {
									row_tBufferOutput_2[9] = null;
								}
								if (row6.stop != null) {

									row_tBufferOutput_2[10] = row6.stop;

								} else {
									row_tBufferOutput_2[10] = null;
								}
								if (row6.outer_stop != null) {

									row_tBufferOutput_2[11] = row6.outer_stop;

								} else {
									row_tBufferOutput_2[11] = null;
								}
								if (row6.supporting_variant_call_ids != null) {

									row_tBufferOutput_2[12] = row6.supporting_variant_call_ids;

								} else {
									row_tBufferOutput_2[12] = null;
								}
								if (row6.supporting_variant_region_ids != null) {

									row_tBufferOutput_2[13] = row6.supporting_variant_region_ids;

								} else {
									row_tBufferOutput_2[13] = null;
								}
								if (row6.description != null) {

									row_tBufferOutput_2[14] = row6.description;

								} else {
									row_tBufferOutput_2[14] = null;
								}
								if (row6.errorMessage != null) {

									row_tBufferOutput_2[15] = row6.errorMessage;

								} else {
									row_tBufferOutput_2[15] = null;
								}
								globalBuffer.add(row_tBufferOutput_2);

								tos_count_tBufferOutput_2++;

								/**
								 * [tBufferOutput_2 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "row12"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp2.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				ok_Hash.put("tSchemaComplianceCheck_1", true);
				end_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tBufferOutput_3 end ] start
				 */

				currentComponent = "tBufferOutput_3";

				ok_Hash.put("tBufferOutput_3", true);
				end_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				/**
				 * [tBufferOutput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tBufferOutput_2 end ] start
				 */

				currentComponent = "tBufferOutput_2";

				ok_Hash.put("tBufferOutput_2", true);
				end_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				/**
				 * [tBufferOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				/**
				 * [tSchemaComplianceCheck_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tBufferOutput_3 finally ] start
				 */

				currentComponent = "tBufferOutput_3";

				/**
				 * [tBufferOutput_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_2 finally ] start
				 */

				currentComponent = "tBufferOutput_2";

				/**
				 * [tBufferOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workdir + "/bad/variantRegions.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								context.encoding));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("variant_region_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("variant_region_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assertion_method");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assembly");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("contig");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2
							.write("supporting_variant_call_ids");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2
							.write("supporting_variant_region_ids");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("description");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("errorMessage");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[16];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row4.variant_region_id = row_tBufferInput_1[0];

					}

					else {
						row4.variant_region_id = null;
					}
					if (1 < row_tBufferInput_1.length) {

						row4.variant_region_type = row_tBufferInput_1[1];

					}

					else {
						row4.variant_region_type = null;
					}
					if (2 < row_tBufferInput_1.length) {

						row4.assertion_method = row_tBufferInput_1[2];

					}

					else {
						row4.assertion_method = null;
					}
					if (3 < row_tBufferInput_1.length) {

						row4.assembly = row_tBufferInput_1[3];

					}

					else {
						row4.assembly = null;
					}
					if (4 < row_tBufferInput_1.length) {

						row4.chr = row_tBufferInput_1[4];

					}

					else {
						row4.chr = null;
					}
					if (5 < row_tBufferInput_1.length) {

						row4.contig = row_tBufferInput_1[5];

					}

					else {
						row4.contig = null;
					}
					if (6 < row_tBufferInput_1.length) {

						row4.outer_start = row_tBufferInput_1[6];

					}

					else {
						row4.outer_start = null;
					}
					if (7 < row_tBufferInput_1.length) {

						row4.start = row_tBufferInput_1[7];

					}

					else {
						row4.start = null;
					}
					if (8 < row_tBufferInput_1.length) {

						row4.inner_start = row_tBufferInput_1[8];

					}

					else {
						row4.inner_start = null;
					}
					if (9 < row_tBufferInput_1.length) {

						row4.inner_stop = row_tBufferInput_1[9];

					}

					else {
						row4.inner_stop = null;
					}
					if (10 < row_tBufferInput_1.length) {

						row4.stop = row_tBufferInput_1[10];

					}

					else {
						row4.stop = null;
					}
					if (11 < row_tBufferInput_1.length) {

						row4.outer_stop = row_tBufferInput_1[11];

					}

					else {
						row4.outer_stop = null;
					}
					if (12 < row_tBufferInput_1.length) {

						row4.supporting_variant_call_ids = row_tBufferInput_1[12];

					}

					else {
						row4.supporting_variant_call_ids = null;
					}
					if (13 < row_tBufferInput_1.length) {

						row4.supporting_variant_region_ids = row_tBufferInput_1[13];

					}

					else {
						row4.supporting_variant_region_ids = null;
					}
					if (14 < row_tBufferInput_1.length) {

						row4.description = row_tBufferInput_1[14];

					}

					else {
						row4.description = null;
					}
					if (15 < row_tBufferInput_1.length) {

						row4.errorMessage = row_tBufferInput_1[15];

					}

					else {
						row4.errorMessage = null;
					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row4.variant_region_id != null) {
						sb_tFileOutputDelimited_2
								.append(row4.variant_region_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.variant_region_type != null) {
						sb_tFileOutputDelimited_2
								.append(row4.variant_region_type);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.assertion_method != null) {
						sb_tFileOutputDelimited_2.append(row4.assertion_method);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.assembly != null) {
						sb_tFileOutputDelimited_2.append(row4.assembly);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.chr != null) {
						sb_tFileOutputDelimited_2.append(row4.chr);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.contig != null) {
						sb_tFileOutputDelimited_2.append(row4.contig);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.outer_start != null) {
						sb_tFileOutputDelimited_2.append(row4.outer_start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.start != null) {
						sb_tFileOutputDelimited_2.append(row4.start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.inner_start != null) {
						sb_tFileOutputDelimited_2.append(row4.inner_start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.inner_stop != null) {
						sb_tFileOutputDelimited_2.append(row4.inner_stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.stop != null) {
						sb_tFileOutputDelimited_2.append(row4.stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.outer_stop != null) {
						sb_tFileOutputDelimited_2.append(row4.outer_stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.supporting_variant_call_ids != null) {
						sb_tFileOutputDelimited_2
								.append(row4.supporting_variant_call_ids);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.supporting_variant_region_ids != null) {
						sb_tFileOutputDelimited_2
								.append(row4.supporting_variant_region_ids);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.description != null) {
						sb_tFileOutputDelimited_2.append(row4.description);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.errorMessage != null) {
						sb_tFileOutputDelimited_2.append(row4.errorMessage);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.VariantRegionTypeCV == null) ? 0
								: this.VariantRegionTypeCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.VariantRegionTypeCV == null) {
				if (other.VariantRegionTypeCV != null)
					return false;

			} else if (!this.VariantRegionTypeCV
					.equals(other.VariantRegionTypeCV))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.VariantRegionTypeCV = this.VariantRegionTypeCV;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.VariantRegionTypeCV = this.VariantRegionTypeCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.VariantRegionTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantRegionTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VariantRegionTypeCV,
					other.VariantRegionTypeCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.VariantRegionTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantRegionTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.VariantRegionTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantRegionTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantRegions = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantRegions.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantRegions.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantRegions = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantRegions,
						0, length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantRegions, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantRegions) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				row2Struct row2 = new row2Struct();
				row10Struct row10 = new row10Struct();

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tUnite_1 - inputs:(row17,row10)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 -
				// inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row5,row7)
				// outputs:(checkLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row17Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row17Struct>();
				row17 = new row17Struct();
				row17.VariantRegionTypeCV = "";
				cacheList_tFixedFlowInput_1.add(row17);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row17Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row17 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row7 = new row7Struct();

						row7.VariantRegionTypeCV = row17.VariantRegionTypeCV;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.VariantRegionTypeCV = row7.VariantRegionTypeCV;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.AnalysisTypeCV = null;

								row2.CollectionCV = null;

								row2.ContactRoleCV = null;

								row2.LinkDbCV = null;

								row2.MethodTypeCV = null;

								row2.OriginCV = null;

								row2.RecipientStatusCV = null;

								row2.ReferenceTypeCV = null;

								row2.SamplesetTypeCV = null;

								row2.SexCV = null;

								row2.StrandTypeCV = null;

								row2.StudyTypeCV = null;

								row2.SubjectAgeUnitsCV = null;

								row2.VariantCallTypeCV = null;

								row2.VariantCallZygosityCV = null;

								row2.VariantRegionTypeCV = null;

								row2.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.AnalysisTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.CollectionCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ContactRoleCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.LinkDbCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.MethodTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.OriginCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.RecipientStatusCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ReferenceTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SamplesetTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SexCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StrandTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StudyTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SubjectAgeUnitsCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallZygosityCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantRegionTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BooleanCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterColumns_2 main ] start
							 */

							currentComponent = "tFilterColumns_2";

							row10.VariantRegionTypeCV = row2.VariantRegionTypeCV;

							nb_line_tFilterColumns_2++;

							tos_count_tFilterColumns_2++;

							/**
							 * [tFilterColumns_2 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row7 = new row7Struct();

							row7.VariantRegionTypeCV = row10.VariantRegionTypeCV;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.VariantRegionTypeCV = row7.VariantRegionTypeCV;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final checkVariantRegions checkVariantRegionsClass = new checkVariantRegions();

		int exitCode = checkVariantRegionsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer
				.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = checkVariantRegions.class
					.getClassLoader().getResourceAsStream(
							"checkgnpcnv/checkvariantregions_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.csvDir = (String) context.getProperty("csvDir");
			context.encoding = (String) context.getProperty("encoding");
			context.excelFileIn = (String) context.getProperty("excelFileIn");
			context.properties = (String) context.getProperty("properties");
			context.workdir = (String) context.getProperty("workdir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("csvDir")) {
				context.csvDir = (String) parentContextMap.get("csvDir");
			}
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("excelFileIn")) {
				context.excelFileIn = (String) parentContextMap
						.get("excelFileIn");
			}
			if (parentContextMap.containsKey("properties")) {
				context.properties = (String) parentContextMap
						.get("properties");
			}
			if (parentContextMap.containsKey("workdir")) {
				context.workdir = (String) parentContextMap.get("workdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : checkVariantRegions");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 250356 characters generated by Talend Open Studio for Data Integration on the
 * 25 août 2017 11:49:27 CEST
 ************************************************************************************************/
