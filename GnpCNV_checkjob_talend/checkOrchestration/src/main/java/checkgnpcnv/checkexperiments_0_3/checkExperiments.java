// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package checkgnpcnv.checkexperiments_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: checkExperiments Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class checkExperiments implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (excelFileIn != null) {

				this.setProperty("excelFileIn", excelFileIn.toString());

			}

			if (properties != null) {

				this.setProperty("properties", properties.toString());

			}

			if (tab != null) {

				this.setProperty("tab", tab.toString());

			}

			if (workdir != null) {

				this.setProperty("workdir", workdir.toString());

			}

		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String excelFileIn;

		public String getExcelFileIn() {
			return this.excelFileIn;
		}

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		public String tab;

		public String getTab() {
			return this.tab;
		}

		public String workdir;

		public String getWorkdir() {
			return this.workdir;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.3";
	private final String jobName = "checkExperiments";
	private final String projectName = "CHECKGNPCNV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					checkExperiments.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(checkExperiments.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnpivotRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row12_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("* " + jobName);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputExcel_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"US-ASCII"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("experiment_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("method_type");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("experiment_resolution");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("method_platform");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("method_description");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("merged_experiment_ids");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("external_links");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("site");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("library_abbrev");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("library_link");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sequencing_center");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("hardware_type");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				Object source_tFileInputExcel_1 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof java.io.InputStream
						|| source_tFileInputExcel_1 instanceof String) {
					excelReader_tFileInputExcel_1 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_1.addSheetName("EXPERIMENTS",
							false);
					int start_column_tFileInputExcel_1 = 1 - 1;
					int end_column_tFileInputExcel_1 = 20 - 1;
					if (start_column_tFileInputExcel_1 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_1 = start_column_tFileInputExcel_1 + 12 - 1;

					} else if (end_column_tFileInputExcel_1 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 - 12 + 1;
					}

					if (end_column_tFileInputExcel_1 < 0
							|| start_column_tFileInputExcel_1 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1;

					int header_tFileInputExcel_1 = 3;
					int limit_tFileInputExcel_1 = 50;

					int nb_line_tFileInputExcel_1 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_1 instanceof String) {
						excelReader_tFileInputExcel_1.parse(
								(String) source_tFileInputExcel_1, "UTF-8");
					} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_1.parse(
								(java.io.InputStream) source_tFileInputExcel_1,
								"UTF-8");
					}

					while ((header_tFileInputExcel_1--) > 0
							&& excelReader_tFileInputExcel_1.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_1.next();
					}

					while (excelReader_tFileInputExcel_1.hasNext()) {
						int emptyColumnCount_tFileInputExcel_1 = 0;

						if (limit_tFileInputExcel_1 != -1
								&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
							excelReader_tFileInputExcel_1.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_1 = excelReader_tFileInputExcel_1
								.next();
						row7 = null;
						row3 = null;
						int tempRowLength_tFileInputExcel_1 = 12;

						int columnIndex_tFileInputExcel_1 = 0;

						String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];

						for (int i_tFileInputExcel_1 = 0; i_tFileInputExcel_1 < tempRowLength_tFileInputExcel_1; i_tFileInputExcel_1++) {
							int current_tFileInputExcel_1 = i_tFileInputExcel_1
									+ start_column_tFileInputExcel_1;
							if (current_tFileInputExcel_1 <= actual_end_column_tFileInputExcel_1) {
								if (current_tFileInputExcel_1 < row_tFileInputExcel_1
										.size()) {
									String column_tFileInputExcel_1 = row_tFileInputExcel_1
											.get(current_tFileInputExcel_1);
									if (column_tFileInputExcel_1 != null) {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = column_tFileInputExcel_1;
									} else {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
									}
								} else {
									temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
								}
							} else {
								temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_1 = false;
						row7 = new row7Struct();
						int curColNum_tFileInputExcel_1 = -1;
						String curColName_tFileInputExcel_1 = "";

						try {
							columnIndex_tFileInputExcel_1 = 0;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "experiment_id";

								row7.experiment_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.experiment_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 1;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "method_type";

								row7.method_type = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.method_type = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 2;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "experiment_resolution";

								row7.experiment_resolution = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.experiment_resolution = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 3;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "method_platform";

								row7.method_platform = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.method_platform = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 4;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "method_description";

								row7.method_description = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.method_description = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 5;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "merged_experiment_ids";

								row7.merged_experiment_ids = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.merged_experiment_ids = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 6;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "external_links";

								row7.external_links = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.external_links = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 7;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "site";

								row7.site = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.site = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 8;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "library_abbrev";

								row7.library_abbrev = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.library_abbrev = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 9;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "library_link";

								row7.library_link = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.library_link = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 10;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "sequencing_center";

								row7.sequencing_center = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.sequencing_center = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 11;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "hardware_type";

								row7.hardware_type = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row7.hardware_type = null;
								emptyColumnCount_tFileInputExcel_1++;
							}

							nb_line_tFileInputExcel_1++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_1 = true;
							row3 = new row3Struct();
							row3.experiment_id = row7.experiment_id;
							row3.method_type = row7.method_type;
							row3.experiment_resolution = row7.experiment_resolution;
							row3.method_platform = row7.method_platform;
							row3.method_description = row7.method_description;
							row3.merged_experiment_ids = row7.merged_experiment_ids;
							row3.external_links = row7.external_links;
							row3.site = row7.site;
							row3.library_abbrev = row7.library_abbrev;
							row3.library_link = row7.library_link;
							row3.sequencing_center = row7.sequencing_center;
							row3.hardware_type = row7.hardware_type;
							row3.errorMessage = e.getMessage() + " - Line: "
									+ tos_count_tFileInputExcel_1 + " column: "
									+ curColName_tFileInputExcel_1 + " (No. "
									+ curColNum_tFileInputExcel_1 + ")";
							row7 = null;
						}

						/**
						 * [tFileInputExcel_1 begin ] stop
						 */

						/**
						 * [tFileInputExcel_1 main ] start
						 */

						currentComponent = "tFileInputExcel_1";

						tos_count_tFileInputExcel_1++;

						/**
						 * [tFileInputExcel_1 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row7.experiment_id != null) {
								sb_tFileOutputDelimited_1
										.append(row7.experiment_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.method_type != null) {
								sb_tFileOutputDelimited_1
										.append(row7.method_type);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.experiment_resolution != null) {
								sb_tFileOutputDelimited_1
										.append(row7.experiment_resolution);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.method_platform != null) {
								sb_tFileOutputDelimited_1
										.append(row7.method_platform);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.method_description != null) {
								sb_tFileOutputDelimited_1
										.append(row7.method_description);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.merged_experiment_ids != null) {
								sb_tFileOutputDelimited_1
										.append(row7.merged_experiment_ids);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.external_links != null) {
								sb_tFileOutputDelimited_1
										.append(row7.external_links);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.site != null) {
								sb_tFileOutputDelimited_1.append(row7.site);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.library_abbrev != null) {
								sb_tFileOutputDelimited_1
										.append(row7.library_abbrev);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.library_link != null) {
								sb_tFileOutputDelimited_1
										.append(row7.library_link);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.sequencing_center != null) {
								sb_tFileOutputDelimited_1
										.append(row7.sequencing_center);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row7.hardware_type != null) {
								sb_tFileOutputDelimited_1
										.append(row7.hardware_type);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "row7"

						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tDie_1 main ] start
							 */

							currentComponent = "tDie_1";

							globalMap.put("tDie_1_DIE_PRIORITY", 5);
							System.err
									.println("Experiments sheet badly formated.");

							globalMap.put("tDie_1_DIE_MESSAGE",
									"Experiments sheet badly formated.");
							globalMap.put("tDie_1_DIE_MESSAGES",
									"Experiments sheet badly formated.");
							currentComponent = "tDie_1";
							status = "failure";
							errorCode = new Integer(1);
							globalMap.put("tDie_1_DIE_CODE", errorCode);

							if (true) {
								throw new TDieException();
							}

							tos_count_tDie_1++;

							/**
							 * [tDie_1 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputExcel_1 end ] start
						 */

						currentComponent = "tFileInputExcel_1";

					}

					try {
						if (excelReader_tFileInputExcel_1 != null) {
							excelReader_tFileInputExcel_1.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_1) {
						if (!(e_tFileInputExcel_1.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_1.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_1_NB_LINE",
							nb_line_tFileInputExcel_1);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tFileInputFullRow_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileRowCount_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				row24Struct row24 = new row24Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_6, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_6",
						outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_6",
						isFileGenerated_tFileOutputDelimited_6);
				resourceMap.put("filetFileOutputDelimited_6",
						filetFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_2 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_2", false);
				start_Hash.put("tFileInputFullRow_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_2";

				int tos_count_tFileInputFullRow_2 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_2 = null;

				try {// }
					fid_tFileInputFullRow_2 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_2.nextRecord()) {// }
						row23 = null;
						boolean whetherReject_tFileInputFullRow_2 = false;
						row23 = new row23Struct();
						row23.line = fid_tFileInputFullRow_2.get(0);

						/**
						 * [tFileInputFullRow_2 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_2 main ] start
						 */

						currentComponent = "tFileInputFullRow_2";

						tos_count_tFileInputFullRow_2++;

						/**
						 * [tFileInputFullRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						row24 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
								"&&");
						ope_tFilterRow_2.matches(
								(!row23.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row24 == null) {
								row24 = new row24Struct();
							}
							row24.line = row23.line;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */
						// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
							if (row24.line != null) {
								sb_tFileOutputDelimited_6.append(row24.line);
							}
							sb_tFileOutputDelimited_6
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6",
									nb_line_tFileOutputDelimited_6);

							outtFileOutputDelimited_6
									.write(sb_tFileOutputDelimited_6.toString());

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputFullRow_2 end ] start
						 */

						currentComponent = "tFileInputFullRow_2";

					}
				} finally {
					if (fid_tFileInputFullRow_2 != null) {
						fid_tFileInputFullRow_2.close();
					}
				}
				globalMap.put("tFileInputFullRow_2_NB_LINE",
						fid_tFileInputFullRow_2.getRowNumber());

				ok_Hash.put("tFileInputFullRow_2", true);
				end_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				if (isFileGenerated_tFileOutputDelimited_6
						&& nb_line_tFileOutputDelimited_6 == 0) {

					filetFileOutputDelimited_6.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_2 finally ] start
				 */

				currentComponent = "tFileInputFullRow_2";

				/**
				 * [tFileInputFullRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_6")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_6"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_6")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_2_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.workdir + "/tmp/temp2.tmp";
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp")),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) > 1) {

					tFileInputDelimited_1Process(globalMap);
				}

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) <= 1) {

					tFixedFlowInput_1Process(globalMap);
				}

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOftoMetaDataFileStruct implements
			routines.system.IPersistableRow<copyOfcopyOftoMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String MIMARKS__seq_meth;

		public String getMIMARKS__seq_meth() {
			return this.MIMARKS__seq_meth;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.MIMARKS__seq_meth = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MIMARKS__seq_meth, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MIMARKS__seq_meth=" + MIMARKS__seq_meth);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOftoMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcheckLookupStruct implements
			routines.system.IPersistableRow<copyOfcopyOfcheckLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcheckLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcheckLookupStruct implements
			routines.system.IPersistableRow<copyOfcheckLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcheckLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOftoMetaDataFileStruct implements
			routines.system.IPersistableRow<copyOftoMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOftoMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFixedFlowInput_2Process(globalMap);
				tFixedFlowInput_3Process(globalMap);

				row1Struct row1 = new row1Struct();
				row5Struct row5 = new row5Struct();
				row2Struct row2 = new row2Struct();
				copyOfcheckLookupStruct copyOfcheckLookup = new copyOfcheckLookupStruct();
				copyOftoMetaDataFileStruct copyOftoMetaDataFile = new copyOftoMetaDataFileStruct();
				copyOfcopyOftoMetaDataFileStruct copyOfcopyOftoMetaDataFile = new copyOfcopyOftoMetaDataFileStruct();
				row15Struct row15 = new row15Struct();
				copyOfcopyOfcheckLookupStruct copyOfcopyOfcheckLookup = new copyOfcopyOfcheckLookupStruct();
				row9Struct row9 = new row9Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tBufferOutput_3 begin ] start
				 */

				ok_Hash.put("tBufferOutput_3", false);
				start_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				currentComponent = "tBufferOutput_3";

				int tos_count_tBufferOutput_3 = 0;

				/**
				 * [tBufferOutput_3 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.workdir + "/metadata.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					isFileGenerated_tFileOutputDelimited_3 = false;
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, true),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tUnpivotRow_1 begin ] start
				 */

				ok_Hash.put("tUnpivotRow_1", false);
				start_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				currentComponent = "tUnpivotRow_1";

				int tos_count_tUnpivotRow_1 = 0;

				/**
				 * [tUnpivotRow_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOftoMetaDataFileStruct copyOfcopyOftoMetaDataFile_tmp = new copyOfcopyOftoMetaDataFileStruct();
				copyOfcopyOfcheckLookupStruct copyOfcopyOfcheckLookup_tmp = new copyOfcopyOfcheckLookupStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) globalMap
						.get("tHash_Lookup_row12"));

				row12Struct row12HashKey = new row12Struct();
				row12Struct row12Default = new row12Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcheckLookupStruct copyOfcheckLookup_tmp = new copyOfcheckLookupStruct();
				copyOftoMetaDataFileStruct copyOftoMetaDataFile_tmp = new copyOftoMetaDataFileStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_2 begin ] start
				 */

				ok_Hash.put("tBufferOutput_2", false);
				start_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				currentComponent = "tBufferOutput_2";

				int tos_count_tBufferOutput_2 = 0;

				/**
				 * [tBufferOutput_2 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_1", false);
				start_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_1";

				int tos_count_tSchemaComplianceCheck_1 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_1 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row1Struct row1) {
						// validate nullable (empty as null)
						if ((row1.experiment_id == null)
								|| ("".equals(row1.experiment_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.experiment_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.experiment_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.experiment_id != null) {
							if (row1.experiment_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"experiment_id:");
						errorMessageThrough = "";
						try {
							if (row1.method_type != null
									&& (!"".equals(row1.method_type))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.method_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.method_type != null
								&& (!"".equals(row1.method_type))) {
							if (row1.method_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"method_type:");
						errorMessageThrough = "";
						try {
							if (row1.experiment_resolution != null
									&& (!"".equals(row1.experiment_resolution))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.experiment_resolution);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.experiment_resolution != null
								&& (!"".equals(row1.experiment_resolution))) {
							if (row1.experiment_resolution.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"experiment_resolution:");
						errorMessageThrough = "";
						try {
							if (row1.method_platform != null
									&& (!"".equals(row1.method_platform))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.method_platform);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.method_platform != null
								&& (!"".equals(row1.method_platform))) {
							if (row1.method_platform.length() > 200) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"method_platform:");
						errorMessageThrough = "";
						try {
							if (row1.method_description != null
									&& (!"".equals(row1.method_description))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.method_description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.method_description != null
								&& (!"".equals(row1.method_description))) {
							if (row1.method_description.length() > 1000) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"method_description:");
						errorMessageThrough = "";
						try {
							if (row1.merged_experiment_ids != null
									&& (!"".equals(row1.merged_experiment_ids))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.merged_experiment_ids);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.merged_experiment_ids != null
								&& (!"".equals(row1.merged_experiment_ids))) {
							if (row1.merged_experiment_ids.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"merged_experiment_ids:");
						errorMessageThrough = "";
						try {
							if (row1.external_links != null
									&& (!"".equals(row1.external_links))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.external_links);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.external_links != null
								&& (!"".equals(row1.external_links))) {
							if (row1.external_links.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"external_links:");
						errorMessageThrough = "";
						try {
							if (row1.site != null && (!"".equals(row1.site))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.site);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.site != null && (!"".equals(row1.site))) {
							if (row1.site.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"site:");
						errorMessageThrough = "";
						try {
							if (row1.library_abbrev != null
									&& (!"".equals(row1.library_abbrev))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.library_abbrev);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.library_abbrev != null
								&& (!"".equals(row1.library_abbrev))) {
							if (row1.library_abbrev.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"library_abbrev:");
						errorMessageThrough = "";
						try {
							if (row1.library_link != null
									&& (!"".equals(row1.library_link))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.library_link);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.library_link != null
								&& (!"".equals(row1.library_link))) {
							if (row1.library_link.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"library_link:");
						errorMessageThrough = "";
						try {
							if (row1.sequencing_center != null
									&& (!"".equals(row1.sequencing_center))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sequencing_center);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sequencing_center != null
								&& (!"".equals(row1.sequencing_center))) {
							if (row1.sequencing_center.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sequencing_center:");
						errorMessageThrough = "";
						try {
							if (row1.hardware_type != null
									&& (!"".equals(row1.hardware_type))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.hardware_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.hardware_type != null
								&& (!"".equals(row1.hardware_type))) {
							if (row1.hardware_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"hardware_type:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

				/**
				 * [tSchemaComplianceCheck_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.workdir
							+ "/tmp/temp2.tmp";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp2.tmp", "US-ASCII",
								"\t", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.experiment_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.method_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row1.experiment_resolution = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.method_platform = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.method_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.merged_experiment_ids = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row1.external_links = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row1.site = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.library_abbrev = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row1.library_link = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.sequencing_center = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.hardware_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {
							row9 = null;

							/**
							 * [tSchemaComplianceCheck_1 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_1";

							row5 = null;
							row9 = null;
							rsvUtil_tSchemaComplianceCheck_1
									.setRowValue_0(row1);
							if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row5 = new row5Struct();
								row5.experiment_id = row1.experiment_id;
								row5.method_type = row1.method_type;
								row5.experiment_resolution = row1.experiment_resolution;
								row5.method_platform = row1.method_platform;
								row5.method_description = row1.method_description;
								row5.merged_experiment_ids = row1.merged_experiment_ids;
								row5.external_links = row1.external_links;
								row5.site = row1.site;
								row5.library_abbrev = row1.library_abbrev;
								row5.library_link = row1.library_link;
								row5.sequencing_center = row1.sequencing_center;
								row5.hardware_type = row1.hardware_type;
							}
							if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row9 = new row9Struct();
								row9.experiment_id = row1.experiment_id;
								row9.method_type = row1.method_type;
								row9.experiment_resolution = row1.experiment_resolution;
								row9.method_platform = row1.method_platform;
								row9.method_description = row1.method_description;
								row9.merged_experiment_ids = row1.merged_experiment_ids;
								row9.external_links = row1.external_links;
								row9.site = row1.site;
								row9.library_abbrev = row1.library_abbrev;
								row9.library_link = row1.library_link;
								row9.sequencing_center = row1.sequencing_center;
								row9.hardware_type = row1.hardware_type;
								row9.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
								row9.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_1.reset();

							tos_count_tSchemaComplianceCheck_1++;

							/**
							 * [tSchemaComplianceCheck_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								// Code généré selon le schémas d'entrée et de
								// sortie
								row2.experiment_id = row5.experiment_id;
								if (row5.method_type == null) {
									row2.method_type = "";
								} else {
									row2.method_type = row5.method_type;
								}
								row2.experiment_resolution = row5.experiment_resolution;
								row2.method_platform = row5.method_platform;
								row2.method_description = row5.method_description;
								row2.merged_experiment_ids = row5.merged_experiment_ids;
								row2.external_links = row5.external_links;
								row2.site = row5.site;
								row2.library_abbrev = row5.library_abbrev;
								row2.library_link = row5.library_link;
								row2.sequencing_center = row5.sequencing_center;
								row2.hardware_type = row5.hardware_type;

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row12"
								// /////////////////////////////////////////////

								boolean forceLooprow12 = false;

								row12Struct row12ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row12HashKey.MethodTypeCV = row2.method_type;

									row12HashKey.hashCodeDirty = true;

									tHash_Lookup_row12.lookup(row12HashKey);

									if (!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row12 != null
										&& tHash_Lookup_row12
												.getCount(row12HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row12' and it contains more one result from keys :  row12.MethodTypeCV = '"
									// + row12HashKey.MethodTypeCV + "'");
								} // G 071

								row12Struct row12 = null;

								row12Struct fromLookup_row12 = null;
								row12 = row12Default;

								if (tHash_Lookup_row12 != null
										&& tHash_Lookup_row12.hasNext()) { // G
																			// 099

									fromLookup_row12 = tHash_Lookup_row12
											.next();

								} // G 099

								if (fromLookup_row12 != null) {
									row12 = fromLookup_row12;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									copyOftoMetaDataFile = null;
									copyOfcheckLookup = null;

									if (!rejectedInnerJoin_tMap_1) {

										// # Output table :
										// 'copyOftoMetaDataFile'
										copyOftoMetaDataFile_tmp.experiment_id = row2.experiment_id;
										copyOftoMetaDataFile_tmp.method_type = row2.method_type;
										copyOftoMetaDataFile_tmp.experiment_resolution = row2.experiment_resolution;
										copyOftoMetaDataFile_tmp.method_platform = row2.method_platform;
										copyOftoMetaDataFile_tmp.method_description = row2.method_description;
										copyOftoMetaDataFile_tmp.merged_experiment_ids = row2.merged_experiment_ids;
										copyOftoMetaDataFile_tmp.external_links = row2.external_links;
										copyOftoMetaDataFile_tmp.site = row2.site;
										copyOftoMetaDataFile_tmp.library_abbrev = row2.library_abbrev;
										copyOftoMetaDataFile_tmp.library_link = row2.library_link;
										copyOftoMetaDataFile_tmp.sequencing_center = row2.sequencing_center;
										copyOftoMetaDataFile_tmp.hardware_type = row2.hardware_type;
										copyOftoMetaDataFile = copyOftoMetaDataFile_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table :
									// 'copyOfcheckLookup'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_1) {
										copyOfcheckLookup_tmp.experiment_id = row2.experiment_id;
										copyOfcheckLookup_tmp.method_type = row2.method_type;
										copyOfcheckLookup_tmp.experiment_resolution = row2.experiment_resolution;
										copyOfcheckLookup_tmp.method_platform = row2.method_platform;
										copyOfcheckLookup_tmp.method_description = row2.method_description;
										copyOfcheckLookup_tmp.merged_experiment_ids = row2.merged_experiment_ids;
										copyOfcheckLookup_tmp.external_links = row2.external_links;
										copyOfcheckLookup_tmp.site = row2.site;
										copyOfcheckLookup_tmp.library_abbrev = row2.library_abbrev;
										copyOfcheckLookup_tmp.library_link = row2.library_link;
										copyOfcheckLookup_tmp.sequencing_center = row2.sequencing_center;
										copyOfcheckLookup_tmp.hardware_type = row2.hardware_type;
										copyOfcheckLookup_tmp.errorMessage = "Method type ("
												+ row2.method_type
												+ ") does not match the list!";
										copyOfcheckLookup = copyOfcheckLookup_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */
								// Start of branch "copyOfcheckLookup"
								if (copyOfcheckLookup != null) {

									/**
									 * [tBufferOutput_3 main ] start
									 */

									currentComponent = "tBufferOutput_3";

									String[] row_tBufferOutput_3 = new String[] {
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", };
									if (copyOfcheckLookup.experiment_id != null) {

										row_tBufferOutput_3[0] = copyOfcheckLookup.experiment_id;

									} else {
										row_tBufferOutput_3[0] = null;
									}
									if (copyOfcheckLookup.method_type != null) {

										row_tBufferOutput_3[1] = copyOfcheckLookup.method_type;

									} else {
										row_tBufferOutput_3[1] = null;
									}
									if (copyOfcheckLookup.experiment_resolution != null) {

										row_tBufferOutput_3[2] = copyOfcheckLookup.experiment_resolution;

									} else {
										row_tBufferOutput_3[2] = null;
									}
									if (copyOfcheckLookup.method_platform != null) {

										row_tBufferOutput_3[3] = copyOfcheckLookup.method_platform;

									} else {
										row_tBufferOutput_3[3] = null;
									}
									if (copyOfcheckLookup.method_description != null) {

										row_tBufferOutput_3[4] = copyOfcheckLookup.method_description;

									} else {
										row_tBufferOutput_3[4] = null;
									}
									if (copyOfcheckLookup.merged_experiment_ids != null) {

										row_tBufferOutput_3[5] = copyOfcheckLookup.merged_experiment_ids;

									} else {
										row_tBufferOutput_3[5] = null;
									}
									if (copyOfcheckLookup.external_links != null) {

										row_tBufferOutput_3[6] = copyOfcheckLookup.external_links;

									} else {
										row_tBufferOutput_3[6] = null;
									}
									if (copyOfcheckLookup.site != null) {

										row_tBufferOutput_3[7] = copyOfcheckLookup.site;

									} else {
										row_tBufferOutput_3[7] = null;
									}
									if (copyOfcheckLookup.library_abbrev != null) {

										row_tBufferOutput_3[8] = copyOfcheckLookup.library_abbrev;

									} else {
										row_tBufferOutput_3[8] = null;
									}
									if (copyOfcheckLookup.library_link != null) {

										row_tBufferOutput_3[9] = copyOfcheckLookup.library_link;

									} else {
										row_tBufferOutput_3[9] = null;
									}
									if (copyOfcheckLookup.sequencing_center != null) {

										row_tBufferOutput_3[10] = copyOfcheckLookup.sequencing_center;

									} else {
										row_tBufferOutput_3[10] = null;
									}
									if (copyOfcheckLookup.hardware_type != null) {

										row_tBufferOutput_3[11] = copyOfcheckLookup.hardware_type;

									} else {
										row_tBufferOutput_3[11] = null;
									}
									if (copyOfcheckLookup.errorMessage != null) {

										row_tBufferOutput_3[12] = copyOfcheckLookup.errorMessage;

									} else {
										row_tBufferOutput_3[12] = null;
									}
									globalBuffer.add(row_tBufferOutput_3);

									tos_count_tBufferOutput_3++;

									/**
									 * [tBufferOutput_3 main ] stop
									 */

								} // End of branch "copyOfcheckLookup"

								// Start of branch "copyOftoMetaDataFile"
								if (copyOftoMetaDataFile != null) {

									/**
									 * [tMap_2 main ] start
									 */

									currentComponent = "tMap_2";

									boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_2 = false;
									boolean mainRowRejected_tMap_2 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row16"
									// /////////////////////////////////////////////

									boolean forceLooprow16 = false;

									row16Struct row16ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_2 = false;

										row16HashKey.HardwareType = copyOftoMetaDataFile.hardware_type;

										row16HashKey.hashCodeDirty = true;

										tHash_Lookup_row16.lookup(row16HashKey);

										if (!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_2 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row16 != null
											&& tHash_Lookup_row16
													.getCount(row16HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.HardwareType = '"
										// + row16HashKey.HardwareType + "'");
									} // G 071

									row16Struct row16 = null;

									row16Struct fromLookup_row16 = null;
									row16 = row16Default;

									if (tHash_Lookup_row16 != null
											&& tHash_Lookup_row16.hasNext()) { // G
																				// 099

										fromLookup_row16 = tHash_Lookup_row16
												.next();

									} // G 099

									if (fromLookup_row16 != null) {
										row16 = fromLookup_row16;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
										// ###############################
										// # Output tables

										copyOfcopyOftoMetaDataFile = null;
										copyOfcopyOfcheckLookup = null;

										if (!rejectedInnerJoin_tMap_2) {

											// # Output table :
											// 'copyOfcopyOftoMetaDataFile'
											// # Filter conditions
											if (

											!org.apache.commons.lang.StringUtils
													.isBlank(row2.method_type)

											) {
												copyOfcopyOftoMetaDataFile_tmp.MIMARKS__seq_meth = copyOftoMetaDataFile.method_type;
												copyOfcopyOftoMetaDataFile = copyOfcopyOftoMetaDataFile_tmp;
											} // closing filter/reject
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table :
										// 'copyOfcopyOfcheckLookup'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_2) {
											copyOfcopyOfcheckLookup_tmp.experiment_id = copyOftoMetaDataFile.experiment_id;
											copyOfcopyOfcheckLookup_tmp.method_type = copyOftoMetaDataFile.method_type;
											copyOfcopyOfcheckLookup_tmp.experiment_resolution = copyOftoMetaDataFile.experiment_resolution;
											copyOfcopyOfcheckLookup_tmp.method_platform = copyOftoMetaDataFile.method_platform;
											copyOfcopyOfcheckLookup_tmp.method_description = copyOftoMetaDataFile.method_description;
											copyOfcopyOfcheckLookup_tmp.merged_experiment_ids = copyOftoMetaDataFile.merged_experiment_ids;
											copyOfcopyOfcheckLookup_tmp.external_links = copyOftoMetaDataFile.external_links;
											copyOfcopyOfcheckLookup_tmp.site = copyOftoMetaDataFile.site;
											copyOfcopyOfcheckLookup_tmp.library_abbrev = copyOftoMetaDataFile.library_abbrev;
											copyOfcopyOfcheckLookup_tmp.library_link = copyOftoMetaDataFile.library_link;
											copyOfcopyOfcheckLookup_tmp.sequencing_center = copyOftoMetaDataFile.sequencing_center;
											copyOfcopyOfcheckLookup_tmp.hardware_type = copyOftoMetaDataFile.hardware_type;
											copyOfcopyOfcheckLookup_tmp.errorMessage = "Hardware type ("
													+ copyOftoMetaDataFile.hardware_type
													+ ") does not match the list!";
											copyOfcopyOfcheckLookup = copyOfcopyOfcheckLookup_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_2 = false;

									tos_count_tMap_2++;

									/**
									 * [tMap_2 main ] stop
									 */
									// Start of branch
									// "copyOfcopyOftoMetaDataFile"
									if (copyOfcopyOftoMetaDataFile != null) {

										/**
										 * [tUnpivotRow_1 main ] start
										 */

										currentComponent = "tUnpivotRow_1";

										/*
										 * &copy; British Telecommunications
										 * plc, 2009, All Rights Reserved.
										 * Licensed for general use under the
										 * terms of GPL v2.
										 */
										String[] pivotKeysArray = { "MIMARKS__seq_meth" };

										for (String field : pivotKeysArray) {

											row15.pivot_key = field;
											try {
												row15.pivot_value = copyOfcopyOftoMetaDataFile
														.getClass()
														.getDeclaredField(field)
														.get(copyOfcopyOftoMetaDataFile)
														.toString();
											} catch (Exception e) {
												row15.pivot_value = null;
											}

											tos_count_tUnpivotRow_1++;

											/**
											 * [tUnpivotRow_1 main ] stop
											 */

											/**
											 * [tFileOutputDelimited_3 main ]
											 * start
											 */

											currentComponent = "tFileOutputDelimited_3";

											StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
											if (row15.pivot_key != null) {
												sb_tFileOutputDelimited_3
														.append(row15.pivot_key);
											}
											sb_tFileOutputDelimited_3
													.append(OUT_DELIM_tFileOutputDelimited_3);
											if (row15.pivot_value != null) {
												sb_tFileOutputDelimited_3
														.append(row15.pivot_value);
											}
											sb_tFileOutputDelimited_3
													.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

											nb_line_tFileOutputDelimited_3++;
											resourceMap
													.put("nb_line_tFileOutputDelimited_3",
															nb_line_tFileOutputDelimited_3);

											outtFileOutputDelimited_3
													.write(sb_tFileOutputDelimited_3
															.toString());

											tos_count_tFileOutputDelimited_3++;

											/**
											 * [tFileOutputDelimited_3 main ]
											 * stop
											 */
											// end for
										}

									} // End of branch
										// "copyOfcopyOftoMetaDataFile"

									// Start of branch "copyOfcopyOfcheckLookup"
									if (copyOfcopyOfcheckLookup != null) {

										/**
										 * [tBufferOutput_1 main ] start
										 */

										currentComponent = "tBufferOutput_1";

										String[] row_tBufferOutput_1 = new String[] {
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", };
										if (copyOfcopyOfcheckLookup.experiment_id != null) {

											row_tBufferOutput_1[0] = copyOfcopyOfcheckLookup.experiment_id;

										} else {
											row_tBufferOutput_1[0] = null;
										}
										if (copyOfcopyOfcheckLookup.method_type != null) {

											row_tBufferOutput_1[1] = copyOfcopyOfcheckLookup.method_type;

										} else {
											row_tBufferOutput_1[1] = null;
										}
										if (copyOfcopyOfcheckLookup.experiment_resolution != null) {

											row_tBufferOutput_1[2] = copyOfcopyOfcheckLookup.experiment_resolution;

										} else {
											row_tBufferOutput_1[2] = null;
										}
										if (copyOfcopyOfcheckLookup.method_platform != null) {

											row_tBufferOutput_1[3] = copyOfcopyOfcheckLookup.method_platform;

										} else {
											row_tBufferOutput_1[3] = null;
										}
										if (copyOfcopyOfcheckLookup.method_description != null) {

											row_tBufferOutput_1[4] = copyOfcopyOfcheckLookup.method_description;

										} else {
											row_tBufferOutput_1[4] = null;
										}
										if (copyOfcopyOfcheckLookup.merged_experiment_ids != null) {

											row_tBufferOutput_1[5] = copyOfcopyOfcheckLookup.merged_experiment_ids;

										} else {
											row_tBufferOutput_1[5] = null;
										}
										if (copyOfcopyOfcheckLookup.external_links != null) {

											row_tBufferOutput_1[6] = copyOfcopyOfcheckLookup.external_links;

										} else {
											row_tBufferOutput_1[6] = null;
										}
										if (copyOfcopyOfcheckLookup.site != null) {

											row_tBufferOutput_1[7] = copyOfcopyOfcheckLookup.site;

										} else {
											row_tBufferOutput_1[7] = null;
										}
										if (copyOfcopyOfcheckLookup.library_abbrev != null) {

											row_tBufferOutput_1[8] = copyOfcopyOfcheckLookup.library_abbrev;

										} else {
											row_tBufferOutput_1[8] = null;
										}
										if (copyOfcopyOfcheckLookup.library_link != null) {

											row_tBufferOutput_1[9] = copyOfcopyOfcheckLookup.library_link;

										} else {
											row_tBufferOutput_1[9] = null;
										}
										if (copyOfcopyOfcheckLookup.sequencing_center != null) {

											row_tBufferOutput_1[10] = copyOfcopyOfcheckLookup.sequencing_center;

										} else {
											row_tBufferOutput_1[10] = null;
										}
										if (copyOfcopyOfcheckLookup.hardware_type != null) {

											row_tBufferOutput_1[11] = copyOfcopyOfcheckLookup.hardware_type;

										} else {
											row_tBufferOutput_1[11] = null;
										}
										if (copyOfcopyOfcheckLookup.errorMessage != null) {

											row_tBufferOutput_1[12] = copyOfcopyOfcheckLookup.errorMessage;

										} else {
											row_tBufferOutput_1[12] = null;
										}
										globalBuffer.add(row_tBufferOutput_1);

										tos_count_tBufferOutput_1++;

										/**
										 * [tBufferOutput_1 main ] stop
										 */

									} // End of branch "copyOfcopyOfcheckLookup"

								} // End of branch "copyOftoMetaDataFile"

							} // End of branch "row5"

							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								row6.experiment_id = row9.experiment_id;

								row6.method_type = row9.method_type;

								row6.experiment_resolution = row9.experiment_resolution;

								row6.method_platform = row9.method_platform;

								row6.method_description = row9.method_description;

								row6.merged_experiment_ids = row9.merged_experiment_ids;

								row6.external_links = row9.external_links;

								row6.site = row9.site;

								row6.library_abbrev = row9.library_abbrev;

								row6.library_link = row9.library_link;

								row6.sequencing_center = row9.sequencing_center;

								row6.hardware_type = row9.hardware_type;

								row6.errorMessage = row9.errorMessage;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tBufferOutput_2 main ] start
								 */

								currentComponent = "tBufferOutput_2";

								String[] row_tBufferOutput_2 = new String[] {
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", };
								if (row6.experiment_id != null) {

									row_tBufferOutput_2[0] = row6.experiment_id;

								} else {
									row_tBufferOutput_2[0] = null;
								}
								if (row6.method_type != null) {

									row_tBufferOutput_2[1] = row6.method_type;

								} else {
									row_tBufferOutput_2[1] = null;
								}
								if (row6.experiment_resolution != null) {

									row_tBufferOutput_2[2] = row6.experiment_resolution;

								} else {
									row_tBufferOutput_2[2] = null;
								}
								if (row6.method_platform != null) {

									row_tBufferOutput_2[3] = row6.method_platform;

								} else {
									row_tBufferOutput_2[3] = null;
								}
								if (row6.method_description != null) {

									row_tBufferOutput_2[4] = row6.method_description;

								} else {
									row_tBufferOutput_2[4] = null;
								}
								if (row6.merged_experiment_ids != null) {

									row_tBufferOutput_2[5] = row6.merged_experiment_ids;

								} else {
									row_tBufferOutput_2[5] = null;
								}
								if (row6.external_links != null) {

									row_tBufferOutput_2[6] = row6.external_links;

								} else {
									row_tBufferOutput_2[6] = null;
								}
								if (row6.site != null) {

									row_tBufferOutput_2[7] = row6.site;

								} else {
									row_tBufferOutput_2[7] = null;
								}
								if (row6.library_abbrev != null) {

									row_tBufferOutput_2[8] = row6.library_abbrev;

								} else {
									row_tBufferOutput_2[8] = null;
								}
								if (row6.library_link != null) {

									row_tBufferOutput_2[9] = row6.library_link;

								} else {
									row_tBufferOutput_2[9] = null;
								}
								if (row6.sequencing_center != null) {

									row_tBufferOutput_2[10] = row6.sequencing_center;

								} else {
									row_tBufferOutput_2[10] = null;
								}
								if (row6.hardware_type != null) {

									row_tBufferOutput_2[11] = row6.hardware_type;

								} else {
									row_tBufferOutput_2[11] = null;
								}
								if (row6.errorMessage != null) {

									row_tBufferOutput_2[12] = row6.errorMessage;

								} else {
									row_tBufferOutput_2[12] = null;
								}
								globalBuffer.add(row_tBufferOutput_2);

								tos_count_tBufferOutput_2++;

								/**
								 * [tBufferOutput_2 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp2.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				ok_Hash.put("tSchemaComplianceCheck_1", true);
				end_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row12 != null) {
					tHash_Lookup_row12.endGet();
				}
				globalMap.remove("tHash_Lookup_row12");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tBufferOutput_3 end ] start
				 */

				currentComponent = "tBufferOutput_3";

				ok_Hash.put("tBufferOutput_3", true);
				end_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				/**
				 * [tBufferOutput_3 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnpivotRow_1 end ] start
				 */

				currentComponent = "tUnpivotRow_1";

				ok_Hash.put("tUnpivotRow_1", true);
				end_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				/**
				 * [tUnpivotRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				/**
				 * [tBufferOutput_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tBufferOutput_2 end ] start
				 */

				currentComponent = "tBufferOutput_2";

				ok_Hash.put("tBufferOutput_2", true);
				end_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				/**
				 * [tBufferOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row12");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				/**
				 * [tSchemaComplianceCheck_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_3 finally ] start
				 */

				currentComponent = "tBufferOutput_3";

				/**
				 * [tBufferOutput_3 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnpivotRow_1 finally ] start
				 */

				currentComponent = "tUnpivotRow_1";

				/**
				 * [tUnpivotRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_2 finally ] start
				 */

				currentComponent = "tBufferOutput_2";

				/**
				 * [tBufferOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workdir + "/bad/experiments.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								context.encoding));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("experiment_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("method_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("experiment_resolution");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("method_platform");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("method_description");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("merged_experiment_ids");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("external_links");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("site");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("library_abbrev");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("library_link");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sequencing_center");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("hardware_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("errorMessage");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[13];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row4.experiment_id = row_tBufferInput_1[0];

					}

					else {
						row4.experiment_id = null;
					}
					if (1 < row_tBufferInput_1.length) {

						row4.method_type = row_tBufferInput_1[1];

					}

					else {
						row4.method_type = null;
					}
					if (2 < row_tBufferInput_1.length) {

						row4.experiment_resolution = row_tBufferInput_1[2];

					}

					else {
						row4.experiment_resolution = null;
					}
					if (3 < row_tBufferInput_1.length) {

						row4.method_platform = row_tBufferInput_1[3];

					}

					else {
						row4.method_platform = null;
					}
					if (4 < row_tBufferInput_1.length) {

						row4.method_description = row_tBufferInput_1[4];

					}

					else {
						row4.method_description = null;
					}
					if (5 < row_tBufferInput_1.length) {

						row4.merged_experiment_ids = row_tBufferInput_1[5];

					}

					else {
						row4.merged_experiment_ids = null;
					}
					if (6 < row_tBufferInput_1.length) {

						row4.external_links = row_tBufferInput_1[6];

					}

					else {
						row4.external_links = null;
					}
					if (7 < row_tBufferInput_1.length) {

						row4.site = row_tBufferInput_1[7];

					}

					else {
						row4.site = null;
					}
					if (8 < row_tBufferInput_1.length) {

						row4.library_abbrev = row_tBufferInput_1[8];

					}

					else {
						row4.library_abbrev = null;
					}
					if (9 < row_tBufferInput_1.length) {

						row4.library_link = row_tBufferInput_1[9];

					}

					else {
						row4.library_link = null;
					}
					if (10 < row_tBufferInput_1.length) {

						row4.sequencing_center = row_tBufferInput_1[10];

					}

					else {
						row4.sequencing_center = null;
					}
					if (11 < row_tBufferInput_1.length) {

						row4.hardware_type = row_tBufferInput_1[11];

					}

					else {
						row4.hardware_type = null;
					}
					if (12 < row_tBufferInput_1.length) {

						row4.errorMessage = row_tBufferInput_1[12];

					}

					else {
						row4.errorMessage = null;
					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row4.experiment_id != null) {
						sb_tFileOutputDelimited_2.append(row4.experiment_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.method_type != null) {
						sb_tFileOutputDelimited_2.append(row4.method_type);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.experiment_resolution != null) {
						sb_tFileOutputDelimited_2
								.append(row4.experiment_resolution);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.method_platform != null) {
						sb_tFileOutputDelimited_2.append(row4.method_platform);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.method_description != null) {
						sb_tFileOutputDelimited_2
								.append(row4.method_description);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.merged_experiment_ids != null) {
						sb_tFileOutputDelimited_2
								.append(row4.merged_experiment_ids);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.external_links != null) {
						sb_tFileOutputDelimited_2.append(row4.external_links);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.site != null) {
						sb_tFileOutputDelimited_2.append(row4.site);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.library_abbrev != null) {
						sb_tFileOutputDelimited_2.append(row4.library_abbrev);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.library_link != null) {
						sb_tFileOutputDelimited_2.append(row4.library_link);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sequencing_center != null) {
						sb_tFileOutputDelimited_2
								.append(row4.sequencing_center);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.hardware_type != null) {
						sb_tFileOutputDelimited_2.append(row4.hardware_type);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.errorMessage != null) {
						sb_tFileOutputDelimited_2.append(row4.errorMessage);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.workdir + "/bad/experiments.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_4, false),
								context.encoding));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("errorMessage");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_4",
						isFileGenerated_tFileOutputDelimited_4);
				resourceMap.put("filetFileOutputDelimited_4",
						filetFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row13Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row13Struct>();
				row13 = new row13Struct();
				row13.errorMessage = "Experiments sheet should not be empty.";
				cacheList_tFixedFlowInput_1.add(row13);
				row13 = new row13Struct();
				row13.errorMessage = null;
				cacheList_tFixedFlowInput_1.add(row13);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row13Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row13 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 main ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
						if (row13.errorMessage != null) {
							sb_tFileOutputDelimited_4
									.append(row13.errorMessage);
						}
						sb_tFileOutputDelimited_4
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

						nb_line_tFileOutputDelimited_4++;
						resourceMap.put("nb_line_tFileOutputDelimited_4",
								nb_line_tFileOutputDelimited_4);

						outtFileOutputDelimited_4
								.write(sb_tFileOutputDelimited_4.toString());

						tos_count_tFileOutputDelimited_4++;

						/**
						 * [tFileOutputDelimited_4 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				if (isFileGenerated_tFileOutputDelimited_4
						&& nb_line_tFileOutputDelimited_4 == 0) {

					filetFileOutputDelimited_4.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_4")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_4"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_4")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableComparableLookupRow<row12Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.MethodTypeCV == null) ? 0 : this.MethodTypeCV
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.MethodTypeCV == null) {
				if (other.MethodTypeCV != null)
					return false;

			} else if (!this.MethodTypeCV.equals(other.MethodTypeCV))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.MethodTypeCV = this.MethodTypeCV;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.MethodTypeCV = this.MethodTypeCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.MethodTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MethodTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MethodTypeCV=" + MethodTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.MethodTypeCV,
					other.MethodTypeCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.MethodTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MethodTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MethodTypeCV=" + MethodTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.MethodTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MethodTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MethodTypeCV=" + MethodTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		public String SequencingType;

		public String getSequencingType() {
			return this.SequencingType;
		}

		public String HardwareType;

		public String getHardwareType() {
			return this.HardwareType;
		}

		public String ProjectAcronym;

		public String getProjectAcronym() {
			return this.ProjectAcronym;
		}

		public String SoftwareType;

		public String getSoftwareType() {
			return this.SoftwareType;
		}

		public String FileType;

		public String getFileType() {
			return this.FileType;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

					this.SequencingType = readString(dis);

					this.HardwareType = readString(dis);

					this.ProjectAcronym = readString(dis);

					this.SoftwareType = readString(dis);

					this.FileType = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

				// String

				writeString(this.SequencingType, dos);

				// String

				writeString(this.HardwareType, dos);

				// String

				writeString(this.ProjectAcronym, dos);

				// String

				writeString(this.SoftwareType, dos);

				// String

				writeString(this.FileType, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append(",SequencingType=" + SequencingType);
			sb.append(",HardwareType=" + HardwareType);
			sb.append(",ProjectAcronym=" + ProjectAcronym);
			sb.append(",SoftwareType=" + SoftwareType);
			sb.append(",FileType=" + FileType);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				row19Struct row19 = new row19Struct();
				row11Struct row11 = new row11Struct();

				row12Struct row12 = new row12Struct();

				/**
				 * [tAdvancedHash_row12 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row12", false);
				start_Hash.put("tAdvancedHash_row12",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row12";

				int tos_count_tAdvancedHash_row12 = 0;

				// connection name:row12
				// source node:tUnite_2 - inputs:(row10,row11)
				// outputs:(row12,row12) | target node:tAdvancedHash_row12 -
				// inputs:(row12) outputs:()
				// linked node: tMap_1 - inputs:(row2,row12)
				// outputs:(copyOfcheckLookup,copyOftoMetaDataFile)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row12Struct> getLookup(matchingModeEnum_row12);

				globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);

				/**
				 * [tAdvancedHash_row12 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				int nb_line_tFixedFlowInput_2 = 0;
				List<row10Struct> cacheList_tFixedFlowInput_2 = new java.util.ArrayList<row10Struct>();
				row10 = new row10Struct();
				row10.MethodTypeCV = "";
				cacheList_tFixedFlowInput_2.add(row10);
				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {
					for (row10Struct tmpRow_tFixedFlowInput_2 : cacheList_tFixedFlowInput_2) {
						nb_line_tFixedFlowInput_2++;
						row10 = tmpRow_tFixedFlowInput_2;

						/**
						 * [tFixedFlowInput_2 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_2 main ] start
						 */

						currentComponent = "tFixedFlowInput_2";

						tos_count_tFixedFlowInput_2++;

						/**
						 * [tFixedFlowInput_2 main ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// ////////

						// for output
						row12 = new row12Struct();

						row12.MethodTypeCV = row10.MethodTypeCV;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row12 main ] start
						 */

						currentComponent = "tAdvancedHash_row12";

						row12Struct row12_HashRow = new row12Struct();

						row12_HashRow.MethodTypeCV = row12.MethodTypeCV;

						tHash_Lookup_row12.put(row12_HashRow);

						tos_count_tAdvancedHash_row12++;

						/**
						 * [tAdvancedHash_row12 main ] stop
						 */

						/**
						 * [tFixedFlowInput_2 end ] start
						 */

						currentComponent = "tFixedFlowInput_2";

					}
				}
				cacheList_tFixedFlowInput_2.clear();
				globalMap.put("tFixedFlowInput_2_NB_LINE",
						nb_line_tFixedFlowInput_2);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				int footer_tFileInputDelimited_2 = 0;
				int totalLinetFileInputDelimited_2 = 0;
				int limittFileInputDelimited_2 = -1;
				int lastLinetFileInputDelimited_2 = -1;

				char fieldSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_2 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_2[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_2 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_2 = /**
				 * Start field
				 * tFileInputDelimited_2:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_2:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_2 = null;

				try {

					String[] rowtFileInputDelimited_2 = null;
					int currentLinetFileInputDelimited_2 = 0;
					int outputLinetFileInputDelimited_2 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_2 = 0;
							if (footer_value_tFileInputDelimited_2 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_2,
									fieldSeparator_tFileInputDelimited_2[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_2)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_2[0]);
						}

						csvReadertFileInputDelimited_2.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
							csvReadertFileInputDelimited_2.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_2[0]);

						csvReadertFileInputDelimited_2.setQuoteChar('\"');

						csvReadertFileInputDelimited_2
								.setEscapeChar(csvReadertFileInputDelimited_2
										.getQuoteChar());

						if (footer_tFileInputDelimited_2 > 0) {
							for (totalLinetFileInputDelimited_2 = 0; totalLinetFileInputDelimited_2 < 1; totalLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
							csvReadertFileInputDelimited_2
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_2.readNext()) {

								totalLinetFileInputDelimited_2++;

							}
							int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
									- footer_tFileInputDelimited_2 < 0 ? 0
									: totalLinetFileInputDelimited_2
											- footer_tFileInputDelimited_2;
							if (lastLinetFileInputDelimited_2 > 0) {
								lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
										: lastLineTemptFileInputDelimited_2;
							} else {
								lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
							}

							csvReadertFileInputDelimited_2.close();
							if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_2,
										fieldSeparator_tFileInputDelimited_2[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_2 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_2)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_2[0]);
							}
							csvReadertFileInputDelimited_2
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_2[0] != '\r'))
								csvReadertFileInputDelimited_2
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_2[0]);

							csvReadertFileInputDelimited_2.setQuoteChar('\"');

							csvReadertFileInputDelimited_2
									.setEscapeChar(csvReadertFileInputDelimited_2
											.getQuoteChar());

						}

						if (limittFileInputDelimited_2 != 0) {
							for (currentLinetFileInputDelimited_2 = 0; currentLinetFileInputDelimited_2 < 1; currentLinetFileInputDelimited_2++) {
								csvReadertFileInputDelimited_2.readNext();
							}
						}
						csvReadertFileInputDelimited_2
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_2 != 0
							&& csvReadertFileInputDelimited_2 != null
							&& csvReadertFileInputDelimited_2.readNext()) {
						rowstate_tFileInputDelimited_2.reset();

						rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2
								.getValues();

						currentLinetFileInputDelimited_2++;

						if (lastLinetFileInputDelimited_2 > -1
								&& currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
							break;
						}
						outputLinetFileInputDelimited_2++;
						if (limittFileInputDelimited_2 > 0
								&& outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
							break;
						}

						row19 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row19 = new row19Struct();
						try {

							char fieldSeparator_tFileInputDelimited_2_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_2_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_2.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_2[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row19.AnalysisTypeCV = null;

								row19.CollectionCV = null;

								row19.ContactRoleCV = null;

								row19.LinkDbCV = null;

								row19.MethodTypeCV = null;

								row19.OriginCV = null;

								row19.RecipientStatusCV = null;

								row19.ReferenceTypeCV = null;

								row19.SamplesetTypeCV = null;

								row19.SexCV = null;

								row19.StrandTypeCV = null;

								row19.StudyTypeCV = null;

								row19.SubjectAgeUnitsCV = null;

								row19.VariantCallTypeCV = null;

								row19.VariantCallZygosityCV = null;

								row19.VariantRegionTypeCV = null;

								row19.BooleanCV = null;

								row19.SequencingType = null;

								row19.HardwareType = null;

								row19.ProjectAcronym = null;

								row19.SoftwareType = null;

								row19.FileType = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_2 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_2 = 0;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.AnalysisTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 1;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.CollectionCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 2;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.ContactRoleCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 3;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.LinkDbCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 4;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.MethodTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 5;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.OriginCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 6;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.RecipientStatusCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 7;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.ReferenceTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 8;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.SamplesetTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 9;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.SexCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 10;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.StrandTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 11;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.StudyTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 12;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.SubjectAgeUnitsCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 13;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.VariantCallTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 14;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.VariantCallZygosityCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 15;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.VariantRegionTypeCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 16;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.BooleanCV = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.BooleanCV = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 17;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.SequencingType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.SequencingType = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 18;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.HardwareType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.HardwareType = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 19;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.ProjectAcronym = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.ProjectAcronym = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 20;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.SoftwareType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.SoftwareType = null;
								}

								columnIndexWithD_tFileInputDelimited_2 = 21;

								if (columnIndexWithD_tFileInputDelimited_2 < rowtFileInputDelimited_2.length) {

									row19.FileType = rowtFileInputDelimited_2[columnIndexWithD_tFileInputDelimited_2];

								} else {
									row19.FileType = null;
								}

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tFilterColumns_3 main ] start
							 */

							currentComponent = "tFilterColumns_3";

							row11.MethodTypeCV = row19.MethodTypeCV;

							nb_line_tFilterColumns_3++;

							tos_count_tFilterColumns_3++;

							/**
							 * [tFilterColumns_3 main ] stop
							 */

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							// ////////

							// for output
							row12 = new row12Struct();

							row12.MethodTypeCV = row11.MethodTypeCV;

							nb_line_tUnite_2++;

							// ////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row12 main ] start
							 */

							currentComponent = "tAdvancedHash_row12";

							row12Struct row12_HashRow = new row12Struct();

							row12_HashRow.MethodTypeCV = row12.MethodTypeCV;

							tHash_Lookup_row12.put(row12_HashRow);

							tos_count_tAdvancedHash_row12++;

							/**
							 * [tAdvancedHash_row12 main ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						nb_line_tFileInputDelimited_2++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_2 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_2 != null) {
							csvReadertFileInputDelimited_2.close();
						}
					}
					if (csvReadertFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								nb_line_tFileInputDelimited_2);
					}

				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE",
						nb_line_tFilterColumns_3);

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row12 end ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				tHash_Lookup_row12.endPut();

				ok_Hash.put("tAdvancedHash_row12", true);
				end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row12 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row12 finally ] start
				 */

				currentComponent = "tAdvancedHash_row12";

				/**
				 * [tAdvancedHash_row12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String HardwareType;

		public String getHardwareType() {
			return this.HardwareType;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.HardwareType == null) ? 0 : this.HardwareType
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.HardwareType == null) {
				if (other.HardwareType != null)
					return false;

			} else if (!this.HardwareType.equals(other.HardwareType))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.HardwareType = this.HardwareType;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.HardwareType = this.HardwareType;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.HardwareType = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HardwareType, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HardwareType=" + HardwareType);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.HardwareType,
					other.HardwareType);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String HardwareType;

		public String getHardwareType() {
			return this.HardwareType;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.HardwareType = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HardwareType, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HardwareType=" + HardwareType);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String HardwareType;

		public String getHardwareType() {
			return this.HardwareType;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.HardwareType = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.HardwareType, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("HardwareType=" + HardwareType);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkExperiments = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkExperiments = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		public String SequencingType;

		public String getSequencingType() {
			return this.SequencingType;
		}

		public String HardwareType;

		public String getHardwareType() {
			return this.HardwareType;
		}

		public String ProjectAcronym;

		public String getProjectAcronym() {
			return this.ProjectAcronym;
		}

		public String SoftwareType;

		public String getSoftwareType() {
			return this.SoftwareType;
		}

		public String FileType;

		public String getFileType() {
			return this.FileType;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkExperiments.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkExperiments.length == 0) {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkExperiments = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkExperiments, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkExperiments) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

					this.SequencingType = readString(dis);

					this.HardwareType = readString(dis);

					this.ProjectAcronym = readString(dis);

					this.SoftwareType = readString(dis);

					this.FileType = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

				// String

				writeString(this.SequencingType, dos);

				// String

				writeString(this.HardwareType, dos);

				// String

				writeString(this.ProjectAcronym, dos);

				// String

				writeString(this.SoftwareType, dos);

				// String

				writeString(this.FileType, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append(",SequencingType=" + SequencingType);
			sb.append(",HardwareType=" + HardwareType);
			sb.append(",ProjectAcronym=" + ProjectAcronym);
			sb.append(",SoftwareType=" + SoftwareType);
			sb.append(",FileType=" + FileType);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				row17Struct row17 = new row17Struct();
				row18Struct row18 = new row18Struct();

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tUnite_1 - inputs:(row14,row18)
				// outputs:(row16,row16) | target node:tAdvancedHash_row16 -
				// inputs:(row16) outputs:()
				// linked node: tMap_2 - inputs:(copyOftoMetaDataFile,row16)
				// outputs:(copyOfcopyOftoMetaDataFile,copyOfcopyOfcheckLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct> getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				int nb_line_tFixedFlowInput_3 = 0;
				List<row14Struct> cacheList_tFixedFlowInput_3 = new java.util.ArrayList<row14Struct>();
				row14 = new row14Struct();
				row14.HardwareType = "";
				cacheList_tFixedFlowInput_3.add(row14);
				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {
					for (row14Struct tmpRow_tFixedFlowInput_3 : cacheList_tFixedFlowInput_3) {
						nb_line_tFixedFlowInput_3++;
						row14 = tmpRow_tFixedFlowInput_3;

						/**
						 * [tFixedFlowInput_3 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_3 main ] start
						 */

						currentComponent = "tFixedFlowInput_3";

						tos_count_tFixedFlowInput_3++;

						/**
						 * [tFixedFlowInput_3 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row16 = new row16Struct();

						row16.HardwareType = row14.HardwareType;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.HardwareType = row16.HardwareType;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tFixedFlowInput_3 end ] start
						 */

						currentComponent = "tFixedFlowInput_3";

					}
				}
				cacheList_tFixedFlowInput_3.clear();
				globalMap.put("tFixedFlowInput_3_NB_LINE",
						nb_line_tFixedFlowInput_3);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									"UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													"UTF-8")),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										"UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														"UTF-8")),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row17 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row17 = new row17Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row17.AnalysisTypeCV = null;

								row17.CollectionCV = null;

								row17.ContactRoleCV = null;

								row17.LinkDbCV = null;

								row17.MethodTypeCV = null;

								row17.OriginCV = null;

								row17.RecipientStatusCV = null;

								row17.ReferenceTypeCV = null;

								row17.SamplesetTypeCV = null;

								row17.SexCV = null;

								row17.StrandTypeCV = null;

								row17.StudyTypeCV = null;

								row17.SubjectAgeUnitsCV = null;

								row17.VariantCallTypeCV = null;

								row17.VariantCallZygosityCV = null;

								row17.VariantRegionTypeCV = null;

								row17.BooleanCV = null;

								row17.SequencingType = null;

								row17.HardwareType = null;

								row17.ProjectAcronym = null;

								row17.SoftwareType = null;

								row17.FileType = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.AnalysisTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.CollectionCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.ContactRoleCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.LinkDbCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.MethodTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.OriginCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.RecipientStatusCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.ReferenceTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.SamplesetTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.SexCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.StrandTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.StudyTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.SubjectAgeUnitsCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.VariantCallTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.VariantCallZygosityCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.VariantRegionTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.BooleanCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.BooleanCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 17;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.SequencingType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.SequencingType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 18;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.HardwareType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.HardwareType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 19;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.ProjectAcronym = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.ProjectAcronym = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 20;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.SoftwareType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.SoftwareType = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 21;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row17.FileType = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row17.FileType = null;
								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row17 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row17"
						if (row17 != null) {

							/**
							 * [tFilterColumns_2 main ] start
							 */

							currentComponent = "tFilterColumns_2";

							row18.HardwareType = row17.HardwareType;

							nb_line_tFilterColumns_2++;

							tos_count_tFilterColumns_2++;

							/**
							 * [tFilterColumns_2 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row16 = new row16Struct();

							row16.HardwareType = row18.HardwareType;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tAdvancedHash_row16 main ] start
							 */

							currentComponent = "tAdvancedHash_row16";

							row16Struct row16_HashRow = new row16Struct();

							row16_HashRow.HardwareType = row16.HardwareType;

							tHash_Lookup_row16.put(row16_HashRow);

							tos_count_tAdvancedHash_row16++;

							/**
							 * [tAdvancedHash_row16 main ] stop
							 */

						} // End of branch "row17"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final checkExperiments checkExperimentsClass = new checkExperiments();

		int exitCode = checkExperimentsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer
				.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = checkExperiments.class
					.getClassLoader().getResourceAsStream(
							"checkgnpcnv/checkexperiments_0_3/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.encoding = (String) context.getProperty("encoding");
			context.excelFileIn = (String) context.getProperty("excelFileIn");
			context.properties = (String) context.getProperty("properties");
			context.tab = (String) context.getProperty("tab");
			context.workdir = (String) context.getProperty("workdir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("excelFileIn")) {
				context.excelFileIn = (String) parentContextMap
						.get("excelFileIn");
			}
			if (parentContextMap.containsKey("properties")) {
				context.properties = (String) parentContextMap
						.get("properties");
			}
			if (parentContextMap.containsKey("tab")) {
				context.tab = (String) parentContextMap.get("tab");
			}
			if (parentContextMap.containsKey("workdir")) {
				context.workdir = (String) parentContextMap.get("workdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : checkExperiments");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 353109 characters generated by Talend Open Studio for Data Integration on the
 * 25 août 2017 11:49:26 CEST
 ************************************************************************************************/
