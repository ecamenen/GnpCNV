// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package checkgnpcnv.convert2dbvar_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJavaFlex_1
import java.io.File;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;

//the import part of tJava_2
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: convert2dbVar Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class convert2dbVar implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (excelFileIn != null) {

				this.setProperty("excelFileIn", excelFileIn.toString());

			}

			if (properties != null) {

				this.setProperty("properties", properties.toString());

			}

			if (tab != null) {

				this.setProperty("tab", tab.toString());

			}

			if (workdir != null) {

				this.setProperty("workdir", workdir.toString());

			}

		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String excelFileIn;

		public String getExcelFileIn() {
			return this.excelFileIn;
		}

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		public String tab;

		public String getTab() {
			return this.tab;
		}

		public String workdir;

		public String getWorkdir() {
			return this.workdir;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "convert2dbVar";
	private final String projectName = "CHECKGNPCNV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					convert2dbVar.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(convert2dbVar.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_10_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputExcel_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnpivotRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tContextLoad_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputFullRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tUnpivotRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputExcel_8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFixedFlowInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_8_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("\nConverting into dbVar format...");

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJavaFlex_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJavaFlex_1 begin ] start
				 */

				int NB_ITERATE_tJava_2 = 0; // for statistics

				ok_Hash.put("tJavaFlex_1", false);
				start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				currentComponent = "tJavaFlex_1";

				int tos_count_tJavaFlex_1 = 0;

				Workbook wb = WorkbookFactory.create(new File(context.workdir
						+ context.excelFileIn));

				for (int i = 0; i < wb.getNumberOfSheets(); i++) {

					/**
					 * [tJavaFlex_1 begin ] stop
					 */

					/**
					 * [tJavaFlex_1 main ] start
					 */

					currentComponent = "tJavaFlex_1";

					globalMap.put("sheetName", ((String) (wb.getSheetName(i))));

					tos_count_tJavaFlex_1++;

					/**
					 * [tJavaFlex_1 main ] stop
					 */
					NB_ITERATE_tJava_2++;

					/**
					 * [tJava_2 begin ] start
					 */

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());

					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					System.out.println("* "
							+ (String) globalMap.get("sheetName"));

					/**
					 * [tJava_2 begin ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					if (((String) globalMap.get("sheetName"))
							.equals("CONTACTS")) {

						tFileInputExcel_15Process(globalMap);
					}

					if (((String) globalMap.get("sheetName"))
							.equals("VARIANT CALLS")) {

						tFileInputExcel_8Process(globalMap);
					}

					if (((String) globalMap.get("sheetName"))
							.equals("VARIANT REGIONS")) {

						tFileInputExcel_3Process(globalMap);
					}

					if (((String) globalMap.get("sheetName")).equals("SAMPLES")) {

						tFileInputExcel_2Process(globalMap);
					}

					if (((String) globalMap.get("sheetName"))
							.equals("EXPERIMENTS")) {

						tFileInputExcel_4Process(globalMap);
					}

					if (((String) globalMap.get("sheetName")).equals("STUDY")) {

						tFixedFlowInput_1Process(globalMap);
					}

					if (((String) globalMap.get("sheetName"))
							.equals("SAMPLESETS")) {

						tFixedFlowInput_2Process(globalMap);
					}

					/**
					 * [tJava_2 end ] stop
					 */

					/**
					 * [tJavaFlex_1 end ] start
					 */

					currentComponent = "tJavaFlex_1";

				}

				ok_Hash.put("tJavaFlex_1", true);
				end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

				/**
				 * [tJavaFlex_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tJavaFlex_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileDelete_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOftoMetaDataFile_0Struct implements
			routines.system.IPersistableRow<copyOftoMetaDataFile_0Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String contactType;

		public String getContactType() {
			return this.contactType;
		}

		public String First_name;

		public String getFirst_name() {
			return this.First_name;
		}

		public String Last_name;

		public String getLast_name() {
			return this.Last_name;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String MyNCBI_ID;

		public String getMyNCBI_ID() {
			return this.MyNCBI_ID;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Institution;

		public String getInstitution() {
			return this.Institution;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.contactType = readString(dis);

					this.First_name = readString(dis);

					this.Last_name = readString(dis);

					this.Email = readString(dis);

					this.MyNCBI_ID = readString(dis);

					this.Phone = readString(dis);

					this.Institution = readString(dis);

					this.Address = readString(dis);

					this.Website = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contactType, dos);

				// String

				writeString(this.First_name, dos);

				// String

				writeString(this.Last_name, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.MyNCBI_ID, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Institution, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Website, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contactType=" + contactType);
			sb.append(",First_name=" + First_name);
			sb.append(",Last_name=" + Last_name);
			sb.append(",Email=" + Email);
			sb.append(",MyNCBI_ID=" + MyNCBI_ID);
			sb.append(",Phone=" + Phone);
			sb.append(",Institution=" + Institution);
			sb.append(",Address=" + Address);
			sb.append(",Website=" + Website);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOftoMetaDataFile_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String contactType;

		public String getContactType() {
			return this.contactType;
		}

		public String First_name;

		public String getFirst_name() {
			return this.First_name;
		}

		public String Last_name;

		public String getLast_name() {
			return this.Last_name;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String MyNCBI_ID;

		public String getMyNCBI_ID() {
			return this.MyNCBI_ID;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Institution;

		public String getInstitution() {
			return this.Institution;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String ORC_id;

		public String getORC_id() {
			return this.ORC_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.contactType = readString(dis);

					this.First_name = readString(dis);

					this.Last_name = readString(dis);

					this.Email = readString(dis);

					this.MyNCBI_ID = readString(dis);

					this.Phone = readString(dis);

					this.Institution = readString(dis);

					this.Address = readString(dis);

					this.Website = readString(dis);

					this.ORC_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contactType, dos);

				// String

				writeString(this.First_name, dos);

				// String

				writeString(this.Last_name, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.MyNCBI_ID, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Institution, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.ORC_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contactType=" + contactType);
			sb.append(",First_name=" + First_name);
			sb.append(",Last_name=" + Last_name);
			sb.append(",Email=" + Email);
			sb.append(",MyNCBI_ID=" + MyNCBI_ID);
			sb.append(",Phone=" + Phone);
			sb.append(",Institution=" + Institution);
			sb.append(",Address=" + Address);
			sb.append(",Website=" + Website);
			sb.append(",ORC_id=" + ORC_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String contactType;

		public String getContactType() {
			return this.contactType;
		}

		public String First_name;

		public String getFirst_name() {
			return this.First_name;
		}

		public String Last_name;

		public String getLast_name() {
			return this.Last_name;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String MyNCBI_ID;

		public String getMyNCBI_ID() {
			return this.MyNCBI_ID;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Institution;

		public String getInstitution() {
			return this.Institution;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String Website;

		public String getWebsite() {
			return this.Website;
		}

		public String ORC_id;

		public String getORC_id() {
			return this.ORC_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.contactType = readString(dis);

					this.First_name = readString(dis);

					this.Last_name = readString(dis);

					this.Email = readString(dis);

					this.MyNCBI_ID = readString(dis);

					this.Phone = readString(dis);

					this.Institution = readString(dis);

					this.Address = readString(dis);

					this.Website = readString(dis);

					this.ORC_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.contactType, dos);

				// String

				writeString(this.First_name, dos);

				// String

				writeString(this.Last_name, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.MyNCBI_ID, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Institution, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Website, dos);

				// String

				writeString(this.ORC_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("contactType=" + contactType);
			sb.append(",First_name=" + First_name);
			sb.append(",Last_name=" + Last_name);
			sb.append(",Email=" + Email);
			sb.append(",MyNCBI_ID=" + MyNCBI_ID);
			sb.append(",Phone=" + Phone);
			sb.append(",Institution=" + Institution);
			sb.append(",Address=" + Address);
			sb.append(",Website=" + Website);
			sb.append(",ORC_id=" + ORC_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_15Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row10Struct row10 = new row10Struct();
				copyOftoMetaDataFile_0Struct copyOftoMetaDataFile_0 = new copyOftoMetaDataFile_0Struct();

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash
						.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;

				String fileName_tFileOutputExcel_1 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_1.setSheet("CONTACTS");
				xlsxTool_tFileOutputExcel_1.setAppend(true, true);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(true, 0, 8, true);

				xlsxTool_tFileOutputExcel_1
						.prepareXlsxFile(fileName_tFileOutputExcel_1);

				xlsxTool_tFileOutputExcel_1.setFont("");

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOftoMetaDataFile_0Struct copyOftoMetaDataFile_0_tmp = new copyOftoMetaDataFile_0Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_15 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_15", false);
				start_Hash
						.put("tFileInputExcel_15", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_15";

				int tos_count_tFileInputExcel_15 = 0;

				Object source_tFileInputExcel_15 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_15 = null;

				if (source_tFileInputExcel_15 instanceof java.io.InputStream
						|| source_tFileInputExcel_15 instanceof String) {
					excelReader_tFileInputExcel_15 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_15.addSheetName("CONTACTS",
							false);
					int start_column_tFileInputExcel_15 = 1 - 1;
					int end_column_tFileInputExcel_15 = 9 - 1;
					if (start_column_tFileInputExcel_15 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_15 = start_column_tFileInputExcel_15 + 10 - 1;

					} else if (end_column_tFileInputExcel_15 >= 0) {// follow
																	// end
																	// column
						start_column_tFileInputExcel_15 = end_column_tFileInputExcel_15 - 10 + 1;
					}

					if (end_column_tFileInputExcel_15 < 0
							|| start_column_tFileInputExcel_15 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_15 = end_column_tFileInputExcel_15;

					int header_tFileInputExcel_15 = 8;
					int limit_tFileInputExcel_15 = 20;

					int nb_line_tFileInputExcel_15 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_15 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_15 = df_tFileInputExcel_15
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_15 instanceof String) {
						excelReader_tFileInputExcel_15.parse(
								(String) source_tFileInputExcel_15, "UTF-8");
					} else if (source_tFileInputExcel_15 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_15
								.parse((java.io.InputStream) source_tFileInputExcel_15,
										"UTF-8");
					}

					while ((header_tFileInputExcel_15--) > 0
							&& excelReader_tFileInputExcel_15.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_15.next();
					}

					while (excelReader_tFileInputExcel_15.hasNext()) {
						int emptyColumnCount_tFileInputExcel_15 = 0;

						if (limit_tFileInputExcel_15 != -1
								&& nb_line_tFileInputExcel_15 >= limit_tFileInputExcel_15) {
							excelReader_tFileInputExcel_15.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_15 = excelReader_tFileInputExcel_15
								.next();
						row3 = null;
						int tempRowLength_tFileInputExcel_15 = 10;

						int columnIndex_tFileInputExcel_15 = 0;

						String[] temp_row_tFileInputExcel_15 = new String[tempRowLength_tFileInputExcel_15];

						for (int i_tFileInputExcel_15 = 0; i_tFileInputExcel_15 < tempRowLength_tFileInputExcel_15; i_tFileInputExcel_15++) {
							int current_tFileInputExcel_15 = i_tFileInputExcel_15
									+ start_column_tFileInputExcel_15;
							if (current_tFileInputExcel_15 <= actual_end_column_tFileInputExcel_15) {
								if (current_tFileInputExcel_15 < row_tFileInputExcel_15
										.size()) {
									String column_tFileInputExcel_15 = row_tFileInputExcel_15
											.get(current_tFileInputExcel_15);
									if (column_tFileInputExcel_15 != null) {
										temp_row_tFileInputExcel_15[i_tFileInputExcel_15] = column_tFileInputExcel_15;
									} else {
										temp_row_tFileInputExcel_15[i_tFileInputExcel_15] = "";
									}
								} else {
									temp_row_tFileInputExcel_15[i_tFileInputExcel_15] = "";
								}
							} else {
								temp_row_tFileInputExcel_15[i_tFileInputExcel_15] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_15 = false;
						row3 = new row3Struct();
						int curColNum_tFileInputExcel_15 = -1;
						String curColName_tFileInputExcel_15 = "";

						try {
							columnIndex_tFileInputExcel_15 = 0;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "contactType";

								row3.contactType = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.contactType = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 1;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "First_name";

								row3.First_name = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.First_name = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 2;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Last_name";

								row3.Last_name = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Last_name = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 3;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Email";

								row3.Email = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Email = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 4;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "MyNCBI_ID";

								row3.MyNCBI_ID = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.MyNCBI_ID = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 5;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Phone";

								row3.Phone = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Phone = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 6;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Institution";

								row3.Institution = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Institution = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 7;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Address";

								row3.Address = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Address = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 8;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "Website";

								row3.Website = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.Website = null;
								emptyColumnCount_tFileInputExcel_15++;
							}
							columnIndex_tFileInputExcel_15 = 9;

							if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
										+ start_column_tFileInputExcel_15 + 1;
								curColName_tFileInputExcel_15 = "ORC_id";

								row3.ORC_id = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15]
										.trim();
							} else {
								row3.ORC_id = null;
								emptyColumnCount_tFileInputExcel_15++;
							}

							nb_line_tFileInputExcel_15++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_15 = true;
							System.err.println(e.getMessage());
							row3 = null;
						}

						/**
						 * [tFileInputExcel_15 begin ] stop
						 */

						/**
						 * [tFileInputExcel_15 main ] start
						 */

						currentComponent = "tFileInputExcel_15";

						tos_count_tFileInputExcel_15++;

						/**
						 * [tFileInputExcel_15 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tFilterColumns_2 main ] start
							 */

							currentComponent = "tFilterColumns_2";

							row10.contactType = row3.contactType;

							row10.First_name = row3.First_name;

							row10.Last_name = row3.Last_name;

							row10.Email = row3.Email;

							row10.MyNCBI_ID = row3.MyNCBI_ID;

							row10.Phone = row3.Phone;

							row10.Institution = row3.Institution;

							row10.Address = row3.Address;

							row10.Website = row3.Website;

							row10.ORC_id = row3.ORC_id;

							nb_line_tFilterColumns_2++;

							tos_count_tFilterColumns_2++;

							/**
							 * [tFilterColumns_2 main ] stop
							 */

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
								// ###############################
								// # Output tables

								copyOftoMetaDataFile_0 = null;

								// # Output table : 'copyOftoMetaDataFile_0'
								// # Filter conditions
								if (

								row10.contactType != null
										&& !row10.contactType.equals("Analyst")

								) {
									copyOftoMetaDataFile_0_tmp.contactType = row10.contactType;
									copyOftoMetaDataFile_0_tmp.First_name = row10.First_name;
									copyOftoMetaDataFile_0_tmp.Last_name = row10.Last_name;
									copyOftoMetaDataFile_0_tmp.Email = row10.Email;
									copyOftoMetaDataFile_0_tmp.MyNCBI_ID = row10.MyNCBI_ID;
									copyOftoMetaDataFile_0_tmp.Phone = row10.Phone;
									copyOftoMetaDataFile_0_tmp.Institution = row10.Institution;
									copyOftoMetaDataFile_0_tmp.Address = row10.Address;
									copyOftoMetaDataFile_0_tmp.Website = row10.Website;
									copyOftoMetaDataFile_0 = copyOftoMetaDataFile_0_tmp;
								} // closing filter/reject
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_3 = false;

							tos_count_tMap_3++;

							/**
							 * [tMap_3 main ] stop
							 */
							// Start of branch "copyOftoMetaDataFile_0"
							if (copyOftoMetaDataFile_0 != null) {

								/**
								 * [tFileOutputExcel_1 main ] start
								 */

								currentComponent = "tFileOutputExcel_1";

								xlsxTool_tFileOutputExcel_1.addRow();

								if (copyOftoMetaDataFile_0.contactType != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.contactType));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.First_name != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.First_name));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Last_name != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Last_name));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Email != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Email));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.MyNCBI_ID != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.MyNCBI_ID));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Phone != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Phone));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Institution != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Institution));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Address != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Address));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								if (copyOftoMetaDataFile_0.Website != null) {

									xlsxTool_tFileOutputExcel_1
											.addCellValue(String
													.valueOf(copyOftoMetaDataFile_0.Website));
								} else {
									xlsxTool_tFileOutputExcel_1
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_1++;

								tos_count_tFileOutputExcel_1++;

								/**
								 * [tFileOutputExcel_1 main ] stop
								 */

							} // End of branch "copyOftoMetaDataFile_0"

						} // End of branch "row3"

						/**
						 * [tFileInputExcel_15 end ] start
						 */

						currentComponent = "tFileInputExcel_15";

					}

					try {
						if (excelReader_tFileInputExcel_15 != null) {
							excelReader_tFileInputExcel_15.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_15) {
						if (!(e_tFileInputExcel_15.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err.println(e_tFileInputExcel_15
									.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_15_NB_LINE",
							nb_line_tFileInputExcel_15);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_15", true);
				end_Hash.put("tFileInputExcel_15", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_15 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(
						fileName_tFileOutputExcel_1, true);

				globalMap.put("tFileOutputExcel_1_NB_LINE",
						nb_line_tFileOutputExcel_1);

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_15 finally ] start
				 */

				currentComponent = "tFileInputExcel_15";

				/**
				 * [tFileInputExcel_15 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								context.encoding));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("variant_call_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("variant_call_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("experiment_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sample_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assembly");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("contig");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("insertion_length");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("variant_region_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("copy_number");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("ref_copy_number");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("description");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("validation");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("zygosity");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("origin");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("phenotype");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("alt_status");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assembly_");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_coord");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_strand");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_coord");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_strand");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_order");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_molecule");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("external_links");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("evidence");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sequence");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("support");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("support_count");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("log2_value");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("five_outer_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("five_inner_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("three_inner_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("three_outer_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("allele_dose");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_8 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_8", false);
				start_Hash.put("tFileInputExcel_8", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_8";

				int tos_count_tFileInputExcel_8 = 0;

				Object source_tFileInputExcel_8 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_8 = null;

				if (source_tFileInputExcel_8 instanceof java.io.InputStream
						|| source_tFileInputExcel_8 instanceof String) {
					excelReader_tFileInputExcel_8 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_8.addSheetName("VARIANT CALLS",
							false);
					int start_column_tFileInputExcel_8 = 1 - 1;
					int end_column_tFileInputExcel_8 = -1;
					if (start_column_tFileInputExcel_8 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_8 = start_column_tFileInputExcel_8 + 45 - 1;

					} else if (end_column_tFileInputExcel_8 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_8 = end_column_tFileInputExcel_8 - 45 + 1;
					}

					if (end_column_tFileInputExcel_8 < 0
							|| start_column_tFileInputExcel_8 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_8 = end_column_tFileInputExcel_8;

					int header_tFileInputExcel_8 = 4;
					int limit_tFileInputExcel_8 = -1;

					int nb_line_tFileInputExcel_8 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_8 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_8 = df_tFileInputExcel_8
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_8 instanceof String) {
						excelReader_tFileInputExcel_8.parse(
								(String) source_tFileInputExcel_8, "UTF-8");
					} else if (source_tFileInputExcel_8 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_8.parse(
								(java.io.InputStream) source_tFileInputExcel_8,
								"UTF-8");
					}

					while ((header_tFileInputExcel_8--) > 0
							&& excelReader_tFileInputExcel_8.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_8.next();
					}

					while (excelReader_tFileInputExcel_8.hasNext()) {
						int emptyColumnCount_tFileInputExcel_8 = 0;

						if (limit_tFileInputExcel_8 != -1
								&& nb_line_tFileInputExcel_8 >= limit_tFileInputExcel_8) {
							excelReader_tFileInputExcel_8.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_8 = excelReader_tFileInputExcel_8
								.next();
						row22 = null;
						int tempRowLength_tFileInputExcel_8 = 45;

						int columnIndex_tFileInputExcel_8 = 0;

						String[] temp_row_tFileInputExcel_8 = new String[tempRowLength_tFileInputExcel_8];

						for (int i_tFileInputExcel_8 = 0; i_tFileInputExcel_8 < tempRowLength_tFileInputExcel_8; i_tFileInputExcel_8++) {
							int current_tFileInputExcel_8 = i_tFileInputExcel_8
									+ start_column_tFileInputExcel_8;
							if (current_tFileInputExcel_8 <= actual_end_column_tFileInputExcel_8) {
								if (current_tFileInputExcel_8 < row_tFileInputExcel_8
										.size()) {
									String column_tFileInputExcel_8 = row_tFileInputExcel_8
											.get(current_tFileInputExcel_8);
									if (column_tFileInputExcel_8 != null) {
										temp_row_tFileInputExcel_8[i_tFileInputExcel_8] = column_tFileInputExcel_8;
									} else {
										temp_row_tFileInputExcel_8[i_tFileInputExcel_8] = "";
									}
								} else {
									temp_row_tFileInputExcel_8[i_tFileInputExcel_8] = "";
								}
							} else {
								temp_row_tFileInputExcel_8[i_tFileInputExcel_8] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_8 = false;
						row22 = new row22Struct();
						int curColNum_tFileInputExcel_8 = -1;
						String curColName_tFileInputExcel_8 = "";

						try {
							columnIndex_tFileInputExcel_8 = 0;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "variant_call_id";

								row22.variant_call_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.variant_call_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 1;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "variant_call_type";

								row22.variant_call_type = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.variant_call_type = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 2;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "experiment_id";

								row22.experiment_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.experiment_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 3;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "sample_id";

								row22.sample_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.sample_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 4;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "sampleset_id";

								row22.sampleset_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.sampleset_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 5;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "assembly";

								row22.assembly = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.assembly = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 6;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "chr";

								row22.chr = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.chr = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 7;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "contig";

								row22.contig = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.contig = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 8;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "outer_start";

								row22.outer_start = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.outer_start = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 9;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "start";

								row22.start = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.start = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 10;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "inner_start";

								row22.inner_start = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.inner_start = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 11;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "inner_stop";

								row22.inner_stop = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.inner_stop = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 12;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "stop";

								row22.stop = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.stop = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 13;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "outer_stop";

								row22.outer_stop = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.outer_stop = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 14;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "insertion_length";

								row22.insertion_length = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.insertion_length = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 15;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "variant_region_id";

								row22.variant_region_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.variant_region_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 16;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "copy_number";

								row22.copy_number = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.copy_number = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 17;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "ref_copy_number";

								row22.ref_copy_number = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.ref_copy_number = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 18;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "description";

								row22.description = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.description = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 19;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "validation";

								row22.validation = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.validation = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 20;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "zygosity";

								row22.zygosity = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.zygosity = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 21;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "origin";

								row22.origin = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.origin = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 22;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "phenotype";

								row22.phenotype = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.phenotype = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 23;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "alt_status";

								row22.alt_status = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.alt_status = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 24;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "assembly_";

								row22.assembly_ = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.assembly_ = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 25;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "from_chr";

								row22.from_chr = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.from_chr = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 26;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "from_coord";

								row22.from_coord = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.from_coord = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 27;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "from_strand";

								row22.from_strand = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.from_strand = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 28;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "to_chr";

								row22.to_chr = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.to_chr = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 29;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "to_coord";

								row22.to_coord = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.to_coord = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 30;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "to_strand";

								row22.to_strand = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.to_strand = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 31;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "mutation_id";

								row22.mutation_id = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.mutation_id = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 32;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "mutation_order";

								row22.mutation_order = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.mutation_order = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 33;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "mutation_molecule";

								row22.mutation_molecule = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.mutation_molecule = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 34;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "external_links";

								row22.external_links = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.external_links = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 35;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "evidence";

								row22.evidence = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.evidence = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 36;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "sequence";

								row22.sequence = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.sequence = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 37;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "support";

								row22.support = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.support = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 38;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "support_count";

								row22.support_count = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.support_count = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 39;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "log2_value";

								row22.log2_value = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.log2_value = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 40;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "five_outer_flank";

								row22.five_outer_flank = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.five_outer_flank = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 41;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "five_inner_flank";

								row22.five_inner_flank = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.five_inner_flank = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 42;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "three_inner_flank";

								row22.three_inner_flank = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.three_inner_flank = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 43;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "three_outer_flank";

								row22.three_outer_flank = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.three_outer_flank = null;
								emptyColumnCount_tFileInputExcel_8++;
							}
							columnIndex_tFileInputExcel_8 = 44;

							if (temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_8 = columnIndex_tFileInputExcel_8
										+ start_column_tFileInputExcel_8 + 1;
								curColName_tFileInputExcel_8 = "allele_dose";

								row22.allele_dose = temp_row_tFileInputExcel_8[columnIndex_tFileInputExcel_8]
										.trim();
							} else {
								row22.allele_dose = null;
								emptyColumnCount_tFileInputExcel_8++;
							}

							nb_line_tFileInputExcel_8++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_8 = true;
							System.err.println(e.getMessage());
							row22 = null;
						}

						/**
						 * [tFileInputExcel_8 begin ] stop
						 */

						/**
						 * [tFileInputExcel_8 main ] start
						 */

						currentComponent = "tFileInputExcel_8";

						tos_count_tFileInputExcel_8++;

						/**
						 * [tFileInputExcel_8 main ] stop
						 */
						// Start of branch "row22"
						if (row22 != null) {

							/**
							 * [tFileOutputDelimited_2 main ] start
							 */

							currentComponent = "tFileOutputDelimited_2";

							StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
							if (row22.variant_call_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.variant_call_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.variant_call_type != null) {
								sb_tFileOutputDelimited_2
										.append(row22.variant_call_type);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.experiment_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.experiment_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.sample_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.sample_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.sampleset_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.sampleset_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.assembly != null) {
								sb_tFileOutputDelimited_2
										.append(row22.assembly);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.chr != null) {
								sb_tFileOutputDelimited_2.append(row22.chr);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.contig != null) {
								sb_tFileOutputDelimited_2.append(row22.contig);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.outer_start != null) {
								sb_tFileOutputDelimited_2
										.append(row22.outer_start);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.start != null) {
								sb_tFileOutputDelimited_2.append(row22.start);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.inner_start != null) {
								sb_tFileOutputDelimited_2
										.append(row22.inner_start);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.inner_stop != null) {
								sb_tFileOutputDelimited_2
										.append(row22.inner_stop);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.stop != null) {
								sb_tFileOutputDelimited_2.append(row22.stop);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.outer_stop != null) {
								sb_tFileOutputDelimited_2
										.append(row22.outer_stop);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.insertion_length != null) {
								sb_tFileOutputDelimited_2
										.append(row22.insertion_length);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.variant_region_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.variant_region_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.copy_number != null) {
								sb_tFileOutputDelimited_2
										.append(row22.copy_number);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.ref_copy_number != null) {
								sb_tFileOutputDelimited_2
										.append(row22.ref_copy_number);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.description != null) {
								sb_tFileOutputDelimited_2
										.append(row22.description);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.validation != null) {
								sb_tFileOutputDelimited_2
										.append(row22.validation);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.zygosity != null) {
								sb_tFileOutputDelimited_2
										.append(row22.zygosity);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.origin != null) {
								sb_tFileOutputDelimited_2.append(row22.origin);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.phenotype != null) {
								sb_tFileOutputDelimited_2
										.append(row22.phenotype);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.alt_status != null) {
								sb_tFileOutputDelimited_2
										.append(row22.alt_status);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.assembly_ != null) {
								sb_tFileOutputDelimited_2
										.append(row22.assembly_);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.from_chr != null) {
								sb_tFileOutputDelimited_2
										.append(row22.from_chr);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.from_coord != null) {
								sb_tFileOutputDelimited_2
										.append(row22.from_coord);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.from_strand != null) {
								sb_tFileOutputDelimited_2
										.append(row22.from_strand);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.to_chr != null) {
								sb_tFileOutputDelimited_2.append(row22.to_chr);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.to_coord != null) {
								sb_tFileOutputDelimited_2
										.append(row22.to_coord);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.to_strand != null) {
								sb_tFileOutputDelimited_2
										.append(row22.to_strand);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.mutation_id != null) {
								sb_tFileOutputDelimited_2
										.append(row22.mutation_id);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.mutation_order != null) {
								sb_tFileOutputDelimited_2
										.append(row22.mutation_order);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.mutation_molecule != null) {
								sb_tFileOutputDelimited_2
										.append(row22.mutation_molecule);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.external_links != null) {
								sb_tFileOutputDelimited_2
										.append(row22.external_links);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.evidence != null) {
								sb_tFileOutputDelimited_2
										.append(row22.evidence);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.sequence != null) {
								sb_tFileOutputDelimited_2
										.append(row22.sequence);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.support != null) {
								sb_tFileOutputDelimited_2.append(row22.support);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.support_count != null) {
								sb_tFileOutputDelimited_2
										.append(row22.support_count);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.log2_value != null) {
								sb_tFileOutputDelimited_2
										.append(row22.log2_value);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.five_outer_flank != null) {
								sb_tFileOutputDelimited_2
										.append(row22.five_outer_flank);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.five_inner_flank != null) {
								sb_tFileOutputDelimited_2
										.append(row22.five_inner_flank);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.three_inner_flank != null) {
								sb_tFileOutputDelimited_2
										.append(row22.three_inner_flank);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.three_outer_flank != null) {
								sb_tFileOutputDelimited_2
										.append(row22.three_outer_flank);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_tFileOutputDelimited_2);
							if (row22.allele_dose != null) {
								sb_tFileOutputDelimited_2
										.append(row22.allele_dose);
							}
							sb_tFileOutputDelimited_2
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

							nb_line_tFileOutputDelimited_2++;
							resourceMap.put("nb_line_tFileOutputDelimited_2",
									nb_line_tFileOutputDelimited_2);

							outtFileOutputDelimited_2
									.write(sb_tFileOutputDelimited_2.toString());

							tos_count_tFileOutputDelimited_2++;

							/**
							 * [tFileOutputDelimited_2 main ] stop
							 */

						} // End of branch "row22"

						/**
						 * [tFileInputExcel_8 end ] start
						 */

						currentComponent = "tFileInputExcel_8";

					}

					try {
						if (excelReader_tFileInputExcel_8 != null) {
							excelReader_tFileInputExcel_8.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_8) {
						if (!(e_tFileInputExcel_8.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_8.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_8_NB_LINE",
							nb_line_tFileInputExcel_8);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_8", true);
				end_Hash.put("tFileInputExcel_8", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_8 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				tFileInputFullRow_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_8 finally ] start
				 */

				currentComponent = "tFileInputExcel_8";

				/**
				 * [tFileInputExcel_8 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_8_SUBPROCESS_STATE", 1);
	}

	public static class row42Struct implements
			routines.system.IPersistableRow<row42Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row42Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row41Struct implements
			routines.system.IPersistableRow<row41Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row41Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row41Struct row41 = new row41Struct();
				row42Struct row42 = new row42Struct();

				/**
				 * [tFileOutputDelimited_11 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_11", false);
				start_Hash.put("tFileOutputDelimited_11",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_11";

				int tos_count_tFileOutputDelimited_11 = 0;

				String fileName_tFileOutputDelimited_11 = "";
				fileName_tFileOutputDelimited_11 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_11 = null;
				String extension_tFileOutputDelimited_11 = null;
				String directory_tFileOutputDelimited_11 = null;
				if ((fileName_tFileOutputDelimited_11.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") < fileName_tFileOutputDelimited_11
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(0, fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
							.substring(0, fileName_tFileOutputDelimited_11
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_11.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(0, fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
						extension_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11
								.substring(fileName_tFileOutputDelimited_11
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_11 = fileName_tFileOutputDelimited_11;
						extension_tFileOutputDelimited_11 = "";
					}
					directory_tFileOutputDelimited_11 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_11 = true;
				java.io.File filetFileOutputDelimited_11 = new java.io.File(
						fileName_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME",
						fileName_tFileOutputDelimited_11);
				int nb_line_tFileOutputDelimited_11 = 0;
				int splitEvery_tFileOutputDelimited_11 = 1000;
				int splitedFileNo_tFileOutputDelimited_11 = 0;
				int currentRow_tFileOutputDelimited_11 = 0;

				final String OUT_DELIM_tFileOutputDelimited_11 = /**
				 * Start field
				 * tFileOutputDelimited_11:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_11:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_11 = /**
				 * Start
				 * field tFileOutputDelimited_11:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_11:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_11 != null
						&& directory_tFileOutputDelimited_11.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_11 = new java.io.File(
							directory_tFileOutputDelimited_11);
					if (!dir_tFileOutputDelimited_11.exists()) {
						dir_tFileOutputDelimited_11.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_11 = null;

				java.io.File fileToDelete_tFileOutputDelimited_11 = new java.io.File(
						fileName_tFileOutputDelimited_11);
				if (fileToDelete_tFileOutputDelimited_11.exists()) {
					fileToDelete_tFileOutputDelimited_11.delete();
				}
				outtFileOutputDelimited_11 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_11, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_11",
						outtFileOutputDelimited_11);
				resourceMap.put("nb_line_tFileOutputDelimited_11",
						nb_line_tFileOutputDelimited_11);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_11",
						isFileGenerated_tFileOutputDelimited_11);
				resourceMap.put("filetFileOutputDelimited_11",
						filetFileOutputDelimited_11);

				/**
				 * [tFileOutputDelimited_11 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_3 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_3", false);
				start_Hash.put("tFileInputFullRow_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_3";

				int tos_count_tFileInputFullRow_3 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_3 = null;

				try {// }
					fid_tFileInputFullRow_3 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_3.nextRecord()) {// }
						row41 = null;
						boolean whetherReject_tFileInputFullRow_3 = false;
						row41 = new row41Struct();
						row41.line = fid_tFileInputFullRow_3.get(0);

						/**
						 * [tFileInputFullRow_3 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_3 main ] start
						 */

						currentComponent = "tFileInputFullRow_3";

						tos_count_tFileInputFullRow_3++;

						/**
						 * [tFileInputFullRow_3 main ] stop
						 */

						/**
						 * [tFilterRow_3 main ] start
						 */

						currentComponent = "tFilterRow_3";

						row42 = null;
						Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3(
								"&&");
						ope_tFilterRow_3.matches(
								(!row41.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_3.getMatchFlag()) {
							if (row42 == null) {
								row42 = new row42Struct();
							}
							row42.line = row41.line;
							nb_line_ok_tFilterRow_3++;
						} else {
							nb_line_reject_tFilterRow_3++;
						}

						nb_line_tFilterRow_3++;

						tos_count_tFilterRow_3++;

						/**
						 * [tFilterRow_3 main ] stop
						 */
						// Start of branch "row42"
						if (row42 != null) {

							/**
							 * [tFileOutputDelimited_11 main ] start
							 */

							currentComponent = "tFileOutputDelimited_11";

							StringBuilder sb_tFileOutputDelimited_11 = new StringBuilder();
							if (row42.line != null) {
								sb_tFileOutputDelimited_11.append(row42.line);
							}
							sb_tFileOutputDelimited_11
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_11);

							nb_line_tFileOutputDelimited_11++;
							resourceMap.put("nb_line_tFileOutputDelimited_11",
									nb_line_tFileOutputDelimited_11);

							outtFileOutputDelimited_11
									.write(sb_tFileOutputDelimited_11
											.toString());

							tos_count_tFileOutputDelimited_11++;

							/**
							 * [tFileOutputDelimited_11 main ] stop
							 */

						} // End of branch "row42"

						/**
						 * [tFileInputFullRow_3 end ] start
						 */

						currentComponent = "tFileInputFullRow_3";

					}
				} finally {
					if (fid_tFileInputFullRow_3 != null) {
						fid_tFileInputFullRow_3.close();
					}
				}
				globalMap.put("tFileInputFullRow_3_NB_LINE",
						fid_tFileInputFullRow_3.getRowNumber());

				ok_Hash.put("tFileInputFullRow_3", true);
				end_Hash.put("tFileInputFullRow_3", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_3 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK",
						nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_3);

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 end ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (outtFileOutputDelimited_11 != null) {
					outtFileOutputDelimited_11.flush();
					outtFileOutputDelimited_11.close();
				}

				globalMap.put("tFileOutputDelimited_11_NB_LINE",
						nb_line_tFileOutputDelimited_11);
				globalMap.put("tFileOutputDelimited_11_FILE_NAME",
						fileName_tFileOutputDelimited_11);

				if (isFileGenerated_tFileOutputDelimited_11
						&& nb_line_tFileOutputDelimited_11 == 0) {

					filetFileOutputDelimited_11.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_11", true);

				ok_Hash.put("tFileOutputDelimited_11", true);
				end_Hash.put("tFileOutputDelimited_11",
						System.currentTimeMillis());

				tFileRowCount_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_3 finally ] start
				 */

				currentComponent = "tFileInputFullRow_3";

				/**
				 * [tFileInputFullRow_3 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_11 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_11";

				if (resourceMap.get("finish_tFileOutputDelimited_11") == null) {

					java.io.Writer outtFileOutputDelimited_11 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_11");
					if (outtFileOutputDelimited_11 != null) {
						outtFileOutputDelimited_11.flush();
						outtFileOutputDelimited_11.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_11")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_11"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_11")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_3_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_3 begin ] start
				 */

				ok_Hash.put("tFileRowCount_3", false);
				start_Hash.put("tFileRowCount_3", System.currentTimeMillis());

				currentComponent = "tFileRowCount_3";

				int tos_count_tFileRowCount_3 = 0;

				/**
				 * [tFileRowCount_3 begin ] stop
				 */

				/**
				 * [tFileRowCount_3 main ] start
				 */

				currentComponent = "tFileRowCount_3";

				String tmp_tFileRowCount_3 = context.workdir + "/tmp/temp2.tmp";
				int emptyLineCount_tFileRowCount_3 = 0;
				if (tmp_tFileRowCount_3.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_3 = 0;
				if (tmp_tFileRowCount_3.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_3 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_3.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_3 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp")),
									wbs_tFileRowCount_3);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_3 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_3 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_3.getSheets());

					if (sheets_tFileRowCount_3.size() <= 0) {
						wb_tFileRowCount_3.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_3 : sheets_tFileRowCount_3) {
						int one_sheet_rows = sheet_tFileRowCount_3.getRows();
						lineCount_tFileRowCount_3 += one_sheet_rows;

						for (int i_tFileRowCount_3 = 0; i_tFileRowCount_3 < one_sheet_rows; i_tFileRowCount_3++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_3
									.getRow(i_tFileRowCount_3);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_3 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_3.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_3 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_3 = "\n";
					byte[] bytes_tFileRowCount_3 = rowSeparator_tFileRowCount_3
							.getBytes();
					int index_tFileRowCount_3 = 0, oneChar_tFileRowCount_3 = 0, tipEmptyLineCount_tFileRowCount_3 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_3 = true, bReadyEOF_tFileRowCount_3 = false;

					if (bytes_tFileRowCount_3.length > 0) {
						while ((oneChar_tFileRowCount_3 = br_tFileRowCount_3
								.read()) != -1) {
							if (oneChar_tFileRowCount_3 == bytes_tFileRowCount_3[index_tFileRowCount_3]) {

								if (index_tFileRowCount_3 < bytes_tFileRowCount_3.length - 1) {
									index_tFileRowCount_3++;
									continue; // match next char
								}

								if (index_tFileRowCount_3 == bytes_tFileRowCount_3.length - 1) {
									lineCount_tFileRowCount_3++;
									if (bTipEmptyFlagOpen_tFileRowCount_3) {
										tipEmptyLineCount_tFileRowCount_3++;
										emptyLineCount_tFileRowCount_3++;
									}
									bReadyEOF_tFileRowCount_3 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_3 = true;
									index_tFileRowCount_3 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_3 = true;
								bTipEmptyFlagOpen_tFileRowCount_3 = false;
								tipEmptyLineCount_tFileRowCount_3 = 0;
								index_tFileRowCount_3 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_3)
							lineCount_tFileRowCount_3++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_3) {
							lineCount_tFileRowCount_3 -= tipEmptyLineCount_tFileRowCount_3;
							emptyLineCount_tFileRowCount_3 -= tipEmptyLineCount_tFileRowCount_3;
						}
					}
					br_tFileRowCount_3.close();
				}

				globalMap.put("tFileRowCount_3_COUNT",
						lineCount_tFileRowCount_3);

				tos_count_tFileRowCount_3++;

				/**
				 * [tFileRowCount_3 main ] stop
				 */

				/**
				 * [tFileRowCount_3 end ] start
				 */

				currentComponent = "tFileRowCount_3";

				ok_Hash.put("tFileRowCount_3", true);
				end_Hash.put("tFileRowCount_3", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_3_COUNT")) <= 1) {

					tFixedFlowInput_5Process(globalMap);
				}

				/**
				 * [tFileRowCount_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_3 finally ] start
				 */

				currentComponent = "tFileRowCount_3";

				/**
				 * [tFileRowCount_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_3_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements
			routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row37Struct row37 = new row37Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						context.workdir + "/bad/variants.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
							.substring(0, fileName_tFileOutputDelimited_8
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(0, fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitEvery_tFileOutputDelimited_8 = 1000;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /**
				 * Start field
				 * tFileOutputDelimited_8:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
				 * Start
				 * field tFileOutputDelimited_8:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null
						&& directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(
							directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(
						fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}
				outtFileOutputDelimited_8 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_8, false),
								context.encoding));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("errorMessage");
					outtFileOutputDelimited_8
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8",
						outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8",
						nb_line_tFileOutputDelimited_8);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_8",
						isFileGenerated_tFileOutputDelimited_8);
				resourceMap.put("filetFileOutputDelimited_8",
						filetFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_5 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_5", false);
				start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_5";

				int tos_count_tFixedFlowInput_5 = 0;

				int nb_line_tFixedFlowInput_5 = 0;
				List<row37Struct> cacheList_tFixedFlowInput_5 = new java.util.ArrayList<row37Struct>();
				row37 = new row37Struct();
				row37.errorMessage = "Variant Calls sheet should not be empty.";
				cacheList_tFixedFlowInput_5.add(row37);
				row37 = new row37Struct();
				row37.errorMessage = null;
				cacheList_tFixedFlowInput_5.add(row37);
				for (int i_tFixedFlowInput_5 = 0; i_tFixedFlowInput_5 < 1; i_tFixedFlowInput_5++) {
					for (row37Struct tmpRow_tFixedFlowInput_5 : cacheList_tFixedFlowInput_5) {
						nb_line_tFixedFlowInput_5++;
						row37 = tmpRow_tFixedFlowInput_5;

						/**
						 * [tFixedFlowInput_5 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_5 main ] start
						 */

						currentComponent = "tFixedFlowInput_5";

						tos_count_tFixedFlowInput_5++;

						/**
						 * [tFixedFlowInput_5 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_8 main ] start
						 */

						currentComponent = "tFileOutputDelimited_8";

						StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
						if (row37.errorMessage != null) {
							sb_tFileOutputDelimited_8
									.append(row37.errorMessage);
						}
						sb_tFileOutputDelimited_8
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

						nb_line_tFileOutputDelimited_8++;
						resourceMap.put("nb_line_tFileOutputDelimited_8",
								nb_line_tFileOutputDelimited_8);

						outtFileOutputDelimited_8
								.write(sb_tFileOutputDelimited_8.toString());

						tos_count_tFileOutputDelimited_8++;

						/**
						 * [tFileOutputDelimited_8 main ] stop
						 */

						/**
						 * [tFixedFlowInput_5 end ] start
						 */

						currentComponent = "tFixedFlowInput_5";

					}
				}
				cacheList_tFixedFlowInput_5.clear();
				globalMap.put("tFixedFlowInput_5_NB_LINE",
						nb_line_tFixedFlowInput_5);

				ok_Hash.put("tFixedFlowInput_5", true);
				end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE",
						nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",
						fileName_tFileOutputDelimited_8);

				if (isFileGenerated_tFileOutputDelimited_8
						&& nb_line_tFileOutputDelimited_8 == 0) {

					filetFileOutputDelimited_8.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_5 finally ] start
				 */

				currentComponent = "tFixedFlowInput_5";

				/**
				 * [tFixedFlowInput_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_8")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_8"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_8")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String variant_region_type;

		public String getVariant_region_type() {
			return this.variant_region_type;
		}

		public String assertion_method;

		public String getAssertion_method() {
			return this.assertion_method;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String supporting_variant_call_ids;

		public String getSupporting_variant_call_ids() {
			return this.supporting_variant_call_ids;
		}

		public String supporting_variant_region_ids;

		public String getSupporting_variant_region_ids() {
			return this.supporting_variant_region_ids;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.variant_region_id = readString(dis);

					this.variant_region_type = readString(dis);

					this.assertion_method = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.supporting_variant_call_ids = readString(dis);

					this.supporting_variant_region_ids = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.variant_region_type, dos);

				// String

				writeString(this.assertion_method, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.supporting_variant_call_ids, dos);

				// String

				writeString(this.supporting_variant_region_ids, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_region_id=" + variant_region_id);
			sb.append(",variant_region_type=" + variant_region_type);
			sb.append(",assertion_method=" + assertion_method);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",supporting_variant_call_ids="
					+ supporting_variant_call_ids);
			sb.append(",supporting_variant_region_ids="
					+ supporting_variant_region_ids);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tFileOutputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_3", false);
				start_Hash
						.put("tFileOutputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_3";

				int tos_count_tFileOutputExcel_3 = 0;

				int columnIndex_tFileOutputExcel_3 = 0;

				String fileName_tFileOutputExcel_3 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_3 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_3.setSheet("VARIANT REGIONS");
				xlsxTool_tFileOutputExcel_3.setAppend(true, true);
				xlsxTool_tFileOutputExcel_3.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_3.setXY(true, 0, 4, true);

				xlsxTool_tFileOutputExcel_3
						.prepareXlsxFile(fileName_tFileOutputExcel_3);

				xlsxTool_tFileOutputExcel_3.setFont("TAHOMA");

				/**
				 * [tFileOutputExcel_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				Object source_tFileInputExcel_3 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_3 = null;

				if (source_tFileInputExcel_3 instanceof java.io.InputStream
						|| source_tFileInputExcel_3 instanceof String) {
					excelReader_tFileInputExcel_3 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_3.addSheetName(
							"VARIANT REGIONS", false);
					int start_column_tFileInputExcel_3 = 1 - 1;
					int end_column_tFileInputExcel_3 = 15 - 1;
					if (start_column_tFileInputExcel_3 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_3 = start_column_tFileInputExcel_3 + 15 - 1;

					} else if (end_column_tFileInputExcel_3 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 - 15 + 1;
					}

					if (end_column_tFileInputExcel_3 < 0
							|| start_column_tFileInputExcel_3 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3;

					int header_tFileInputExcel_3 = 4;
					int limit_tFileInputExcel_3 = -1;

					int nb_line_tFileInputExcel_3 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_3 instanceof String) {
						excelReader_tFileInputExcel_3.parse(
								(String) source_tFileInputExcel_3, "UTF-8");
					} else if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_3.parse(
								(java.io.InputStream) source_tFileInputExcel_3,
								"UTF-8");
					}

					while ((header_tFileInputExcel_3--) > 0
							&& excelReader_tFileInputExcel_3.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_3.next();
					}

					while (excelReader_tFileInputExcel_3.hasNext()) {
						int emptyColumnCount_tFileInputExcel_3 = 0;

						if (limit_tFileInputExcel_3 != -1
								&& nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
							excelReader_tFileInputExcel_3.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_3 = excelReader_tFileInputExcel_3
								.next();
						row7 = null;
						int tempRowLength_tFileInputExcel_3 = 15;

						int columnIndex_tFileInputExcel_3 = 0;

						String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];

						for (int i_tFileInputExcel_3 = 0; i_tFileInputExcel_3 < tempRowLength_tFileInputExcel_3; i_tFileInputExcel_3++) {
							int current_tFileInputExcel_3 = i_tFileInputExcel_3
									+ start_column_tFileInputExcel_3;
							if (current_tFileInputExcel_3 <= actual_end_column_tFileInputExcel_3) {
								if (current_tFileInputExcel_3 < row_tFileInputExcel_3
										.size()) {
									String column_tFileInputExcel_3 = row_tFileInputExcel_3
											.get(current_tFileInputExcel_3);
									if (column_tFileInputExcel_3 != null) {
										temp_row_tFileInputExcel_3[i_tFileInputExcel_3] = column_tFileInputExcel_3;
									} else {
										temp_row_tFileInputExcel_3[i_tFileInputExcel_3] = "";
									}
								} else {
									temp_row_tFileInputExcel_3[i_tFileInputExcel_3] = "";
								}
							} else {
								temp_row_tFileInputExcel_3[i_tFileInputExcel_3] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_3 = false;
						row7 = new row7Struct();
						int curColNum_tFileInputExcel_3 = -1;
						String curColName_tFileInputExcel_3 = "";

						try {
							columnIndex_tFileInputExcel_3 = 0;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "variant_region_id";

								row7.variant_region_id = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.variant_region_id = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 1;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "variant_region_type";

								row7.variant_region_type = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.variant_region_type = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 2;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "assertion_method";

								row7.assertion_method = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.assertion_method = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 3;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "assembly";

								row7.assembly = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.assembly = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 4;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "chr";

								row7.chr = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.chr = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 5;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "contig";

								row7.contig = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.contig = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 6;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "outer_start";

								row7.outer_start = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.outer_start = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 7;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "start";

								row7.start = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.start = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 8;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "inner_start";

								row7.inner_start = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.inner_start = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 9;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "inner_stop";

								row7.inner_stop = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.inner_stop = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 10;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "stop";

								row7.stop = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.stop = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 11;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "outer_stop";

								row7.outer_stop = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.outer_stop = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 12;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "supporting_variant_call_ids";

								row7.supporting_variant_call_ids = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.supporting_variant_call_ids = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 13;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "supporting_variant_region_ids";

								row7.supporting_variant_region_ids = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.supporting_variant_region_ids = null;
								emptyColumnCount_tFileInputExcel_3++;
							}
							columnIndex_tFileInputExcel_3 = 14;

							if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
										+ start_column_tFileInputExcel_3 + 1;
								curColName_tFileInputExcel_3 = "description";

								row7.description = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3]
										.trim();
							} else {
								row7.description = null;
								emptyColumnCount_tFileInputExcel_3++;
							}

							nb_line_tFileInputExcel_3++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_3 = true;
							System.err.println(e.getMessage());
							row7 = null;
						}

						/**
						 * [tFileInputExcel_3 begin ] stop
						 */

						/**
						 * [tFileInputExcel_3 main ] start
						 */

						currentComponent = "tFileInputExcel_3";

						tos_count_tFileInputExcel_3++;

						/**
						 * [tFileInputExcel_3 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tFileOutputExcel_3 main ] start
							 */

							currentComponent = "tFileOutputExcel_3";

							xlsxTool_tFileOutputExcel_3.addRow();

							if (row7.variant_region_id != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.variant_region_id));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.variant_region_type != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.variant_region_type));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.assertion_method != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.assertion_method));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.assembly != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.assembly));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.chr != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.chr));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.contig != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.contig));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.outer_start != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.outer_start));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.start != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.start));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.inner_start != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.inner_start));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.inner_stop != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.inner_stop));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.stop != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.stop));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.outer_stop != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.outer_stop));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.supporting_variant_call_ids != null) {

								xlsxTool_tFileOutputExcel_3
										.addCellValue(String
												.valueOf(row7.supporting_variant_call_ids));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.supporting_variant_region_ids != null) {

								xlsxTool_tFileOutputExcel_3
										.addCellValue(String
												.valueOf(row7.supporting_variant_region_ids));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							if (row7.description != null) {

								xlsxTool_tFileOutputExcel_3.addCellValue(String
										.valueOf(row7.description));
							} else {
								xlsxTool_tFileOutputExcel_3.addCellNullValue();
							}

							nb_line_tFileOutputExcel_3++;

							tos_count_tFileOutputExcel_3++;

							/**
							 * [tFileOutputExcel_3 main ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputExcel_3 end ] start
						 */

						currentComponent = "tFileInputExcel_3";

					}

					try {
						if (excelReader_tFileInputExcel_3 != null) {
							excelReader_tFileInputExcel_3.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_3) {
						if (!(e_tFileInputExcel_3.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_3.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_3_NB_LINE",
							nb_line_tFileInputExcel_3);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tFileOutputExcel_3 end ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				xlsxTool_tFileOutputExcel_3.writeExcel(
						fileName_tFileOutputExcel_3, true);

				globalMap.put("tFileOutputExcel_3_NB_LINE",
						nb_line_tFileOutputExcel_3);

				ok_Hash.put("tFileOutputExcel_3", true);
				end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_3 finally ] start
				 */

				currentComponent = "tFileOutputExcel_3";

				/**
				 * [tFileOutputExcel_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String subject_taxonomy_scientific_name;

		public String getSubject_taxonomy_scientific_name() {
			return this.subject_taxonomy_scientific_name;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.subject_taxonomy_scientific_name = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.subject_taxonomy_scientific_name, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",subject_taxonomy_scientific_name="
					+ subject_taxonomy_scientific_name);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								"US-ASCII"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("sample_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("biosample_accession");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_taxonomy_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1
							.write("subject_taxonomy_scientific_name");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sampleset_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sample_resource");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sample_cell_type");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sample_cancer");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sample_attribute");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("sample_karyotype");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_collection");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_phenotype");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_population");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_karyotype");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_sex");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_age");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_age_units");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_maternal_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("subject_paternal_id");
					outtFileOutputDelimited_1
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				Object source_tFileInputExcel_2 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof java.io.InputStream
						|| source_tFileInputExcel_2 instanceof String) {
					excelReader_tFileInputExcel_2 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_2
							.addSheetName("SAMPLES", false);
					int start_column_tFileInputExcel_2 = 1 - 1;
					int end_column_tFileInputExcel_2 = 19 - 1;
					if (start_column_tFileInputExcel_2 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_2 = start_column_tFileInputExcel_2 + 20 - 1;

					} else if (end_column_tFileInputExcel_2 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 - 20 + 1;
					}

					if (end_column_tFileInputExcel_2 < 0
							|| start_column_tFileInputExcel_2 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2;

					int header_tFileInputExcel_2 = 4;
					int limit_tFileInputExcel_2 = 50;

					int nb_line_tFileInputExcel_2 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_2 instanceof String) {
						excelReader_tFileInputExcel_2.parse(
								(String) source_tFileInputExcel_2, "UTF-8");
					} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_2.parse(
								(java.io.InputStream) source_tFileInputExcel_2,
								"UTF-8");
					}

					while ((header_tFileInputExcel_2--) > 0
							&& excelReader_tFileInputExcel_2.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_2.next();
					}

					while (excelReader_tFileInputExcel_2.hasNext()) {
						int emptyColumnCount_tFileInputExcel_2 = 0;

						if (limit_tFileInputExcel_2 != -1
								&& nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
							excelReader_tFileInputExcel_2.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_2 = excelReader_tFileInputExcel_2
								.next();
						row4 = null;
						int tempRowLength_tFileInputExcel_2 = 20;

						int columnIndex_tFileInputExcel_2 = 0;

						String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];

						for (int i_tFileInputExcel_2 = 0; i_tFileInputExcel_2 < tempRowLength_tFileInputExcel_2; i_tFileInputExcel_2++) {
							int current_tFileInputExcel_2 = i_tFileInputExcel_2
									+ start_column_tFileInputExcel_2;
							if (current_tFileInputExcel_2 <= actual_end_column_tFileInputExcel_2) {
								if (current_tFileInputExcel_2 < row_tFileInputExcel_2
										.size()) {
									String column_tFileInputExcel_2 = row_tFileInputExcel_2
											.get(current_tFileInputExcel_2);
									if (column_tFileInputExcel_2 != null) {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = column_tFileInputExcel_2;
									} else {
										temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
									}
								} else {
									temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
								}
							} else {
								temp_row_tFileInputExcel_2[i_tFileInputExcel_2] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_2 = false;
						row4 = new row4Struct();
						int curColNum_tFileInputExcel_2 = -1;
						String curColName_tFileInputExcel_2 = "";

						try {
							columnIndex_tFileInputExcel_2 = 0;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_id";

								row4.sample_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 1;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "biosample_accession";

								row4.biosample_accession = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.biosample_accession = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 2;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_id";

								row4.subject_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 3;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_taxonomy_id";

								row4.subject_taxonomy_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_taxonomy_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 4;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_taxonomy_scientific_name";

								row4.subject_taxonomy_scientific_name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_taxonomy_scientific_name = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 5;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sampleset_id";

								row4.sampleset_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sampleset_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 6;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_resource";

								row4.sample_resource = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_resource = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 7;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_cell_type";

								row4.sample_cell_type = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_cell_type = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 8;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_cancer";

								row4.sample_cancer = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_cancer = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 9;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_attribute";

								row4.sample_attribute = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_attribute = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 10;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "sample_karyotype";

								row4.sample_karyotype = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.sample_karyotype = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 11;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_collection";

								row4.subject_collection = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_collection = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 12;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_phenotype";

								row4.subject_phenotype = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_phenotype = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 13;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_population";

								row4.subject_population = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_population = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 14;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_karyotype";

								row4.subject_karyotype = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_karyotype = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 15;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_sex";

								row4.subject_sex = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_sex = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 16;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_age";

								row4.subject_age = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_age = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 17;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_age_units";

								row4.subject_age_units = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_age_units = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 18;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_maternal_id";

								row4.subject_maternal_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_maternal_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}
							columnIndex_tFileInputExcel_2 = 19;

							if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
										+ start_column_tFileInputExcel_2 + 1;
								curColName_tFileInputExcel_2 = "subject_paternal_id";

								row4.subject_paternal_id = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2]
										.trim();
							} else {
								row4.subject_paternal_id = null;
								emptyColumnCount_tFileInputExcel_2++;
							}

							nb_line_tFileInputExcel_2++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_2 = true;
							System.err.println(e.getMessage());
							row4 = null;
						}

						/**
						 * [tFileInputExcel_2 begin ] stop
						 */

						/**
						 * [tFileInputExcel_2 main ] start
						 */

						currentComponent = "tFileInputExcel_2";

						tos_count_tFileInputExcel_2++;

						/**
						 * [tFileInputExcel_2 main ] stop
						 */
						// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row4.sample_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.biosample_accession != null) {
								sb_tFileOutputDelimited_1
										.append(row4.biosample_accession);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_taxonomy_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_taxonomy_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_taxonomy_scientific_name != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_taxonomy_scientific_name);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sampleset_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sampleset_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sample_resource != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_resource);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sample_cell_type != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_cell_type);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sample_cancer != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_cancer);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sample_attribute != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_attribute);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.sample_karyotype != null) {
								sb_tFileOutputDelimited_1
										.append(row4.sample_karyotype);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_collection != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_collection);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_phenotype != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_phenotype);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_population != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_population);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_karyotype != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_karyotype);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_sex != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_sex);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_age != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_age);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_age_units != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_age_units);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_maternal_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_maternal_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_tFileOutputDelimited_1);
							if (row4.subject_paternal_id != null) {
								sb_tFileOutputDelimited_1
										.append(row4.subject_paternal_id);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputExcel_2 end ] start
						 */

						currentComponent = "tFileInputExcel_2";

					}

					try {
						if (excelReader_tFileInputExcel_2 != null) {
							excelReader_tFileInputExcel_2.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_2) {
						if (!(e_tFileInputExcel_2.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_2.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_2_NB_LINE",
							nb_line_tFileInputExcel_2);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				tFileInputFullRow_2Process(globalMap);

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements
			routines.system.IPersistableRow<row32Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row32Struct row32 = new row32Struct();

				/**
				 * [tFileOutputDelimited_10 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_10", false);
				start_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_10";

				int tos_count_tFileOutputDelimited_10 = 0;

				String fileName_tFileOutputDelimited_10 = "";
				fileName_tFileOutputDelimited_10 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_10 = null;
				String extension_tFileOutputDelimited_10 = null;
				String directory_tFileOutputDelimited_10 = null;
				if ((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
							.substring(0, fileName_tFileOutputDelimited_10
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(0, fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
						extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10
								.substring(fileName_tFileOutputDelimited_10
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
						extension_tFileOutputDelimited_10 = "";
					}
					directory_tFileOutputDelimited_10 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_10 = true;
				java.io.File filetFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",
						fileName_tFileOutputDelimited_10);
				int nb_line_tFileOutputDelimited_10 = 0;
				int splitEvery_tFileOutputDelimited_10 = 1000;
				int splitedFileNo_tFileOutputDelimited_10 = 0;
				int currentRow_tFileOutputDelimited_10 = 0;

				final String OUT_DELIM_tFileOutputDelimited_10 = /**
				 * Start field
				 * tFileOutputDelimited_10:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /**
				 * Start
				 * field tFileOutputDelimited_10:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_10 != null
						&& directory_tFileOutputDelimited_10.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_10 = new java.io.File(
							directory_tFileOutputDelimited_10);
					if (!dir_tFileOutputDelimited_10.exists()) {
						dir_tFileOutputDelimited_10.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_10 = null;

				java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(
						fileName_tFileOutputDelimited_10);
				if (fileToDelete_tFileOutputDelimited_10.exists()) {
					fileToDelete_tFileOutputDelimited_10.delete();
				}
				outtFileOutputDelimited_10 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_10, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_10",
						outtFileOutputDelimited_10);
				resourceMap.put("nb_line_tFileOutputDelimited_10",
						nb_line_tFileOutputDelimited_10);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_10",
						isFileGenerated_tFileOutputDelimited_10);
				resourceMap.put("filetFileOutputDelimited_10",
						filetFileOutputDelimited_10);

				/**
				 * [tFileOutputDelimited_10 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_2 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_2", false);
				start_Hash.put("tFileInputFullRow_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_2";

				int tos_count_tFileInputFullRow_2 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_2 = null;

				try {// }
					fid_tFileInputFullRow_2 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_2.nextRecord()) {// }
						row1 = null;
						boolean whetherReject_tFileInputFullRow_2 = false;
						row1 = new row1Struct();
						row1.line = fid_tFileInputFullRow_2.get(0);

						/**
						 * [tFileInputFullRow_2 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_2 main ] start
						 */

						currentComponent = "tFileInputFullRow_2";

						tos_count_tFileInputFullRow_2++;

						/**
						 * [tFileInputFullRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						row32 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2(
								"&&");
						ope_tFilterRow_2.matches((!row1.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row32 == null) {
								row32 = new row32Struct();
							}
							row32.line = row1.line;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */
						// Start of branch "row32"
						if (row32 != null) {

							/**
							 * [tFileOutputDelimited_10 main ] start
							 */

							currentComponent = "tFileOutputDelimited_10";

							StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
							if (row32.line != null) {
								sb_tFileOutputDelimited_10.append(row32.line);
							}
							sb_tFileOutputDelimited_10
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);

							nb_line_tFileOutputDelimited_10++;
							resourceMap.put("nb_line_tFileOutputDelimited_10",
									nb_line_tFileOutputDelimited_10);

							outtFileOutputDelimited_10
									.write(sb_tFileOutputDelimited_10
											.toString());

							tos_count_tFileOutputDelimited_10++;

							/**
							 * [tFileOutputDelimited_10 main ] stop
							 */

						} // End of branch "row32"

						/**
						 * [tFileInputFullRow_2 end ] start
						 */

						currentComponent = "tFileInputFullRow_2";

					}
				} finally {
					if (fid_tFileInputFullRow_2 != null) {
						fid_tFileInputFullRow_2.close();
					}
				}
				globalMap.put("tFileInputFullRow_2_NB_LINE",
						fid_tFileInputFullRow_2.getRowNumber());

				ok_Hash.put("tFileInputFullRow_2", true);
				end_Hash.put("tFileInputFullRow_2", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_2 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK",
						nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_2);

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 end ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (outtFileOutputDelimited_10 != null) {
					outtFileOutputDelimited_10.flush();
					outtFileOutputDelimited_10.close();
				}

				globalMap.put("tFileOutputDelimited_10_NB_LINE",
						nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",
						fileName_tFileOutputDelimited_10);

				if (isFileGenerated_tFileOutputDelimited_10
						&& nb_line_tFileOutputDelimited_10 == 0) {

					filetFileOutputDelimited_10.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_10", true);

				ok_Hash.put("tFileOutputDelimited_10", true);
				end_Hash.put("tFileOutputDelimited_10",
						System.currentTimeMillis());

				tFileInputDelimited_4Process(globalMap);

				/**
				 * [tFileOutputDelimited_10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_2 finally ] start
				 */

				currentComponent = "tFileInputFullRow_2";

				/**
				 * [tFileInputFullRow_2 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_10 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_10";

				if (resourceMap.get("finish_tFileOutputDelimited_10") == null) {

					java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_10");
					if (outtFileOutputDelimited_10 != null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_10")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_10"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_10")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_2_SUBPROCESS_STATE", 1);
	}

	public static class row33Struct implements
			routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements
			routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String biosample_accession;

		public String getBiosample_accession() {
			return this.biosample_accession;
		}

		public String subject_id;

		public String getSubject_id() {
			return this.subject_id;
		}

		public String subject_taxonomy_id;

		public String getSubject_taxonomy_id() {
			return this.subject_taxonomy_id;
		}

		public String subject_taxonomy_scientific_name;

		public String getSubject_taxonomy_scientific_name() {
			return this.subject_taxonomy_scientific_name;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sample_resource;

		public String getSample_resource() {
			return this.sample_resource;
		}

		public String sample_cell_type;

		public String getSample_cell_type() {
			return this.sample_cell_type;
		}

		public String sample_cancer;

		public String getSample_cancer() {
			return this.sample_cancer;
		}

		public String sample_attribute;

		public String getSample_attribute() {
			return this.sample_attribute;
		}

		public String sample_karyotype;

		public String getSample_karyotype() {
			return this.sample_karyotype;
		}

		public String subject_collection;

		public String getSubject_collection() {
			return this.subject_collection;
		}

		public String subject_phenotype;

		public String getSubject_phenotype() {
			return this.subject_phenotype;
		}

		public String subject_population;

		public String getSubject_population() {
			return this.subject_population;
		}

		public String subject_karyotype;

		public String getSubject_karyotype() {
			return this.subject_karyotype;
		}

		public String subject_sex;

		public String getSubject_sex() {
			return this.subject_sex;
		}

		public String subject_age;

		public String getSubject_age() {
			return this.subject_age;
		}

		public String subject_age_units;

		public String getSubject_age_units() {
			return this.subject_age_units;
		}

		public String subject_maternal_id;

		public String getSubject_maternal_id() {
			return this.subject_maternal_id;
		}

		public String subject_paternal_id;

		public String getSubject_paternal_id() {
			return this.subject_paternal_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sample_id = readString(dis);

					this.biosample_accession = readString(dis);

					this.subject_id = readString(dis);

					this.subject_taxonomy_id = readString(dis);

					this.subject_taxonomy_scientific_name = readString(dis);

					this.sampleset_id = readString(dis);

					this.sample_resource = readString(dis);

					this.sample_cell_type = readString(dis);

					this.sample_cancer = readString(dis);

					this.sample_attribute = readString(dis);

					this.sample_karyotype = readString(dis);

					this.subject_collection = readString(dis);

					this.subject_phenotype = readString(dis);

					this.subject_population = readString(dis);

					this.subject_karyotype = readString(dis);

					this.subject_sex = readString(dis);

					this.subject_age = readString(dis);

					this.subject_age_units = readString(dis);

					this.subject_maternal_id = readString(dis);

					this.subject_paternal_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.biosample_accession, dos);

				// String

				writeString(this.subject_id, dos);

				// String

				writeString(this.subject_taxonomy_id, dos);

				// String

				writeString(this.subject_taxonomy_scientific_name, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sample_resource, dos);

				// String

				writeString(this.sample_cell_type, dos);

				// String

				writeString(this.sample_cancer, dos);

				// String

				writeString(this.sample_attribute, dos);

				// String

				writeString(this.sample_karyotype, dos);

				// String

				writeString(this.subject_collection, dos);

				// String

				writeString(this.subject_phenotype, dos);

				// String

				writeString(this.subject_population, dos);

				// String

				writeString(this.subject_karyotype, dos);

				// String

				writeString(this.subject_sex, dos);

				// String

				writeString(this.subject_age, dos);

				// String

				writeString(this.subject_age_units, dos);

				// String

				writeString(this.subject_maternal_id, dos);

				// String

				writeString(this.subject_paternal_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sample_id=" + sample_id);
			sb.append(",biosample_accession=" + biosample_accession);
			sb.append(",subject_id=" + subject_id);
			sb.append(",subject_taxonomy_id=" + subject_taxonomy_id);
			sb.append(",subject_taxonomy_scientific_name="
					+ subject_taxonomy_scientific_name);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sample_resource=" + sample_resource);
			sb.append(",sample_cell_type=" + sample_cell_type);
			sb.append(",sample_cancer=" + sample_cancer);
			sb.append(",sample_attribute=" + sample_attribute);
			sb.append(",sample_karyotype=" + sample_karyotype);
			sb.append(",subject_collection=" + subject_collection);
			sb.append(",subject_phenotype=" + subject_phenotype);
			sb.append(",subject_population=" + subject_population);
			sb.append(",subject_karyotype=" + subject_karyotype);
			sb.append(",subject_sex=" + subject_sex);
			sb.append(",subject_age=" + subject_age);
			sb.append(",subject_age_units=" + subject_age_units);
			sb.append(",subject_maternal_id=" + subject_maternal_id);
			sb.append(",subject_paternal_id=" + subject_paternal_id);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				row34Struct row34 = new row34Struct();
				row21Struct row21 = new row21Struct();
				row20Struct row20 = new row20Struct();
				row33Struct row33 = new row33Struct();

				/**
				 * [tFileOutputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_2", false);
				start_Hash
						.put("tFileOutputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_2";

				int tos_count_tFileOutputExcel_2 = 0;

				int columnIndex_tFileOutputExcel_2 = 0;

				String fileName_tFileOutputExcel_2 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_2 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_2.setSheet("SAMPLES");
				xlsxTool_tFileOutputExcel_2.setAppend(true, true);
				xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_2.setXY(true, 0, 4, true);

				xlsxTool_tFileOutputExcel_2
						.prepareXlsxFile(fileName_tFileOutputExcel_2);

				xlsxTool_tFileOutputExcel_2.setFont("");

				/**
				 * [tFileOutputExcel_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						context.workdir + "/bad/samples.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
							.substring(0, fileName_tFileOutputDelimited_5
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(0, fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitEvery_tFileOutputDelimited_5 = 1000;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /**
				 * Start field
				 * tFileOutputDelimited_5:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
				 * Start
				 * field tFileOutputDelimited_5:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null
						&& directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(
							directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(
						fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_5, false),
								context.encoding));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("sample_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("biosample_accession");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_taxonomy_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sampleset_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sample_resource");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sample_cell_type");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sample_cancer");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sample_attribute");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("sample_karyotype");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_collection");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_phenotype");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_population");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_karyotype");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_sex");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_age");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_age_units");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_maternal_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("subject_paternal_id");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("errorMessage");
					outtFileOutputDelimited_5
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5",
						outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5",
						nb_line_tFileOutputDelimited_5);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_5",
						isFileGenerated_tFileOutputDelimited_5);
				resourceMap.put("filetFileOutputDelimited_5",
						filetFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tFilterColumns_7 begin ] start
				 */

				ok_Hash.put("tFilterColumns_7", false);
				start_Hash.put("tFilterColumns_7", System.currentTimeMillis());

				currentComponent = "tFilterColumns_7";

				int tos_count_tFilterColumns_7 = 0;

				int nb_line_tFilterColumns_7 = 0;

				/**
				 * [tFilterColumns_7 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_2 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_2", false);
				start_Hash.put("tSchemaComplianceCheck_2",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_2";

				int tos_count_tSchemaComplianceCheck_2 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_2 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row34Struct row34) {
						// validate nullable (empty as null)
						if ((row34.sample_id == null)
								|| ("".equals(row34.sample_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row34.sample_id != null) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_id != null) {
							if (row34.sample_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_id:");
						errorMessageThrough = "";
						try {
							if (row34.biosample_accession != null
									&& (!"".equals(row34.biosample_accession))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.biosample_accession);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.biosample_accession != null
								&& (!"".equals(row34.biosample_accession))) {
							if (row34.biosample_accession.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"biosample_accession:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row34.subject_id == null)
								|| ("".equals(row34.subject_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row34.subject_id != null) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_id != null) {
							if (row34.subject_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row34.subject_taxonomy_id == null)
								|| ("".equals(row34.subject_taxonomy_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row34.subject_taxonomy_id != null) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_taxonomy_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_taxonomy_id != null) {
							if (row34.subject_taxonomy_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_taxonomy_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row34.sampleset_id == null)
								|| ("".equals(row34.sampleset_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row34.sampleset_id != null) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sampleset_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sampleset_id != null) {
							if (row34.sampleset_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_id:");
						errorMessageThrough = "";
						try {
							if (row34.sample_resource != null
									&& (!"".equals(row34.sample_resource))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_resource);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_resource != null
								&& (!"".equals(row34.sample_resource))) {
							if (row34.sample_resource.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_resource:");
						errorMessageThrough = "";
						try {
							if (row34.sample_cell_type != null
									&& (!"".equals(row34.sample_cell_type))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_cell_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_cell_type != null
								&& (!"".equals(row34.sample_cell_type))) {
							if (row34.sample_cell_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_cell_type:");
						errorMessageThrough = "";
						try {
							if (row34.sample_cancer != null
									&& (!"".equals(row34.sample_cancer))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_cancer);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_cancer != null
								&& (!"".equals(row34.sample_cancer))) {
							if (row34.sample_cancer.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_cancer:");
						errorMessageThrough = "";
						try {
							if (row34.sample_attribute != null
									&& (!"".equals(row34.sample_attribute))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_attribute);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_attribute != null
								&& (!"".equals(row34.sample_attribute))) {
							if (row34.sample_attribute.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_attribute:");
						errorMessageThrough = "";
						try {
							if (row34.sample_karyotype != null
									&& (!"".equals(row34.sample_karyotype))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.sample_karyotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.sample_karyotype != null
								&& (!"".equals(row34.sample_karyotype))) {
							if (row34.sample_karyotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_karyotype:");
						errorMessageThrough = "";
						try {
							if (row34.subject_collection != null
									&& (!"".equals(row34.subject_collection))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_collection);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_collection != null
								&& (!"".equals(row34.subject_collection))) {
							if (row34.subject_collection.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_collection:");
						errorMessageThrough = "";
						try {
							if (row34.subject_phenotype != null
									&& (!"".equals(row34.subject_phenotype))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_phenotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_phenotype != null
								&& (!"".equals(row34.subject_phenotype))) {
							if (row34.subject_phenotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_phenotype:");
						errorMessageThrough = "";
						try {
							if (row34.subject_population != null
									&& (!"".equals(row34.subject_population))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_population);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_population != null
								&& (!"".equals(row34.subject_population))) {
							if (row34.subject_population.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_population:");
						errorMessageThrough = "";
						try {
							if (row34.subject_karyotype != null
									&& (!"".equals(row34.subject_karyotype))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_karyotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_karyotype != null
								&& (!"".equals(row34.subject_karyotype))) {
							if (row34.subject_karyotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_karyotype:");
						errorMessageThrough = "";
						try {
							if (row34.subject_sex != null
									&& (!"".equals(row34.subject_sex))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_sex);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_sex != null
								&& (!"".equals(row34.subject_sex))) {
							if (row34.subject_sex.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_sex:");
						errorMessageThrough = "";
						try {
							if (row34.subject_age != null
									&& (!"".equals(row34.subject_age))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_age);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_age != null
								&& (!"".equals(row34.subject_age))) {
							if (row34.subject_age.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_age:");
						errorMessageThrough = "";
						try {
							if (row34.subject_age_units != null
									&& (!"".equals(row34.subject_age_units))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_age_units);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_age_units != null
								&& (!"".equals(row34.subject_age_units))) {
							if (row34.subject_age_units.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_age_units:");
						errorMessageThrough = "";
						try {
							if (row34.subject_maternal_id != null
									&& (!"".equals(row34.subject_maternal_id))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_maternal_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_maternal_id != null
								&& (!"".equals(row34.subject_maternal_id))) {
							if (row34.subject_maternal_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_maternal_id:");
						errorMessageThrough = "";
						try {
							if (row34.subject_paternal_id != null
									&& (!"".equals(row34.subject_paternal_id))) {
								String tester_tSchemaComplianceCheck_2 = String
										.valueOf(row34.subject_paternal_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row34.subject_paternal_id != null
								&& (!"".equals(row34.subject_paternal_id))) {
							if (row34.subject_paternal_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"subject_paternal_id:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_2 rsvUtil_tSchemaComplianceCheck_2 = new RowSetValueUtil_tSchemaComplianceCheck_2();

				/**
				 * [tSchemaComplianceCheck_2 begin ] stop
				 */

				/**
				 * [tFilterColumns_8 begin ] start
				 */

				ok_Hash.put("tFilterColumns_8", false);
				start_Hash.put("tFilterColumns_8", System.currentTimeMillis());

				currentComponent = "tFilterColumns_8";

				int tos_count_tFilterColumns_8 = 0;

				int nb_line_tFilterColumns_8 = 0;

				/**
				 * [tFilterColumns_8 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.workdir + "/tmp/temp2.tmp"/**
				 * End field
				 * tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									"US-ASCII");
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													"US-ASCII")),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										"US-ASCII");
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														"US-ASCII")),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row19 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row19 = new row19Struct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row19.sample_id = null;

								row19.biosample_accession = null;

								row19.subject_id = null;

								row19.subject_taxonomy_id = null;

								row19.subject_taxonomy_scientific_name = null;

								row19.sampleset_id = null;

								row19.sample_resource = null;

								row19.sample_cell_type = null;

								row19.sample_cancer = null;

								row19.sample_attribute = null;

								row19.sample_karyotype = null;

								row19.subject_collection = null;

								row19.subject_phenotype = null;

								row19.subject_population = null;

								row19.subject_karyotype = null;

								row19.subject_sex = null;

								row19.subject_age = null;

								row19.subject_age_units = null;

								row19.subject_maternal_id = null;

								row19.subject_paternal_id = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_id = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.biosample_accession = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.biosample_accession = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_id = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_taxonomy_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_taxonomy_id = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_taxonomy_scientific_name = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_taxonomy_scientific_name = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sampleset_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sampleset_id = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_resource = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_resource = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_cell_type = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_cell_type = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_cancer = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_cancer = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_attribute = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_attribute = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.sample_karyotype = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.sample_karyotype = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_collection = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_collection = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_phenotype = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_phenotype = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_population = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_population = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_karyotype = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_karyotype = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 15;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_sex = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_sex = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 16;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_age = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_age = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 17;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_age_units = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_age_units = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 18;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_maternal_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_maternal_id = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 19;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row19.subject_paternal_id = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row19.subject_paternal_id = null;
								}

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row19 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row19"
						if (row19 != null) {
							row20 = null;

							/**
							 * [tFilterColumns_8 main ] start
							 */

							currentComponent = "tFilterColumns_8";

							row34.sample_id = row19.sample_id;

							row34.biosample_accession = row19.biosample_accession;

							row34.subject_id = row19.subject_id;

							row34.subject_taxonomy_id = row19.subject_taxonomy_id;

							row34.sampleset_id = row19.sampleset_id;

							row34.sample_resource = row19.sample_resource;

							row34.sample_cell_type = row19.sample_cell_type;

							row34.sample_cancer = row19.sample_cancer;

							row34.sample_attribute = row19.sample_attribute;

							row34.sample_karyotype = row19.sample_karyotype;

							row34.subject_collection = row19.subject_collection;

							row34.subject_phenotype = row19.subject_phenotype;

							row34.subject_population = row19.subject_population;

							row34.subject_karyotype = row19.subject_karyotype;

							row34.subject_sex = row19.subject_sex;

							row34.subject_age = row19.subject_age;

							row34.subject_age_units = row19.subject_age_units;

							row34.subject_maternal_id = row19.subject_maternal_id;

							row34.subject_paternal_id = row19.subject_paternal_id;

							nb_line_tFilterColumns_8++;

							tos_count_tFilterColumns_8++;

							/**
							 * [tFilterColumns_8 main ] stop
							 */

							/**
							 * [tSchemaComplianceCheck_2 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_2";

							row21 = null;
							row20 = null;
							rsvUtil_tSchemaComplianceCheck_2
									.setRowValue_0(row34);
							if (rsvUtil_tSchemaComplianceCheck_2.ifPassedThrough) {
								row21 = new row21Struct();
								row21.sample_id = row34.sample_id;
								row21.biosample_accession = row34.biosample_accession;
								row21.subject_id = row34.subject_id;
								row21.subject_taxonomy_id = row34.subject_taxonomy_id;
								row21.sampleset_id = row34.sampleset_id;
								row21.sample_resource = row34.sample_resource;
								row21.sample_cell_type = row34.sample_cell_type;
								row21.sample_cancer = row34.sample_cancer;
								row21.sample_attribute = row34.sample_attribute;
								row21.sample_karyotype = row34.sample_karyotype;
								row21.subject_collection = row34.subject_collection;
								row21.subject_phenotype = row34.subject_phenotype;
								row21.subject_population = row34.subject_population;
								row21.subject_karyotype = row34.subject_karyotype;
								row21.subject_sex = row34.subject_sex;
								row21.subject_age = row34.subject_age;
								row21.subject_age_units = row34.subject_age_units;
								row21.subject_maternal_id = row34.subject_maternal_id;
								row21.subject_paternal_id = row34.subject_paternal_id;
							}
							if (!rsvUtil_tSchemaComplianceCheck_2.ifPassedThrough) {
								row20 = new row20Struct();
								row20.sample_id = row34.sample_id;
								row20.biosample_accession = row34.biosample_accession;
								row20.subject_id = row34.subject_id;
								row20.subject_taxonomy_id = row34.subject_taxonomy_id;
								row20.sampleset_id = row34.sampleset_id;
								row20.sample_resource = row34.sample_resource;
								row20.sample_cell_type = row34.sample_cell_type;
								row20.sample_cancer = row34.sample_cancer;
								row20.sample_attribute = row34.sample_attribute;
								row20.sample_karyotype = row34.sample_karyotype;
								row20.subject_collection = row34.subject_collection;
								row20.subject_phenotype = row34.subject_phenotype;
								row20.subject_population = row34.subject_population;
								row20.subject_karyotype = row34.subject_karyotype;
								row20.subject_sex = row34.subject_sex;
								row20.subject_age = row34.subject_age;
								row20.subject_age_units = row34.subject_age_units;
								row20.subject_maternal_id = row34.subject_maternal_id;
								row20.subject_paternal_id = row34.subject_paternal_id;
								row20.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_2.resultErrorCodeThrough);
								row20.errorMessage = rsvUtil_tSchemaComplianceCheck_2.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_2.reset();

							tos_count_tSchemaComplianceCheck_2++;

							/**
							 * [tSchemaComplianceCheck_2 main ] stop
							 */
							// Start of branch "row21"
							if (row21 != null) {

								/**
								 * [tFileOutputExcel_2 main ] start
								 */

								currentComponent = "tFileOutputExcel_2";

								xlsxTool_tFileOutputExcel_2.addRow();

								if (row21.sample_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.biosample_accession != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.biosample_accession));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_taxonomy_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_taxonomy_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sampleset_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sampleset_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sample_resource != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_resource));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sample_cell_type != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_cell_type));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sample_cancer != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_cancer));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sample_attribute != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_attribute));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.sample_karyotype != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.sample_karyotype));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_collection != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_collection));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_phenotype != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_phenotype));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_population != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_population));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_karyotype != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_karyotype));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_sex != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_sex));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_age != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_age));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_age_units != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_age_units));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_maternal_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_maternal_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								if (row21.subject_paternal_id != null) {

									xlsxTool_tFileOutputExcel_2
											.addCellValue(String
													.valueOf(row21.subject_paternal_id));
								} else {
									xlsxTool_tFileOutputExcel_2
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_2++;

								tos_count_tFileOutputExcel_2++;

								/**
								 * [tFileOutputExcel_2 main ] stop
								 */

							} // End of branch "row21"

							// Start of branch "row20"
							if (row20 != null) {

								/**
								 * [tFilterColumns_7 main ] start
								 */

								currentComponent = "tFilterColumns_7";

								row33.sample_id = row20.sample_id;

								row33.biosample_accession = row20.biosample_accession;

								row33.subject_id = row20.subject_id;

								row33.subject_taxonomy_id = row20.subject_taxonomy_id;

								row33.sampleset_id = row20.sampleset_id;

								row33.sample_resource = row20.sample_resource;

								row33.sample_cell_type = row20.sample_cell_type;

								row33.sample_cancer = row20.sample_cancer;

								row33.sample_attribute = row20.sample_attribute;

								row33.sample_karyotype = row20.sample_karyotype;

								row33.subject_collection = row20.subject_collection;

								row33.subject_phenotype = row20.subject_phenotype;

								row33.subject_population = row20.subject_population;

								row33.subject_karyotype = row20.subject_karyotype;

								row33.subject_sex = row20.subject_sex;

								row33.subject_age = row20.subject_age;

								row33.subject_age_units = row20.subject_age_units;

								row33.subject_maternal_id = row20.subject_maternal_id;

								row33.subject_paternal_id = row20.subject_paternal_id;

								row33.errorMessage = row20.errorMessage;

								nb_line_tFilterColumns_7++;

								tos_count_tFilterColumns_7++;

								/**
								 * [tFilterColumns_7 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_5 main ] start
								 */

								currentComponent = "tFileOutputDelimited_5";

								StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
								if (row33.sample_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.biosample_accession != null) {
									sb_tFileOutputDelimited_5
											.append(row33.biosample_accession);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_taxonomy_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_taxonomy_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sampleset_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sampleset_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sample_resource != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_resource);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sample_cell_type != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_cell_type);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sample_cancer != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_cancer);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sample_attribute != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_attribute);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.sample_karyotype != null) {
									sb_tFileOutputDelimited_5
											.append(row33.sample_karyotype);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_collection != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_collection);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_phenotype != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_phenotype);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_population != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_population);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_karyotype != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_karyotype);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_sex != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_sex);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_age != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_age);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_age_units != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_age_units);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_maternal_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_maternal_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.subject_paternal_id != null) {
									sb_tFileOutputDelimited_5
											.append(row33.subject_paternal_id);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_tFileOutputDelimited_5);
								if (row33.errorMessage != null) {
									sb_tFileOutputDelimited_5
											.append(row33.errorMessage);
								}
								sb_tFileOutputDelimited_5
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

								nb_line_tFileOutputDelimited_5++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_5",
										nb_line_tFileOutputDelimited_5);

								outtFileOutputDelimited_5
										.write(sb_tFileOutputDelimited_5
												.toString());

								tos_count_tFileOutputDelimited_5++;

								/**
								 * [tFileOutputDelimited_5 main ] stop
								 */

							} // End of branch "row20"

						} // End of branch "row19"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tFilterColumns_8 end ] start
				 */

				currentComponent = "tFilterColumns_8";

				globalMap.put("tFilterColumns_8_NB_LINE",
						nb_line_tFilterColumns_8);

				ok_Hash.put("tFilterColumns_8", true);
				end_Hash.put("tFilterColumns_8", System.currentTimeMillis());

				/**
				 * [tFilterColumns_8 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_2 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_2";

				ok_Hash.put("tSchemaComplianceCheck_2", true);
				end_Hash.put("tSchemaComplianceCheck_2",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_2 end ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				xlsxTool_tFileOutputExcel_2.writeExcel(
						fileName_tFileOutputExcel_2, true);

				globalMap.put("tFileOutputExcel_2_NB_LINE",
						nb_line_tFileOutputExcel_2);

				ok_Hash.put("tFileOutputExcel_2", true);
				end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_2 end ] stop
				 */

				/**
				 * [tFilterColumns_7 end ] start
				 */

				currentComponent = "tFilterColumns_7";

				globalMap.put("tFilterColumns_7_NB_LINE",
						nb_line_tFilterColumns_7);

				ok_Hash.put("tFilterColumns_7", true);
				end_Hash.put("tFilterColumns_7", System.currentTimeMillis());

				/**
				 * [tFilterColumns_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE",
						nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME",
						fileName_tFileOutputDelimited_5);

				if (isFileGenerated_tFileOutputDelimited_5
						&& nb_line_tFileOutputDelimited_5 == 0) {

					filetFileOutputDelimited_5.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tFilterColumns_8 finally ] start
				 */

				currentComponent = "tFilterColumns_8";

				/**
				 * [tFilterColumns_8 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_2 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_2";

				/**
				 * [tSchemaComplianceCheck_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_2 finally ] start
				 */

				currentComponent = "tFileOutputExcel_2";

				/**
				 * [tFileOutputExcel_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_7 finally ] start
				 */

				currentComponent = "tFilterColumns_7";

				/**
				 * [tFilterColumns_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_5")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_5"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_5")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}

	public static class toMetaDataFileStruct implements
			routines.system.IPersistableRow<toMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String analysis_type;

		public String getAnalysis_type() {
			return this.analysis_type;
		}

		public String reference_type;

		public String getReference_type() {
			return this.reference_type;
		}

		public String reference_value;

		public String getReference_value() {
			return this.reference_value;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String analysis_description;

		public String getAnalysis_description() {
			return this.analysis_description;
		}

		public String detection_method;

		public String getDetection_method() {
			return this.detection_method;
		}

		public String detection_description;

		public String getDetection_description() {
			return this.detection_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String curator_name;

		public String getCurator_name() {
			return this.curator_name;
		}

		public String curator_email;

		public String getCurator_email() {
			return this.curator_email;
		}

		public String curated_set_name;

		public String getCurated_set_name() {
			return this.curated_set_name;
		}

		public String curated_set_link;

		public String getCurated_set_link() {
			return this.curated_set_link;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.analysis_type = readString(dis);

					this.reference_type = readString(dis);

					this.reference_value = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.analysis_description = readString(dis);

					this.detection_method = readString(dis);

					this.detection_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.curator_name = readString(dis);

					this.curator_email = readString(dis);

					this.curated_set_name = readString(dis);

					this.curated_set_link = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.analysis_type, dos);

				// String

				writeString(this.reference_type, dos);

				// String

				writeString(this.reference_value, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.analysis_description, dos);

				// String

				writeString(this.detection_method, dos);

				// String

				writeString(this.detection_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.curator_name, dos);

				// String

				writeString(this.curator_email, dos);

				// String

				writeString(this.curated_set_name, dos);

				// String

				writeString(this.curated_set_link, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",analysis_type=" + analysis_type);
			sb.append(",reference_type=" + reference_type);
			sb.append(",reference_value=" + reference_value);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",analysis_description=" + analysis_description);
			sb.append(",detection_method=" + detection_method);
			sb.append(",detection_description=" + detection_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",curator_name=" + curator_name);
			sb.append(",curator_email=" + curator_email);
			sb.append(",curated_set_name=" + curated_set_name);
			sb.append(",curated_set_link=" + curated_set_link);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_4Struct implements
			routines.system.IPersistableRow<after_tFileInputExcel_4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

					this.method_type = readString(dis);

					this.experiment_resolution = readString(dis);

					this.method_platform = readString(dis);

					this.method_description = readString(dis);

					this.merged_experiment_ids = readString(dis);

					this.external_links = readString(dis);

					this.site = readString(dis);

					this.library_abbrev = readString(dis);

					this.library_link = readString(dis);

					this.sequencing_center = readString(dis);

					this.hardware_type = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.method_type, dos);

				// String

				writeString(this.experiment_resolution, dos);

				// String

				writeString(this.method_platform, dos);

				// String

				writeString(this.method_description, dos);

				// String

				writeString(this.merged_experiment_ids, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.site, dos);

				// String

				writeString(this.library_abbrev, dos);

				// String

				writeString(this.library_link, dos);

				// String

				writeString(this.sequencing_center, dos);

				// String

				writeString(this.hardware_type, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFileInputExcel_5Process(globalMap);
				tFileInputExcel_6Process(globalMap);

				row5Struct row5 = new row5Struct();
				toMetaDataFileStruct toMetaDataFile = new toMetaDataFileStruct();

				/**
				 * [tFileOutputExcel_7 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_7", false);
				start_Hash
						.put("tFileOutputExcel_7", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_7";

				int tos_count_tFileOutputExcel_7 = 0;

				int columnIndex_tFileOutputExcel_7 = 0;

				String fileName_tFileOutputExcel_7 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_7 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_7.setSheet("EXPERIMENTS");
				xlsxTool_tFileOutputExcel_7.setAppend(true, true);
				xlsxTool_tFileOutputExcel_7.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_7.setXY(true, 0, 3, true);

				xlsxTool_tFileOutputExcel_7
						.prepareXlsxFile(fileName_tFileOutputExcel_7);

				xlsxTool_tFileOutputExcel_7.setFont("ARIAL");

				/**
				 * [tFileOutputExcel_7 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toMetaDataFileStruct toMetaDataFile_tmp = new toMetaDataFileStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_4 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_4", false);
				start_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_4";

				int tos_count_tFileInputExcel_4 = 0;

				Object source_tFileInputExcel_4 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_4 = null;

				if (source_tFileInputExcel_4 instanceof java.io.InputStream
						|| source_tFileInputExcel_4 instanceof String) {
					excelReader_tFileInputExcel_4 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_4.addSheetName("EXPERIMENTS",
							false);
					int start_column_tFileInputExcel_4 = 1 - 1;
					int end_column_tFileInputExcel_4 = -1;
					if (start_column_tFileInputExcel_4 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_4 = start_column_tFileInputExcel_4 + 12 - 1;

					} else if (end_column_tFileInputExcel_4 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_4 = end_column_tFileInputExcel_4 - 12 + 1;
					}

					if (end_column_tFileInputExcel_4 < 0
							|| start_column_tFileInputExcel_4 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_4 = end_column_tFileInputExcel_4;

					int header_tFileInputExcel_4 = 3;
					int limit_tFileInputExcel_4 = 50;

					int nb_line_tFileInputExcel_4 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_4 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_4 = df_tFileInputExcel_4
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_4 instanceof String) {
						excelReader_tFileInputExcel_4.parse(
								(String) source_tFileInputExcel_4, "UTF-8");
					} else if (source_tFileInputExcel_4 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_4.parse(
								(java.io.InputStream) source_tFileInputExcel_4,
								"UTF-8");
					}

					while ((header_tFileInputExcel_4--) > 0
							&& excelReader_tFileInputExcel_4.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_4.next();
					}

					while (excelReader_tFileInputExcel_4.hasNext()) {
						int emptyColumnCount_tFileInputExcel_4 = 0;

						if (limit_tFileInputExcel_4 != -1
								&& nb_line_tFileInputExcel_4 >= limit_tFileInputExcel_4) {
							excelReader_tFileInputExcel_4.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_4 = excelReader_tFileInputExcel_4
								.next();
						row5 = null;
						int tempRowLength_tFileInputExcel_4 = 12;

						int columnIndex_tFileInputExcel_4 = 0;

						String[] temp_row_tFileInputExcel_4 = new String[tempRowLength_tFileInputExcel_4];

						for (int i_tFileInputExcel_4 = 0; i_tFileInputExcel_4 < tempRowLength_tFileInputExcel_4; i_tFileInputExcel_4++) {
							int current_tFileInputExcel_4 = i_tFileInputExcel_4
									+ start_column_tFileInputExcel_4;
							if (current_tFileInputExcel_4 <= actual_end_column_tFileInputExcel_4) {
								if (current_tFileInputExcel_4 < row_tFileInputExcel_4
										.size()) {
									String column_tFileInputExcel_4 = row_tFileInputExcel_4
											.get(current_tFileInputExcel_4);
									if (column_tFileInputExcel_4 != null) {
										temp_row_tFileInputExcel_4[i_tFileInputExcel_4] = column_tFileInputExcel_4;
									} else {
										temp_row_tFileInputExcel_4[i_tFileInputExcel_4] = "";
									}
								} else {
									temp_row_tFileInputExcel_4[i_tFileInputExcel_4] = "";
								}
							} else {
								temp_row_tFileInputExcel_4[i_tFileInputExcel_4] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_4 = false;
						row5 = new row5Struct();
						int curColNum_tFileInputExcel_4 = -1;
						String curColName_tFileInputExcel_4 = "";

						try {
							columnIndex_tFileInputExcel_4 = 0;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "experiment_id";

								row5.experiment_id = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.experiment_id = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 1;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "method_type";

								row5.method_type = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.method_type = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 2;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "experiment_resolution";

								row5.experiment_resolution = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.experiment_resolution = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 3;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "method_platform";

								row5.method_platform = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.method_platform = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 4;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "method_description";

								row5.method_description = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.method_description = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 5;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "merged_experiment_ids";

								row5.merged_experiment_ids = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.merged_experiment_ids = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 6;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "external_links";

								row5.external_links = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.external_links = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 7;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "site";

								row5.site = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.site = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 8;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "library_abbrev";

								row5.library_abbrev = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.library_abbrev = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 9;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "library_link";

								row5.library_link = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.library_link = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 10;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "sequencing_center";

								row5.sequencing_center = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.sequencing_center = null;
								emptyColumnCount_tFileInputExcel_4++;
							}
							columnIndex_tFileInputExcel_4 = 11;

							if (temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_4 = columnIndex_tFileInputExcel_4
										+ start_column_tFileInputExcel_4 + 1;
								curColName_tFileInputExcel_4 = "hardware_type";

								row5.hardware_type = temp_row_tFileInputExcel_4[columnIndex_tFileInputExcel_4]
										.trim();
							} else {
								row5.hardware_type = null;
								emptyColumnCount_tFileInputExcel_4++;
							}

							nb_line_tFileInputExcel_4++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_4 = true;
							System.err.println(e.getMessage());
							row5 = null;
						}

						/**
						 * [tFileInputExcel_4 begin ] stop
						 */

						/**
						 * [tFileInputExcel_4 main ] start
						 */

						currentComponent = "tFileInputExcel_4";

						tos_count_tFileInputExcel_4++;

						/**
						 * [tFileInputExcel_4 main ] stop
						 */
						// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row18HashKey.experiment_id = row5.experiment_id;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.experiment_id = '"
								// + row18HashKey.experiment_id + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// /////////////////////////////////////////////
							// Starting Lookup Table "row15"
							// /////////////////////////////////////////////

							boolean forceLooprow15 = false;

							row15Struct row15ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								row15HashKey.experiment_id = row5.experiment_id;

								row15HashKey.hashCodeDirty = true;

								tHash_Lookup_row15.lookup(row15HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row15 != null
									&& tHash_Lookup_row15
											.getCount(row15HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.experiment_id = '"
								// + row15HashKey.experiment_id + "'");
							} // G 071

							row15Struct row15 = null;

							row15Struct fromLookup_row15 = null;
							row15 = row15Default;

							if (tHash_Lookup_row15 != null
									&& tHash_Lookup_row15.hasNext()) { // G 099

								fromLookup_row15 = tHash_Lookup_row15.next();

							} // G 099

							if (fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								toMetaDataFile = null;

								// # Output table : 'toMetaDataFile'
								toMetaDataFile_tmp.experiment_id = row5.experiment_id;
								toMetaDataFile_tmp.method_type = row18.method_type;
								toMetaDataFile_tmp.analysis_type = row15.analysis_type;
								toMetaDataFile_tmp.reference_type = row15.reference_type;
								toMetaDataFile_tmp.reference_value = row15.reference_value;
								toMetaDataFile_tmp.experiment_resolution = row18.experiment_resolution;
								toMetaDataFile_tmp.method_platform = row18.method_platform;
								toMetaDataFile_tmp.method_description = row18.method_description;
								toMetaDataFile_tmp.analysis_description = row15.analysis_description;
								toMetaDataFile_tmp.detection_method = row15.detection_method;
								toMetaDataFile_tmp.detection_description = row15.detection_description;
								toMetaDataFile_tmp.merged_experiment_ids = row18.merged_experiment_ids;
								toMetaDataFile_tmp.external_links = row18.external_links;
								toMetaDataFile_tmp.site = row18.site;
								toMetaDataFile_tmp.library_abbrev = row18.library_abbrev;
								toMetaDataFile_tmp.library_link = row18.library_link;
								toMetaDataFile_tmp.curator_name = "";
								toMetaDataFile_tmp.curator_email = "";
								toMetaDataFile_tmp.curated_set_name = "";
								toMetaDataFile_tmp.curated_set_link = "";
								toMetaDataFile = toMetaDataFile_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "toMetaDataFile"
							if (toMetaDataFile != null) {

								/**
								 * [tFileOutputExcel_7 main ] start
								 */

								currentComponent = "tFileOutputExcel_7";

								xlsxTool_tFileOutputExcel_7.addRow();

								if (toMetaDataFile.experiment_id != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.experiment_id));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.method_type != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.method_type));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.analysis_type != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.analysis_type));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.reference_type != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.reference_type));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.reference_value != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.reference_value));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.experiment_resolution != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.experiment_resolution));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.method_platform != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.method_platform));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.method_description != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.method_description));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.analysis_description != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.analysis_description));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.detection_method != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.detection_method));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.detection_description != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.detection_description));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.merged_experiment_ids != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.merged_experiment_ids));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.external_links != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.external_links));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.site != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.site));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.library_abbrev != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.library_abbrev));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.library_link != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.library_link));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.curator_name != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.curator_name));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.curator_email != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.curator_email));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.curated_set_name != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.curated_set_name));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								if (toMetaDataFile.curated_set_link != null) {

									xlsxTool_tFileOutputExcel_7
											.addCellValue(String
													.valueOf(toMetaDataFile.curated_set_link));
								} else {
									xlsxTool_tFileOutputExcel_7
											.addCellNullValue();
								}

								nb_line_tFileOutputExcel_7++;

								tos_count_tFileOutputExcel_7++;

								/**
								 * [tFileOutputExcel_7 main ] stop
								 */

							} // End of branch "toMetaDataFile"

						} // End of branch "row5"

						/**
						 * [tFileInputExcel_4 end ] start
						 */

						currentComponent = "tFileInputExcel_4";

					}

					try {
						if (excelReader_tFileInputExcel_4 != null) {
							excelReader_tFileInputExcel_4.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_4) {
						if (!(e_tFileInputExcel_4.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_4.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_4_NB_LINE",
							nb_line_tFileInputExcel_4);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_4", true);
				end_Hash.put("tFileInputExcel_4", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_4 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_7 end ] start
				 */

				currentComponent = "tFileOutputExcel_7";

				xlsxTool_tFileOutputExcel_7.writeExcel(
						fileName_tFileOutputExcel_7, true);

				globalMap.put("tFileOutputExcel_7_NB_LINE",
						nb_line_tFileOutputExcel_7);

				ok_Hash.put("tFileOutputExcel_7", true);
				end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row15");

			try {

				/**
				 * [tFileInputExcel_4 finally ] start
				 */

				currentComponent = "tFileInputExcel_4";

				/**
				 * [tFileInputExcel_4 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_7 finally ] start
				 */

				currentComponent = "tFileOutputExcel_7";

				/**
				 * [tFileOutputExcel_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_4_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row11Struct row12 = row11;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tContextLoad_2 begin ] start
				 */

				ok_Hash.put("tContextLoad_2", false);
				start_Hash.put("tContextLoad_2", System.currentTimeMillis());

				currentComponent = "tContextLoad_2";

				int tos_count_tContextLoad_2 = 0;

				java.util.List<String> assignList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_2 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_2 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_2 = 0;

				/**
				 * [tContextLoad_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row11Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row11Struct>();
				row11 = new row11Struct();
				row11.key = "tab";
				row11.value = "STUDY";
				cacheList_tFixedFlowInput_1.add(row11);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row11Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row11 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tContextLoad_2 main ] start
						 */

						currentComponent = "tContextLoad_2";

						// ////////////////////////
						String tmp_key_tContextLoad_2 = null;
						String key_tContextLoad_2 = null;
						if (row11.key != null) {
							tmp_key_tContextLoad_2 = row11.key.trim();
							if ((tmp_key_tContextLoad_2.startsWith("#") || tmp_key_tContextLoad_2
									.startsWith("!"))) {
								tmp_key_tContextLoad_2 = null;
							} else {
								row11.key = tmp_key_tContextLoad_2;
							}
						}
						if (row11.key != null) {
							key_tContextLoad_2 = row11.key;
						}
						String value_tContextLoad_2 = null;
						if (row11.value != null) {
							value_tContextLoad_2 = row11.value;
						}

						if (tmp_key_tContextLoad_2 != null) {
							try {
								if (key_tContextLoad_2 != null
										&& "encoding"
												.equals(key_tContextLoad_2)) {
									context.encoding = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "excelFileIn"
												.equals(key_tContextLoad_2)) {
									context.excelFileIn = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "properties"
												.equals(key_tContextLoad_2)) {
									context.properties = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "tab".equals(key_tContextLoad_2)) {
									context.tab = value_tContextLoad_2;
								}

								if (key_tContextLoad_2 != null
										&& "workdir".equals(key_tContextLoad_2)) {
									context.workdir = value_tContextLoad_2;
								}

								if (context.getProperty(key_tContextLoad_2) != null) {
									assignList_tContextLoad_2
											.add(key_tContextLoad_2);
								} else {
									newPropertyList_tContextLoad_2
											.add(key_tContextLoad_2);
								}
								if (value_tContextLoad_2 == null) {
									context.setProperty(key_tContextLoad_2, "");
								} else {
									context.setProperty(key_tContextLoad_2,
											value_tContextLoad_2);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_2
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_2++;
						}
						// ////////////////////////

						row12 = row11;

						tos_count_tContextLoad_2++;

						/**
						 * [tContextLoad_2 main ] stop
						 */

						/**
						 * [tRunJob_1 main ] start
						 */

						currentComponent = "tRunJob_1";

						java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

						paraList_tRunJob_1.add("--father_pid=" + pid);

						paraList_tRunJob_1.add("--root_pid=" + rootPid);

						paraList_tRunJob_1.add("--father_node=tRunJob_1");

						paraList_tRunJob_1.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_1.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_1.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_1 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_1 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
								&& childResumePath_tRunJob_1 != null) {
							paraList_tRunJob_1
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_1");

						java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();

						parentContextMap_tRunJob_1.put("encoding",
								context.encoding);

						parentContextMap_tRunJob_1.put("excelFileIn",
								context.excelFileIn);

						parentContextMap_tRunJob_1.put("properties",
								context.properties);

						parentContextMap_tRunJob_1.put("tab", context.tab);

						parentContextMap_tRunJob_1.put("workdir",
								context.workdir);

						java.util.Enumeration<?> propertyNames_tRunJob_1 = context
								.propertyNames();
						while (propertyNames_tRunJob_1.hasMoreElements()) {
							String key_tRunJob_1 = (String) propertyNames_tRunJob_1
									.nextElement();
							Object value_tRunJob_1 = (Object) context
									.get(key_tRunJob_1);
							paraList_tRunJob_1.add("--context_param "
									+ key_tRunJob_1 + "=" + value_tRunJob_1);

						}

						Object obj_tRunJob_1 = null;

						checkgnpcnv.pivotexcel_0_1.pivotExcel childJob_tRunJob_1 = new checkgnpcnv.pivotexcel_0_1.pivotExcel();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_1) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
									.entrySet()) {
								dataSources_tRunJob_1.put(
										talendDataSourceEntry_tRunJob_1
												.getKey(),
										talendDataSourceEntry_tRunJob_1
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_1
									.setDataSources(dataSources_tRunJob_1);
						}

						childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

						String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
								.runJob((String[]) paraList_tRunJob_1
										.toArray(new String[paraList_tRunJob_1
												.size()]));

						errorCode = childJob_tRunJob_1.getErrorCode();

						if (childJob_tRunJob_1.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_1
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
									childJob_tRunJob_1.getErrorCode());
						}
						if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_1
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_1.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_1
										.getStatus())) {
							throw new RuntimeException(
									"Child job running failed");
						}

						tos_count_tRunJob_1++;

						/**
						 * [tRunJob_1 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tContextLoad_2 end ] start
				 */

				currentComponent = "tContextLoad_2";

				java.util.Enumeration<?> enu_tContextLoad_2 = context
						.propertyNames();
				while (enu_tContextLoad_2.hasMoreElements()) {
					String key_tContextLoad_2 = (String) enu_tContextLoad_2
							.nextElement();
					if (!assignList_tContextLoad_2.contains(key_tContextLoad_2)
							&& !newPropertyList_tContextLoad_2
									.contains(key_tContextLoad_2)) {
						noAssignList_tContextLoad_2.add(key_tContextLoad_2);
					}
				}

				String newPropertyStr_tContextLoad_2 = newPropertyList_tContextLoad_2
						.toString();
				String newProperty_tContextLoad_2 = newPropertyStr_tContextLoad_2
						.substring(1,
								newPropertyStr_tContextLoad_2.length() - 1);

				String noAssignStr_tContextLoad_2 = noAssignList_tContextLoad_2
						.toString();
				String noAssign_tContextLoad_2 = noAssignStr_tContextLoad_2
						.substring(1, noAssignStr_tContextLoad_2.length() - 1);

				globalMap.put("tContextLoad_2_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_2);
				globalMap.put("tContextLoad_2_KEY_NOT_LOADED",
						noAssign_tContextLoad_2);

				globalMap.put("tContextLoad_2_NB_LINE", nb_line_tContextLoad_2);

				List<String> parametersToEncrypt_tContextLoad_2 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_2", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_2));

				ok_Hash.put("tContextLoad_2", true);
				end_Hash.put("tContextLoad_2", System.currentTimeMillis());

				/**
				 * [tContextLoad_2 end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tFileInputDelimited_1Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tContextLoad_2 finally ] start
				 */

				currentComponent = "tContextLoad_2";

				/**
				 * [tContextLoad_2 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String study_id;

		public String getStudy_id() {
			return this.study_id;
		}

		public String study_description;

		public String getStudy_description() {
			return this.study_description;
		}

		public String study_type;

		public String getStudy_type() {
			return this.study_type;
		}

		public String taxonomy_id;

		public String getTaxonomy_id() {
			return this.taxonomy_id;
		}

		public Integer pubmed_id;

		public Integer getPubmed_id() {
			return this.pubmed_id;
		}

		public String study_alias;

		public String getStudy_alias() {
			return this.study_alias;
		}

		public String bioproject_accession;

		public String getBioproject_accession() {
			return this.bioproject_accession;
		}

		public String study_url;

		public String getStudy_url() {
			return this.study_url;
		}

		public String study_link;

		public String getStudy_link() {
			return this.study_link;
		}

		public String submitter_version;

		public String getSubmitter_version() {
			return this.submitter_version;
		}

		public java.util.Date last_updated_date;

		public java.util.Date getLast_updated_date() {
			return this.last_updated_date;
		}

		public String dbGaP_id;

		public String getDbGaP_id() {
			return this.dbGaP_id;
		}

		public java.util.Date dbGaP_release_date;

		public java.util.Date getDbGaP_release_date() {
			return this.dbGaP_release_date;
		}

		public java.util.Date hold_date;

		public java.util.Date getHold_date() {
			return this.hold_date;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.study_id = readString(dis);

					this.study_description = readString(dis);

					this.study_type = readString(dis);

					this.taxonomy_id = readString(dis);

					this.pubmed_id = readInteger(dis);

					this.study_alias = readString(dis);

					this.bioproject_accession = readString(dis);

					this.study_url = readString(dis);

					this.study_link = readString(dis);

					this.submitter_version = readString(dis);

					this.last_updated_date = readDate(dis);

					this.dbGaP_id = readString(dis);

					this.dbGaP_release_date = readDate(dis);

					this.hold_date = readDate(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.study_id, dos);

				// String

				writeString(this.study_description, dos);

				// String

				writeString(this.study_type, dos);

				// String

				writeString(this.taxonomy_id, dos);

				// Integer

				writeInteger(this.pubmed_id, dos);

				// String

				writeString(this.study_alias, dos);

				// String

				writeString(this.bioproject_accession, dos);

				// String

				writeString(this.study_url, dos);

				// String

				writeString(this.study_link, dos);

				// String

				writeString(this.submitter_version, dos);

				// java.util.Date

				writeDate(this.last_updated_date, dos);

				// String

				writeString(this.dbGaP_id, dos);

				// java.util.Date

				writeDate(this.dbGaP_release_date, dos);

				// java.util.Date

				writeDate(this.hold_date, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("study_id=" + study_id);
			sb.append(",study_description=" + study_description);
			sb.append(",study_type=" + study_type);
			sb.append(",taxonomy_id=" + taxonomy_id);
			sb.append(",pubmed_id=" + String.valueOf(pubmed_id));
			sb.append(",study_alias=" + study_alias);
			sb.append(",bioproject_accession=" + bioproject_accession);
			sb.append(",study_url=" + study_url);
			sb.append(",study_link=" + study_link);
			sb.append(",submitter_version=" + submitter_version);
			sb.append(",last_updated_date=" + String.valueOf(last_updated_date));
			sb.append(",dbGaP_id=" + dbGaP_id);
			sb.append(",dbGaP_release_date="
					+ String.valueOf(dbGaP_release_date));
			sb.append(",hold_date=" + String.valueOf(hold_date));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String study_id;

		public String getStudy_id() {
			return this.study_id;
		}

		public String study_description;

		public String getStudy_description() {
			return this.study_description;
		}

		public String study_type;

		public String getStudy_type() {
			return this.study_type;
		}

		public String taxonomy_id;

		public String getTaxonomy_id() {
			return this.taxonomy_id;
		}

		public Integer pubmed_id;

		public Integer getPubmed_id() {
			return this.pubmed_id;
		}

		public String study_alias;

		public String getStudy_alias() {
			return this.study_alias;
		}

		public String bioproject_accession;

		public String getBioproject_accession() {
			return this.bioproject_accession;
		}

		public String study_url;

		public String getStudy_url() {
			return this.study_url;
		}

		public String study_link;

		public String getStudy_link() {
			return this.study_link;
		}

		public String submitter_version;

		public String getSubmitter_version() {
			return this.submitter_version;
		}

		public java.util.Date last_updated_date;

		public java.util.Date getLast_updated_date() {
			return this.last_updated_date;
		}

		public String dbGaP_id;

		public String getDbGaP_id() {
			return this.dbGaP_id;
		}

		public java.util.Date dbGaP_release_date;

		public java.util.Date getDbGaP_release_date() {
			return this.dbGaP_release_date;
		}

		public java.util.Date hold_date;

		public java.util.Date getHold_date() {
			return this.hold_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.study_id = readString(dis);

					this.study_description = readString(dis);

					this.study_type = readString(dis);

					this.taxonomy_id = readString(dis);

					this.pubmed_id = readInteger(dis);

					this.study_alias = readString(dis);

					this.bioproject_accession = readString(dis);

					this.study_url = readString(dis);

					this.study_link = readString(dis);

					this.submitter_version = readString(dis);

					this.last_updated_date = readDate(dis);

					this.dbGaP_id = readString(dis);

					this.dbGaP_release_date = readDate(dis);

					this.hold_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.study_id, dos);

				// String

				writeString(this.study_description, dos);

				// String

				writeString(this.study_type, dos);

				// String

				writeString(this.taxonomy_id, dos);

				// Integer

				writeInteger(this.pubmed_id, dos);

				// String

				writeString(this.study_alias, dos);

				// String

				writeString(this.bioproject_accession, dos);

				// String

				writeString(this.study_url, dos);

				// String

				writeString(this.study_link, dos);

				// String

				writeString(this.submitter_version, dos);

				// java.util.Date

				writeDate(this.last_updated_date, dos);

				// String

				writeString(this.dbGaP_id, dos);

				// java.util.Date

				writeDate(this.dbGaP_release_date, dos);

				// java.util.Date

				writeDate(this.hold_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("study_id=" + study_id);
			sb.append(",study_description=" + study_description);
			sb.append(",study_type=" + study_type);
			sb.append(",taxonomy_id=" + taxonomy_id);
			sb.append(",pubmed_id=" + String.valueOf(pubmed_id));
			sb.append(",study_alias=" + study_alias);
			sb.append(",bioproject_accession=" + bioproject_accession);
			sb.append(",study_url=" + study_url);
			sb.append(",study_link=" + study_link);
			sb.append(",submitter_version=" + submitter_version);
			sb.append(",last_updated_date=" + String.valueOf(last_updated_date));
			sb.append(",dbGaP_id=" + dbGaP_id);
			sb.append(",dbGaP_release_date="
					+ String.valueOf(dbGaP_release_date));
			sb.append(",hold_date=" + String.valueOf(hold_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String study_id;

		public String getStudy_id() {
			return this.study_id;
		}

		public String study_description;

		public String getStudy_description() {
			return this.study_description;
		}

		public String study_type;

		public String getStudy_type() {
			return this.study_type;
		}

		public String taxonomy_id;

		public String getTaxonomy_id() {
			return this.taxonomy_id;
		}

		public Integer pubmed_id;

		public Integer getPubmed_id() {
			return this.pubmed_id;
		}

		public String study_alias;

		public String getStudy_alias() {
			return this.study_alias;
		}

		public String bioproject_accession;

		public String getBioproject_accession() {
			return this.bioproject_accession;
		}

		public String study_url;

		public String getStudy_url() {
			return this.study_url;
		}

		public String study_link;

		public String getStudy_link() {
			return this.study_link;
		}

		public String submitter_version;

		public String getSubmitter_version() {
			return this.submitter_version;
		}

		public java.util.Date last_updated_date;

		public java.util.Date getLast_updated_date() {
			return this.last_updated_date;
		}

		public String dbGaP_id;

		public String getDbGaP_id() {
			return this.dbGaP_id;
		}

		public java.util.Date dbGaP_release_date;

		public java.util.Date getDbGaP_release_date() {
			return this.dbGaP_release_date;
		}

		public java.util.Date hold_date;

		public java.util.Date getHold_date() {
			return this.hold_date;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.study_id = readString(dis);

					this.study_description = readString(dis);

					this.study_type = readString(dis);

					this.taxonomy_id = readString(dis);

					this.pubmed_id = readInteger(dis);

					this.study_alias = readString(dis);

					this.bioproject_accession = readString(dis);

					this.study_url = readString(dis);

					this.study_link = readString(dis);

					this.submitter_version = readString(dis);

					this.last_updated_date = readDate(dis);

					this.dbGaP_id = readString(dis);

					this.dbGaP_release_date = readDate(dis);

					this.hold_date = readDate(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.study_id, dos);

				// String

				writeString(this.study_description, dos);

				// String

				writeString(this.study_type, dos);

				// String

				writeString(this.taxonomy_id, dos);

				// Integer

				writeInteger(this.pubmed_id, dos);

				// String

				writeString(this.study_alias, dos);

				// String

				writeString(this.bioproject_accession, dos);

				// String

				writeString(this.study_url, dos);

				// String

				writeString(this.study_link, dos);

				// String

				writeString(this.submitter_version, dos);

				// java.util.Date

				writeDate(this.last_updated_date, dos);

				// String

				writeString(this.dbGaP_id, dos);

				// java.util.Date

				writeDate(this.dbGaP_release_date, dos);

				// java.util.Date

				writeDate(this.hold_date, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("study_id=" + study_id);
			sb.append(",study_description=" + study_description);
			sb.append(",study_type=" + study_type);
			sb.append(",taxonomy_id=" + taxonomy_id);
			sb.append(",pubmed_id=" + String.valueOf(pubmed_id));
			sb.append(",study_alias=" + study_alias);
			sb.append(",bioproject_accession=" + bioproject_accession);
			sb.append(",study_url=" + study_url);
			sb.append(",study_link=" + study_link);
			sb.append(",submitter_version=" + submitter_version);
			sb.append(",last_updated_date=" + String.valueOf(last_updated_date));
			sb.append(",dbGaP_id=" + dbGaP_id);
			sb.append(",dbGaP_release_date="
					+ String.valueOf(dbGaP_release_date));
			sb.append(",hold_date=" + String.valueOf(hold_date));
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String study_id;

		public String getStudy_id() {
			return this.study_id;
		}

		public String study_description;

		public String getStudy_description() {
			return this.study_description;
		}

		public String study_type;

		public String getStudy_type() {
			return this.study_type;
		}

		public String taxonomy_id;

		public String getTaxonomy_id() {
			return this.taxonomy_id;
		}

		public Integer pubmed_id;

		public Integer getPubmed_id() {
			return this.pubmed_id;
		}

		public String study_alias;

		public String getStudy_alias() {
			return this.study_alias;
		}

		public String bioproject_accession;

		public String getBioproject_accession() {
			return this.bioproject_accession;
		}

		public String study_url;

		public String getStudy_url() {
			return this.study_url;
		}

		public String study_link;

		public String getStudy_link() {
			return this.study_link;
		}

		public String submitter_version;

		public String getSubmitter_version() {
			return this.submitter_version;
		}

		public java.util.Date last_updated_date;

		public java.util.Date getLast_updated_date() {
			return this.last_updated_date;
		}

		public String dbGaP_id;

		public String getDbGaP_id() {
			return this.dbGaP_id;
		}

		public java.util.Date dbGaP_release_date;

		public java.util.Date getDbGaP_release_date() {
			return this.dbGaP_release_date;
		}

		public java.util.Date hold_date;

		public java.util.Date getHold_date() {
			return this.hold_date;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.study_id = readString(dis);

					this.study_description = readString(dis);

					this.study_type = readString(dis);

					this.taxonomy_id = readString(dis);

					this.pubmed_id = readInteger(dis);

					this.study_alias = readString(dis);

					this.bioproject_accession = readString(dis);

					this.study_url = readString(dis);

					this.study_link = readString(dis);

					this.submitter_version = readString(dis);

					this.last_updated_date = readDate(dis);

					this.dbGaP_id = readString(dis);

					this.dbGaP_release_date = readDate(dis);

					this.hold_date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.study_id, dos);

				// String

				writeString(this.study_description, dos);

				// String

				writeString(this.study_type, dos);

				// String

				writeString(this.taxonomy_id, dos);

				// Integer

				writeInteger(this.pubmed_id, dos);

				// String

				writeString(this.study_alias, dos);

				// String

				writeString(this.bioproject_accession, dos);

				// String

				writeString(this.study_url, dos);

				// String

				writeString(this.study_link, dos);

				// String

				writeString(this.submitter_version, dos);

				// java.util.Date

				writeDate(this.last_updated_date, dos);

				// String

				writeString(this.dbGaP_id, dos);

				// java.util.Date

				writeDate(this.dbGaP_release_date, dos);

				// java.util.Date

				writeDate(this.hold_date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("study_id=" + study_id);
			sb.append(",study_description=" + study_description);
			sb.append(",study_type=" + study_type);
			sb.append(",taxonomy_id=" + taxonomy_id);
			sb.append(",pubmed_id=" + String.valueOf(pubmed_id));
			sb.append(",study_alias=" + study_alias);
			sb.append(",bioproject_accession=" + bioproject_accession);
			sb.append(",study_url=" + study_url);
			sb.append(",study_link=" + study_link);
			sb.append(",submitter_version=" + submitter_version);
			sb.append(",last_updated_date=" + String.valueOf(last_updated_date));
			sb.append(",dbGaP_id=" + dbGaP_id);
			sb.append(",dbGaP_release_date="
					+ String.valueOf(dbGaP_release_date));
			sb.append(",hold_date=" + String.valueOf(hold_date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String study_id;

		public String getStudy_id() {
			return this.study_id;
		}

		public String study_description;

		public String getStudy_description() {
			return this.study_description;
		}

		public String study_type;

		public String getStudy_type() {
			return this.study_type;
		}

		public String taxonomy_id;

		public String getTaxonomy_id() {
			return this.taxonomy_id;
		}

		public Integer pubmed_id;

		public Integer getPubmed_id() {
			return this.pubmed_id;
		}

		public String study_alias;

		public String getStudy_alias() {
			return this.study_alias;
		}

		public String bioproject_accession;

		public String getBioproject_accession() {
			return this.bioproject_accession;
		}

		public String study_url;

		public String getStudy_url() {
			return this.study_url;
		}

		public String study_link;

		public String getStudy_link() {
			return this.study_link;
		}

		public String submitter_version;

		public String getSubmitter_version() {
			return this.submitter_version;
		}

		public java.util.Date last_updated_date;

		public java.util.Date getLast_updated_date() {
			return this.last_updated_date;
		}

		public String dbGaP_id;

		public String getDbGaP_id() {
			return this.dbGaP_id;
		}

		public java.util.Date dbGaP_release_date;

		public java.util.Date getDbGaP_release_date() {
			return this.dbGaP_release_date;
		}

		public java.util.Date hold_date;

		public java.util.Date getHold_date() {
			return this.hold_date;
		}

		public String privacy;

		public String getPrivacy() {
			return this.privacy;
		}

		public String project_acronym;

		public String getProject_acronym() {
			return this.project_acronym;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.study_id = readString(dis);

					this.study_description = readString(dis);

					this.study_type = readString(dis);

					this.taxonomy_id = readString(dis);

					this.pubmed_id = readInteger(dis);

					this.study_alias = readString(dis);

					this.bioproject_accession = readString(dis);

					this.study_url = readString(dis);

					this.study_link = readString(dis);

					this.submitter_version = readString(dis);

					this.last_updated_date = readDate(dis);

					this.dbGaP_id = readString(dis);

					this.dbGaP_release_date = readDate(dis);

					this.hold_date = readDate(dis);

					this.privacy = readString(dis);

					this.project_acronym = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.study_id, dos);

				// String

				writeString(this.study_description, dos);

				// String

				writeString(this.study_type, dos);

				// String

				writeString(this.taxonomy_id, dos);

				// Integer

				writeInteger(this.pubmed_id, dos);

				// String

				writeString(this.study_alias, dos);

				// String

				writeString(this.bioproject_accession, dos);

				// String

				writeString(this.study_url, dos);

				// String

				writeString(this.study_link, dos);

				// String

				writeString(this.submitter_version, dos);

				// java.util.Date

				writeDate(this.last_updated_date, dos);

				// String

				writeString(this.dbGaP_id, dos);

				// java.util.Date

				writeDate(this.dbGaP_release_date, dos);

				// java.util.Date

				writeDate(this.hold_date, dos);

				// String

				writeString(this.privacy, dos);

				// String

				writeString(this.project_acronym, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",study_id=" + study_id);
			sb.append(",study_description=" + study_description);
			sb.append(",study_type=" + study_type);
			sb.append(",taxonomy_id=" + taxonomy_id);
			sb.append(",pubmed_id=" + String.valueOf(pubmed_id));
			sb.append(",study_alias=" + study_alias);
			sb.append(",bioproject_accession=" + bioproject_accession);
			sb.append(",study_url=" + study_url);
			sb.append(",study_link=" + study_link);
			sb.append(",submitter_version=" + submitter_version);
			sb.append(",last_updated_date=" + String.valueOf(last_updated_date));
			sb.append(",dbGaP_id=" + dbGaP_id);
			sb.append(",dbGaP_release_date="
					+ String.valueOf(dbGaP_release_date));
			sb.append(",hold_date=" + String.valueOf(hold_date));
			sb.append(",privacy=" + privacy);
			sb.append(",project_acronym=" + project_acronym);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				row13Struct row13 = new row13Struct();
				row9Struct row9 = new row9Struct();
				row16Struct row16 = new row16Struct();
				row14Struct row14 = new row14Struct();
				row30Struct row30 = new row30Struct();

				/**
				 * [tFileOutputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_5", false);
				start_Hash
						.put("tFileOutputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_5";

				int tos_count_tFileOutputExcel_5 = 0;

				int columnIndex_tFileOutputExcel_5 = 0;

				String fileName_tFileOutputExcel_5 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_5 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_5.setSheet("STUDY");
				xlsxTool_tFileOutputExcel_5.setAppend(true, true);
				xlsxTool_tFileOutputExcel_5.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_5.setXY(true, 0, 3, true);

				xlsxTool_tFileOutputExcel_5
						.prepareXlsxFile(fileName_tFileOutputExcel_5);

				xlsxTool_tFileOutputExcel_5.setFont("");

				/**
				 * [tFileOutputExcel_5 begin ] stop
				 */

				/**
				 * [tUnpivotRow_1 begin ] start
				 */

				ok_Hash.put("tUnpivotRow_1", false);
				start_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				currentComponent = "tUnpivotRow_1";

				int tos_count_tUnpivotRow_1 = 0;

				/**
				 * [tUnpivotRow_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						context.workdir + "/bad/study.csv")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
							.substring(0, fileName_tFileOutputDelimited_3
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(0, fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitEvery_tFileOutputDelimited_3 = 1000;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /**
				 * Start field
				 * tFileOutputDelimited_3:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
				 * Start
				 * field tFileOutputDelimited_3:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null
						&& directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(
							directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(
						fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_3, false),
								context.encoding));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("study_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("study_description");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("study_type");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("taxonomy_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("pubmed_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("study_alias");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("bioproject_accession");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("study_url");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("study_link");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("submitter_version");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("last_updated_date");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("dbGaP_id");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("dbGaP_release_date");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("hold_date");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("errorMessage");
					outtFileOutputDelimited_3
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3",
						outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3",
						nb_line_tFileOutputDelimited_3);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_3",
						isFileGenerated_tFileOutputDelimited_3);
				resourceMap.put("filetFileOutputDelimited_3",
						filetFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterColumns_5 begin ] start
				 */

				ok_Hash.put("tFilterColumns_5", false);
				start_Hash.put("tFilterColumns_5", System.currentTimeMillis());

				currentComponent = "tFilterColumns_5";

				int tos_count_tFilterColumns_5 = 0;

				int nb_line_tFilterColumns_5 = 0;

				/**
				 * [tFilterColumns_5 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_1", false);
				start_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_1";

				int tos_count_tSchemaComplianceCheck_1 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_1 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row13Struct row13) {
						// validate nullable (empty as null)
						if ((row13.study_id == null)
								|| ("".equals(row13.study_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row13.study_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_id != null) {
							if (row13.study_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row13.study_description == null)
								|| ("".equals(row13.study_description))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row13.study_description != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_description != null) {
							if (row13.study_description.length() > 1000) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_description:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row13.study_type == null)
								|| ("".equals(row13.study_type))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row13.study_type != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_type != null) {
							if (row13.study_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_type:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row13.taxonomy_id == null)
								|| ("".equals(row13.taxonomy_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row13.taxonomy_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.taxonomy_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.taxonomy_id != null) {
							if (row13.taxonomy_id.length() > 200) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"taxonomy_id:");
						errorMessageThrough = "";
						if (row13.pubmed_id != null
								&& (!"".equals(row13.pubmed_id))) {
							tmpContentThrough = row13.pubmed_id.toString();

							if (tmpContentThrough.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"pubmed_id:");
						errorMessageThrough = "";
						try {
							if (row13.study_alias != null
									&& (!"".equals(row13.study_alias))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_alias);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_alias != null
								&& (!"".equals(row13.study_alias))) {
							if (row13.study_alias.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_alias:");
						errorMessageThrough = "";
						try {
							if (row13.bioproject_accession != null
									&& (!"".equals(row13.bioproject_accession))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.bioproject_accession);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.bioproject_accession != null
								&& (!"".equals(row13.bioproject_accession))) {
							if (row13.bioproject_accession.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"bioproject_accession:");
						errorMessageThrough = "";
						try {
							if (row13.study_url != null
									&& (!"".equals(row13.study_url))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_url);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_url != null
								&& (!"".equals(row13.study_url))) {
							if (row13.study_url.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_url:");
						errorMessageThrough = "";
						try {
							if (row13.study_link != null
									&& (!"".equals(row13.study_link))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.study_link);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.study_link != null
								&& (!"".equals(row13.study_link))) {
							if (row13.study_link.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"study_link:");
						errorMessageThrough = "";
						try {
							if (row13.submitter_version != null
									&& (!"".equals(row13.submitter_version))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.submitter_version);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.submitter_version != null
								&& (!"".equals(row13.submitter_version))) {
							if (row13.submitter_version.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"submitter_version:");
						errorMessageThrough = "";
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"last_updated_date:");
						errorMessageThrough = "";
						try {
							if (row13.dbGaP_id != null
									&& (!"".equals(row13.dbGaP_id))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row13.dbGaP_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row13.dbGaP_id != null
								&& (!"".equals(row13.dbGaP_id))) {
							if (row13.dbGaP_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"dbGaP_id:");
						errorMessageThrough = "";
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"dbGaP_release_date:");
						errorMessageThrough = "";
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"hold_date:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

				/**
				 * [tSchemaComplianceCheck_1 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = context.workdir
							+ "/tmp/temp.tmp";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp.tmp", "US-ASCII",
								"\t", "\n", false, 1, 0, 1, -1, true);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.id = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row2.id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row2.study_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							row2.study_description = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row2.study_type = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row2.taxonomy_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.pubmed_id = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row2.pubmed_id = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row2.study_alias = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row2.bioproject_accession = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row2.study_url = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							row2.study_link = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row2.submitter_version = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.last_updated_date = ParserUtils
											.parseTo_Date(temp, "yyyy-MM-dd");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row2.last_updated_date = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row2.dbGaP_id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.dbGaP_release_date = ParserUtils
											.parseTo_Date(temp, "yyyy-MM-dd");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row2.dbGaP_release_date = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row2.hold_date = ParserUtils.parseTo_Date(
											temp, "yyyy-MM-dd");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(ex_tFileInputDelimited_1);
								}

							} else {

								row2.hold_date = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row2.privacy = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row2.project_acronym = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {
							row14 = null;

							/**
							 * [tFilterColumns_1 main ] start
							 */

							currentComponent = "tFilterColumns_1";

							row13.study_id = row2.study_id;

							row13.study_description = row2.study_description;

							row13.study_type = row2.study_type;

							row13.taxonomy_id = row2.taxonomy_id;

							row13.pubmed_id = row2.pubmed_id;

							row13.study_alias = row2.study_alias;

							row13.bioproject_accession = row2.bioproject_accession;

							row13.study_url = row2.study_url;

							row13.study_link = row2.study_link;

							row13.submitter_version = row2.submitter_version;

							row13.last_updated_date = row2.last_updated_date;

							row13.dbGaP_id = row2.dbGaP_id;

							row13.dbGaP_release_date = row2.dbGaP_release_date;

							row13.hold_date = row2.hold_date;

							nb_line_tFilterColumns_1++;

							tos_count_tFilterColumns_1++;

							/**
							 * [tFilterColumns_1 main ] stop
							 */

							/**
							 * [tSchemaComplianceCheck_1 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_1";

							row9 = null;
							row14 = null;
							rsvUtil_tSchemaComplianceCheck_1
									.setRowValue_0(row13);
							if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row9 = new row9Struct();
								row9.study_id = row13.study_id;
								row9.study_description = row13.study_description;
								row9.study_type = row13.study_type;
								row9.taxonomy_id = row13.taxonomy_id;
								row9.pubmed_id = row13.pubmed_id;
								row9.study_alias = row13.study_alias;
								row9.bioproject_accession = row13.bioproject_accession;
								row9.study_url = row13.study_url;
								row9.study_link = row13.study_link;
								row9.submitter_version = row13.submitter_version;
								row9.last_updated_date = row13.last_updated_date;
								row9.dbGaP_id = row13.dbGaP_id;
								row9.dbGaP_release_date = row13.dbGaP_release_date;
								row9.hold_date = row13.hold_date;
							}
							if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row14 = new row14Struct();
								row14.study_id = row13.study_id;
								row14.study_description = row13.study_description;
								row14.study_type = row13.study_type;
								row14.taxonomy_id = row13.taxonomy_id;
								row14.pubmed_id = row13.pubmed_id;
								row14.study_alias = row13.study_alias;
								row14.bioproject_accession = row13.bioproject_accession;
								row14.study_url = row13.study_url;
								row14.study_link = row13.study_link;
								row14.submitter_version = row13.submitter_version;
								row14.last_updated_date = row13.last_updated_date;
								row14.dbGaP_id = row13.dbGaP_id;
								row14.dbGaP_release_date = row13.dbGaP_release_date;
								row14.hold_date = row13.hold_date;
								row14.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
								row14.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_1.reset();

							tos_count_tSchemaComplianceCheck_1++;

							/**
							 * [tSchemaComplianceCheck_1 main ] stop
							 */
							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tUnpivotRow_1 main ] start
								 */

								currentComponent = "tUnpivotRow_1";

								/*
								 * &copy; British Telecommunications plc, 2009,
								 * All Rights Reserved. Licensed for general use
								 * under the terms of GPL v2.
								 */
								String[] pivotKeysArray = { "study_id",
										"study_description", "study_type",
										"taxonomy_id", "pubmed_id",
										"study_alias", "bioproject_accession",
										"study_url", "study_link",
										"submitter_version",
										"last_updated_date", "dbGaP_id",
										"dbGaP_release_date", "hold_date" };

								for (String field : pivotKeysArray) {

									row16.pivot_key = field;
									try {
										row16.pivot_value = row9.getClass()
												.getDeclaredField(field)
												.get(row9).toString();
									} catch (Exception e) {
										row16.pivot_value = null;
									}

									tos_count_tUnpivotRow_1++;

									/**
									 * [tUnpivotRow_1 main ] stop
									 */

									/**
									 * [tFileOutputExcel_5 main ] start
									 */

									currentComponent = "tFileOutputExcel_5";

									xlsxTool_tFileOutputExcel_5.addRow();

									if (row16.pivot_key != null) {

										xlsxTool_tFileOutputExcel_5
												.addCellValue(String
														.valueOf(row16.pivot_key));
									} else {
										xlsxTool_tFileOutputExcel_5
												.addCellNullValue();
									}

									if (row16.pivot_value != null) {

										xlsxTool_tFileOutputExcel_5
												.addCellValue(String
														.valueOf(row16.pivot_value));
									} else {
										xlsxTool_tFileOutputExcel_5
												.addCellNullValue();
									}

									nb_line_tFileOutputExcel_5++;

									tos_count_tFileOutputExcel_5++;

									/**
									 * [tFileOutputExcel_5 main ] stop
									 */
									// end for
								}

							} // End of branch "row9"

							// Start of branch "row14"
							if (row14 != null) {

								/**
								 * [tFilterColumns_5 main ] start
								 */

								currentComponent = "tFilterColumns_5";

								row30.study_id = row14.study_id;

								row30.study_description = row14.study_description;

								row30.study_type = row14.study_type;

								row30.taxonomy_id = row14.taxonomy_id;

								row30.pubmed_id = row14.pubmed_id;

								row30.study_alias = row14.study_alias;

								row30.bioproject_accession = row14.bioproject_accession;

								row30.study_url = row14.study_url;

								row30.study_link = row14.study_link;

								row30.submitter_version = row14.submitter_version;

								row30.last_updated_date = row14.last_updated_date;

								row30.dbGaP_id = row14.dbGaP_id;

								row30.dbGaP_release_date = row14.dbGaP_release_date;

								row30.hold_date = row14.hold_date;

								row30.errorMessage = row14.errorMessage;

								nb_line_tFilterColumns_5++;

								tos_count_tFilterColumns_5++;

								/**
								 * [tFilterColumns_5 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_3 main ] start
								 */

								currentComponent = "tFileOutputDelimited_3";

								StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
								if (row30.study_id != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_id);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.study_description != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_description);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.study_type != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_type);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.taxonomy_id != null) {
									sb_tFileOutputDelimited_3
											.append(row30.taxonomy_id);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.pubmed_id != null) {
									sb_tFileOutputDelimited_3
											.append(row30.pubmed_id);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.study_alias != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_alias);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.bioproject_accession != null) {
									sb_tFileOutputDelimited_3
											.append(row30.bioproject_accession);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.study_url != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_url);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.study_link != null) {
									sb_tFileOutputDelimited_3
											.append(row30.study_link);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.submitter_version != null) {
									sb_tFileOutputDelimited_3
											.append(row30.submitter_version);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.last_updated_date != null) {
									sb_tFileOutputDelimited_3
											.append(FormatterUtils.format_Date(
													row30.last_updated_date,
													"yyyy-MM-dd"));
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.dbGaP_id != null) {
									sb_tFileOutputDelimited_3
											.append(row30.dbGaP_id);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.dbGaP_release_date != null) {
									sb_tFileOutputDelimited_3
											.append(FormatterUtils.format_Date(
													row30.dbGaP_release_date,
													"yyyy-MM-dd"));
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.hold_date != null) {
									sb_tFileOutputDelimited_3
											.append(FormatterUtils.format_Date(
													row30.hold_date,
													"yyyy-MM-dd"));
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_tFileOutputDelimited_3);
								if (row30.errorMessage != null) {
									sb_tFileOutputDelimited_3
											.append(row30.errorMessage);
								}
								sb_tFileOutputDelimited_3
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

								nb_line_tFileOutputDelimited_3++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_3",
										nb_line_tFileOutputDelimited_3);

								outtFileOutputDelimited_3
										.write(sb_tFileOutputDelimited_3
												.toString());

								tos_count_tFileOutputDelimited_3++;

								/**
								 * [tFileOutputDelimited_3 main ] stop
								 */

							} // End of branch "row14"

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				ok_Hash.put("tSchemaComplianceCheck_1", true);
				end_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_1 end ] stop
				 */

				/**
				 * [tUnpivotRow_1 end ] start
				 */

				currentComponent = "tUnpivotRow_1";

				ok_Hash.put("tUnpivotRow_1", true);
				end_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				/**
				 * [tUnpivotRow_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_5 end ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				xlsxTool_tFileOutputExcel_5.writeExcel(
						fileName_tFileOutputExcel_5, true);

				globalMap.put("tFileOutputExcel_5_NB_LINE",
						nb_line_tFileOutputExcel_5);

				ok_Hash.put("tFileOutputExcel_5", true);
				end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_5 end ] stop
				 */

				/**
				 * [tFilterColumns_5 end ] start
				 */

				currentComponent = "tFilterColumns_5";

				globalMap.put("tFilterColumns_5_NB_LINE",
						nb_line_tFilterColumns_5);

				ok_Hash.put("tFilterColumns_5", true);
				end_Hash.put("tFilterColumns_5", System.currentTimeMillis());

				/**
				 * [tFilterColumns_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE",
						nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",
						fileName_tFileOutputDelimited_3);

				if (isFileGenerated_tFileOutputDelimited_3
						&& nb_line_tFileOutputDelimited_3 == 0) {

					filetFileOutputDelimited_3.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				/**
				 * [tSchemaComplianceCheck_1 finally ] stop
				 */

				/**
				 * [tUnpivotRow_1 finally ] start
				 */

				currentComponent = "tUnpivotRow_1";

				/**
				 * [tUnpivotRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_5 finally ] start
				 */

				currentComponent = "tFileOutputExcel_5";

				/**
				 * [tFileOutputExcel_5 finally ] stop
				 */

				/**
				 * [tFilterColumns_5 finally ] start
				 */

				currentComponent = "tFilterColumns_5";

				/**
				 * [tFilterColumns_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				row23Struct row24 = row23;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tContextLoad_3 begin ] start
				 */

				ok_Hash.put("tContextLoad_3", false);
				start_Hash.put("tContextLoad_3", System.currentTimeMillis());

				currentComponent = "tContextLoad_3";

				int tos_count_tContextLoad_3 = 0;

				java.util.List<String> assignList_tContextLoad_3 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_3 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_3 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_3 = 0;

				/**
				 * [tContextLoad_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				int nb_line_tFixedFlowInput_2 = 0;
				List<row23Struct> cacheList_tFixedFlowInput_2 = new java.util.ArrayList<row23Struct>();
				row23 = new row23Struct();
				row23.key = "tab";
				row23.value = "SAMPLESETS";
				cacheList_tFixedFlowInput_2.add(row23);
				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {
					for (row23Struct tmpRow_tFixedFlowInput_2 : cacheList_tFixedFlowInput_2) {
						nb_line_tFixedFlowInput_2++;
						row23 = tmpRow_tFixedFlowInput_2;

						/**
						 * [tFixedFlowInput_2 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_2 main ] start
						 */

						currentComponent = "tFixedFlowInput_2";

						tos_count_tFixedFlowInput_2++;

						/**
						 * [tFixedFlowInput_2 main ] stop
						 */

						/**
						 * [tContextLoad_3 main ] start
						 */

						currentComponent = "tContextLoad_3";

						// ////////////////////////
						String tmp_key_tContextLoad_3 = null;
						String key_tContextLoad_3 = null;
						if (row23.key != null) {
							tmp_key_tContextLoad_3 = row23.key.trim();
							if ((tmp_key_tContextLoad_3.startsWith("#") || tmp_key_tContextLoad_3
									.startsWith("!"))) {
								tmp_key_tContextLoad_3 = null;
							} else {
								row23.key = tmp_key_tContextLoad_3;
							}
						}
						if (row23.key != null) {
							key_tContextLoad_3 = row23.key;
						}
						String value_tContextLoad_3 = null;
						if (row23.value != null) {
							value_tContextLoad_3 = row23.value;
						}

						if (tmp_key_tContextLoad_3 != null) {
							try {
								if (key_tContextLoad_3 != null
										&& "encoding"
												.equals(key_tContextLoad_3)) {
									context.encoding = value_tContextLoad_3;
								}

								if (key_tContextLoad_3 != null
										&& "excelFileIn"
												.equals(key_tContextLoad_3)) {
									context.excelFileIn = value_tContextLoad_3;
								}

								if (key_tContextLoad_3 != null
										&& "properties"
												.equals(key_tContextLoad_3)) {
									context.properties = value_tContextLoad_3;
								}

								if (key_tContextLoad_3 != null
										&& "tab".equals(key_tContextLoad_3)) {
									context.tab = value_tContextLoad_3;
								}

								if (key_tContextLoad_3 != null
										&& "workdir".equals(key_tContextLoad_3)) {
									context.workdir = value_tContextLoad_3;
								}

								if (context.getProperty(key_tContextLoad_3) != null) {
									assignList_tContextLoad_3
											.add(key_tContextLoad_3);
								} else {
									newPropertyList_tContextLoad_3
											.add(key_tContextLoad_3);
								}
								if (value_tContextLoad_3 == null) {
									context.setProperty(key_tContextLoad_3, "");
								} else {
									context.setProperty(key_tContextLoad_3,
											value_tContextLoad_3);
								}
							} catch (java.lang.Exception e) {
								System.err
										.println("Setting a value for the key \""
												+ key_tContextLoad_3
												+ "\" has failed. Error message: "
												+ e.getMessage());
							}
							nb_line_tContextLoad_3++;
						}
						// ////////////////////////

						row24 = row23;

						tos_count_tContextLoad_3++;

						/**
						 * [tContextLoad_3 main ] stop
						 */

						/**
						 * [tRunJob_2 main ] start
						 */

						currentComponent = "tRunJob_2";

						java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

						paraList_tRunJob_2.add("--father_pid=" + pid);

						paraList_tRunJob_2.add("--root_pid=" + rootPid);

						paraList_tRunJob_2.add("--father_node=tRunJob_2");

						paraList_tRunJob_2.add("--context=Default");

						// for feature:10589

						paraList_tRunJob_2.add("--stat_port=" + portStats);

						if (resuming_logs_dir_path != null) {
							paraList_tRunJob_2.add("--resuming_logs_dir_path="
									+ resuming_logs_dir_path);
						}
						String childResumePath_tRunJob_2 = ResumeUtil
								.getChildJobCheckPointPath(resuming_checkpoint_path);
						String tRunJobName_tRunJob_2 = ResumeUtil
								.getRighttRunJob(resuming_checkpoint_path);
						if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
								&& childResumePath_tRunJob_2 != null) {
							paraList_tRunJob_2
									.add("--resuming_checkpoint_path="
											+ ResumeUtil
													.getChildJobCheckPointPath(resuming_checkpoint_path));
						}
						paraList_tRunJob_2.add("--parent_part_launcher=JOB:"
								+ jobName + "/NODE:tRunJob_2");

						java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

						context.synchronizeContext();

						parentContextMap_tRunJob_2.put("encoding",
								context.encoding);

						parentContextMap_tRunJob_2.put("excelFileIn",
								context.excelFileIn);

						parentContextMap_tRunJob_2.put("properties",
								context.properties);

						parentContextMap_tRunJob_2.put("tab", context.tab);

						parentContextMap_tRunJob_2.put("workdir",
								context.workdir);

						java.util.Enumeration<?> propertyNames_tRunJob_2 = context
								.propertyNames();
						while (propertyNames_tRunJob_2.hasMoreElements()) {
							String key_tRunJob_2 = (String) propertyNames_tRunJob_2
									.nextElement();
							Object value_tRunJob_2 = (Object) context
									.get(key_tRunJob_2);
							paraList_tRunJob_2.add("--context_param "
									+ key_tRunJob_2 + "=" + value_tRunJob_2);

						}

						Object obj_tRunJob_2 = null;

						checkgnpcnv.pivotexcel_0_1.pivotExcel childJob_tRunJob_2 = new checkgnpcnv.pivotexcel_0_1.pivotExcel();
						// pass DataSources
						java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
								.get(KEY_DB_DATASOURCES);
						if (null != talendDataSources_tRunJob_2) {
							java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
							for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
									.entrySet()) {
								dataSources_tRunJob_2.put(
										talendDataSourceEntry_tRunJob_2
												.getKey(),
										talendDataSourceEntry_tRunJob_2
												.getValue().getRawDataSource());
							}
							childJob_tRunJob_2
									.setDataSources(dataSources_tRunJob_2);
						}

						childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

						String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
								.runJob((String[]) paraList_tRunJob_2
										.toArray(new String[paraList_tRunJob_2
												.size()]));

						errorCode = childJob_tRunJob_2.getErrorCode();

						if (childJob_tRunJob_2.getErrorCode() == null) {
							globalMap.put(
									"tRunJob_2_CHILD_RETURN_CODE",
									childJob_tRunJob_2.getStatus() != null
											&& ("failure")
													.equals(childJob_tRunJob_2
															.getStatus()) ? 1
											: 0);
						} else {
							globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
									childJob_tRunJob_2.getErrorCode());
						}
						if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
							globalMap
									.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
											childJob_tRunJob_2
													.getExceptionStackTrace());
						}

						if (childJob_tRunJob_2.getErrorCode() != null
								|| ("failure").equals(childJob_tRunJob_2
										.getStatus())) {
							throw new RuntimeException(
									"Child job running failed");
						}

						tos_count_tRunJob_2++;

						/**
						 * [tRunJob_2 main ] stop
						 */

						/**
						 * [tFixedFlowInput_2 end ] start
						 */

						currentComponent = "tFixedFlowInput_2";

					}
				}
				cacheList_tFixedFlowInput_2.clear();
				globalMap.put("tFixedFlowInput_2_NB_LINE",
						nb_line_tFixedFlowInput_2);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tContextLoad_3 end ] start
				 */

				currentComponent = "tContextLoad_3";

				java.util.Enumeration<?> enu_tContextLoad_3 = context
						.propertyNames();
				while (enu_tContextLoad_3.hasMoreElements()) {
					String key_tContextLoad_3 = (String) enu_tContextLoad_3
							.nextElement();
					if (!assignList_tContextLoad_3.contains(key_tContextLoad_3)
							&& !newPropertyList_tContextLoad_3
									.contains(key_tContextLoad_3)) {
						noAssignList_tContextLoad_3.add(key_tContextLoad_3);
					}
				}

				String newPropertyStr_tContextLoad_3 = newPropertyList_tContextLoad_3
						.toString();
				String newProperty_tContextLoad_3 = newPropertyStr_tContextLoad_3
						.substring(1,
								newPropertyStr_tContextLoad_3.length() - 1);

				String noAssignStr_tContextLoad_3 = noAssignList_tContextLoad_3
						.toString();
				String noAssign_tContextLoad_3 = noAssignStr_tContextLoad_3
						.substring(1, noAssignStr_tContextLoad_3.length() - 1);

				globalMap.put("tContextLoad_3_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_3);
				globalMap.put("tContextLoad_3_KEY_NOT_LOADED",
						noAssign_tContextLoad_3);

				globalMap.put("tContextLoad_3_NB_LINE", nb_line_tContextLoad_3);

				List<String> parametersToEncrypt_tContextLoad_3 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_3", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_3));

				ok_Hash.put("tContextLoad_3", true);
				end_Hash.put("tContextLoad_3", System.currentTimeMillis());

				/**
				 * [tContextLoad_3 end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tFileInputDelimited_2Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tContextLoad_3 finally ] start
				 */

				currentComponent = "tContextLoad_3";

				/**
				 * [tContextLoad_3 finally ] stop
				 */

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row25Struct row25 = new row25Struct();
				row26Struct row26 = new row26Struct();

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
							.substring(0, fileName_tFileOutputDelimited_9
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(0, fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitEvery_tFileOutputDelimited_9 = 1000;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /**
				 * Start field
				 * tFileOutputDelimited_9:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
				 * Start
				 * field tFileOutputDelimited_9:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null
						&& directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(
							directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(
						fileName_tFileOutputDelimited_9);
				if (fileToDelete_tFileOutputDelimited_9.exists()) {
					fileToDelete_tFileOutputDelimited_9.delete();
				}
				outtFileOutputDelimited_9 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_9, false),
								context.encoding));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("sampleset_id");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_size");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_taxonomy_id");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_type");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_name");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_description");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_phenotype");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_population");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("sampleset_sex");
					outtFileOutputDelimited_9
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9",
						outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9",
						nb_line_tFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tFilterColumns_3 begin ] start
				 */

				ok_Hash.put("tFilterColumns_3", false);
				start_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				currentComponent = "tFilterColumns_3";

				int tos_count_tFilterColumns_3 = 0;

				int nb_line_tFilterColumns_3 = 0;

				/**
				 * [tFilterColumns_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.workdir
							+ "/tmp/temp.tmp";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp.tmp", "US-ASCII",
								"\t", "\n", false, 1, 0, 1, -1, true);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row25 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row25 = new row25Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							temp = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row25.id = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2
											.setException(ex_tFileInputDelimited_2);
								}

							} else {

								row25.id = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row25.sampleset_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row25.sampleset_size = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row25.sampleset_taxonomy_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row25.sampleset_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row25.sampleset_name = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row25.sampleset_description = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row25.sampleset_phenotype = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row25.sampleset_population = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row25.sampleset_sex = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row25 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row25"
						if (row25 != null) {

							/**
							 * [tFilterColumns_3 main ] start
							 */

							currentComponent = "tFilterColumns_3";

							row26.sampleset_id = row25.sampleset_id;

							row26.sampleset_size = row25.sampleset_size;

							row26.sampleset_taxonomy_id = row25.sampleset_taxonomy_id;

							row26.sampleset_type = row25.sampleset_type;

							row26.sampleset_name = row25.sampleset_name;

							row26.sampleset_description = row25.sampleset_description;

							row26.sampleset_phenotype = row25.sampleset_phenotype;

							row26.sampleset_population = row25.sampleset_population;

							row26.sampleset_sex = row25.sampleset_sex;

							nb_line_tFilterColumns_3++;

							tos_count_tFilterColumns_3++;

							/**
							 * [tFilterColumns_3 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 main ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
							if (row26.sampleset_id != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_id);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_size != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_size);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_taxonomy_id != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_taxonomy_id);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_type != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_type);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_name != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_name);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_description != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_description);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_phenotype != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_phenotype);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_population != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_population);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row26.sampleset_sex != null) {
								sb_tFileOutputDelimited_9
										.append(row26.sampleset_sex);
							}
							sb_tFileOutputDelimited_9
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

							nb_line_tFileOutputDelimited_9++;
							resourceMap.put("nb_line_tFileOutputDelimited_9",
									nb_line_tFileOutputDelimited_9);

							outtFileOutputDelimited_9
									.write(sb_tFileOutputDelimited_9.toString());

							tos_count_tFileOutputDelimited_9++;

							/**
							 * [tFileOutputDelimited_9 main ] stop
							 */

						} // End of branch "row25"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tFilterColumns_3 end ] start
				 */

				currentComponent = "tFilterColumns_3";

				globalMap.put("tFilterColumns_3_NB_LINE",
						nb_line_tFilterColumns_3);

				ok_Hash.put("tFilterColumns_3", true);
				end_Hash.put("tFilterColumns_3", System.currentTimeMillis());

				/**
				 * [tFilterColumns_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE",
						nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",
						fileName_tFileOutputDelimited_9);

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9",
						System.currentTimeMillis());

				tFileInputFullRow_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tFilterColumns_3 finally ] start
				 */

				currentComponent = "tFilterColumns_3";

				/**
				 * [tFilterColumns_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row39Struct implements
			routines.system.IPersistableRow<row39Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row39Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row38Struct implements
			routines.system.IPersistableRow<row38Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row38Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row38Struct row38 = new row38Struct();
				row39Struct row39 = new row39Struct();

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
							.substring(0, fileName_tFileOutputDelimited_6
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(0, fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitEvery_tFileOutputDelimited_6 = 1000;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /**
				 * Start field
				 * tFileOutputDelimited_6:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
				 * Start
				 * field tFileOutputDelimited_6:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null
						&& directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(
							directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(
						fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_6, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_6",
						outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6",
						nb_line_tFileOutputDelimited_6);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_6",
						isFileGenerated_tFileOutputDelimited_6);
				resourceMap.put("filetFileOutputDelimited_6",
						filetFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_1 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_1", false);
				start_Hash.put("tFileInputFullRow_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_1";

				int tos_count_tFileInputFullRow_1 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

				try {// }
					fid_tFileInputFullRow_1 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp2.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_1.nextRecord()) {// }
						row38 = null;
						boolean whetherReject_tFileInputFullRow_1 = false;
						row38 = new row38Struct();
						row38.line = fid_tFileInputFullRow_1.get(0);

						/**
						 * [tFileInputFullRow_1 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_1 main ] start
						 */

						currentComponent = "tFileInputFullRow_1";

						tos_count_tFileInputFullRow_1++;

						/**
						 * [tFileInputFullRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						row39 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches(
								(!row38.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row39 == null) {
								row39 = new row39Struct();
							}
							row39.line = row38.line;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */
						// Start of branch "row39"
						if (row39 != null) {

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
							if (row39.line != null) {
								sb_tFileOutputDelimited_6.append(row39.line);
							}
							sb_tFileOutputDelimited_6
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6",
									nb_line_tFileOutputDelimited_6);

							outtFileOutputDelimited_6
									.write(sb_tFileOutputDelimited_6.toString());

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

						} // End of branch "row39"

						/**
						 * [tFileInputFullRow_1 end ] start
						 */

						currentComponent = "tFileInputFullRow_1";

					}
				} finally {
					if (fid_tFileInputFullRow_1 != null) {
						fid_tFileInputFullRow_1.close();
					}
				}
				globalMap.put("tFileInputFullRow_1_NB_LINE",
						fid_tFileInputFullRow_1.getRowNumber());

				ok_Hash.put("tFileInputFullRow_1", true);
				end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE",
						nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",
						fileName_tFileOutputDelimited_6);

				if (isFileGenerated_tFileOutputDelimited_6
						&& nb_line_tFileOutputDelimited_6 == 0) {

					filetFileOutputDelimited_6.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6",
						System.currentTimeMillis());

				tFileRowCount_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_1 finally ] start
				 */

				currentComponent = "tFileInputFullRow_1";

				/**
				 * [tFileInputFullRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_6")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_6"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_6")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.workdir + "/tmp/temp.tmp";
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp.tmp")),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) > 1) {

					tFileInputDelimited_3Process(globalMap);
				}

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) <= 1) {

					tFixedFlowInput_4Process(globalMap);
				}

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row40Struct implements
			routines.system.IPersistableRow<row40Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String sampleset_size;

		public String getSampleset_size() {
			return this.sampleset_size;
		}

		public String sampleset_taxonomy_id;

		public String getSampleset_taxonomy_id() {
			return this.sampleset_taxonomy_id;
		}

		public String sampleset_type;

		public String getSampleset_type() {
			return this.sampleset_type;
		}

		public String sampleset_name;

		public String getSampleset_name() {
			return this.sampleset_name;
		}

		public String sampleset_description;

		public String getSampleset_description() {
			return this.sampleset_description;
		}

		public String sampleset_phenotype;

		public String getSampleset_phenotype() {
			return this.sampleset_phenotype;
		}

		public String sampleset_population;

		public String getSampleset_population() {
			return this.sampleset_population;
		}

		public String sampleset_sex;

		public String getSampleset_sex() {
			return this.sampleset_sex;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.sampleset_id = readString(dis);

					this.sampleset_size = readString(dis);

					this.sampleset_taxonomy_id = readString(dis);

					this.sampleset_type = readString(dis);

					this.sampleset_name = readString(dis);

					this.sampleset_description = readString(dis);

					this.sampleset_phenotype = readString(dis);

					this.sampleset_population = readString(dis);

					this.sampleset_sex = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.sampleset_size, dos);

				// String

				writeString(this.sampleset_taxonomy_id, dos);

				// String

				writeString(this.sampleset_type, dos);

				// String

				writeString(this.sampleset_name, dos);

				// String

				writeString(this.sampleset_description, dos);

				// String

				writeString(this.sampleset_phenotype, dos);

				// String

				writeString(this.sampleset_population, dos);

				// String

				writeString(this.sampleset_sex, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sampleset_id=" + sampleset_id);
			sb.append(",sampleset_size=" + sampleset_size);
			sb.append(",sampleset_taxonomy_id=" + sampleset_taxonomy_id);
			sb.append(",sampleset_type=" + sampleset_type);
			sb.append(",sampleset_name=" + sampleset_name);
			sb.append(",sampleset_description=" + sampleset_description);
			sb.append(",sampleset_phenotype=" + sampleset_phenotype);
			sb.append(",sampleset_population=" + sampleset_population);
			sb.append(",sampleset_sex=" + sampleset_sex);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row40Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row40Struct row40 = new row40Struct();
				row27Struct row27 = new row27Struct();
				row29Struct row29 = new row29Struct();
				row28Struct row28 = new row28Struct();
				row31Struct row31 = new row31Struct();

				/**
				 * [tFileOutputExcel_8 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_8", false);
				start_Hash
						.put("tFileOutputExcel_8", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_8";

				int tos_count_tFileOutputExcel_8 = 0;

				int columnIndex_tFileOutputExcel_8 = 0;

				String fileName_tFileOutputExcel_8 = context.workdir
						+ "/dbVar.xlsx";
				int nb_line_tFileOutputExcel_8 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
				xlsxTool_tFileOutputExcel_8.setSheet("SAMPLESETS");
				xlsxTool_tFileOutputExcel_8.setAppend(true, true);
				xlsxTool_tFileOutputExcel_8.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_8.setXY(true, 0, 3, true);

				xlsxTool_tFileOutputExcel_8
						.prepareXlsxFile(fileName_tFileOutputExcel_8);

				xlsxTool_tFileOutputExcel_8.setFont("");

				/**
				 * [tFileOutputExcel_8 begin ] stop
				 */

				/**
				 * [tUnpivotRow_2 begin ] start
				 */

				ok_Hash.put("tUnpivotRow_2", false);
				start_Hash.put("tUnpivotRow_2", System.currentTimeMillis());

				currentComponent = "tUnpivotRow_2";

				int tos_count_tUnpivotRow_2 = 0;

				/**
				 * [tUnpivotRow_2 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.workdir + "/bad/samplesets.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_4, false),
								context.encoding));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("sampleset_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_size");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_taxonomy_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_type");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_name");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_description");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_phenotype");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_population");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_sex");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("errorMessage");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_4",
						isFileGenerated_tFileOutputDelimited_4);
				resourceMap.put("filetFileOutputDelimited_4",
						filetFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tFilterColumns_6 begin ] start
				 */

				ok_Hash.put("tFilterColumns_6", false);
				start_Hash.put("tFilterColumns_6", System.currentTimeMillis());

				currentComponent = "tFilterColumns_6";

				int tos_count_tFilterColumns_6 = 0;

				int nb_line_tFilterColumns_6 = 0;

				/**
				 * [tFilterColumns_6 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_3 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_3", false);
				start_Hash.put("tSchemaComplianceCheck_3",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_3";

				int tos_count_tSchemaComplianceCheck_3 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_3 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row40Struct row40) {
						// validate nullable (empty as null)
						if ((row40.sampleset_id == null)
								|| ("".equals(row40.sampleset_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row40.sampleset_id != null) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_id != null) {
							if (row40.sampleset_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row40.sampleset_size == null)
								|| ("".equals(row40.sampleset_size))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row40.sampleset_size != null) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_size);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_size != null) {
							if (row40.sampleset_size.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_size:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row40.sampleset_taxonomy_id == null)
								|| ("".equals(row40.sampleset_taxonomy_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row40.sampleset_taxonomy_id != null) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_taxonomy_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_taxonomy_id != null) {
							if (row40.sampleset_taxonomy_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_taxonomy_id:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_type != null
									&& (!"".equals(row40.sampleset_type))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_type != null
								&& (!"".equals(row40.sampleset_type))) {
							if (row40.sampleset_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_type:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_name != null
									&& (!"".equals(row40.sampleset_name))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_name);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_name != null
								&& (!"".equals(row40.sampleset_name))) {
							if (row40.sampleset_name.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_name:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_description != null
									&& (!"".equals(row40.sampleset_description))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_description != null
								&& (!"".equals(row40.sampleset_description))) {
							if (row40.sampleset_description.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_description:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_phenotype != null
									&& (!"".equals(row40.sampleset_phenotype))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_phenotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_phenotype != null
								&& (!"".equals(row40.sampleset_phenotype))) {
							if (row40.sampleset_phenotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_phenotype:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_population != null
									&& (!"".equals(row40.sampleset_population))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_population);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_population != null
								&& (!"".equals(row40.sampleset_population))) {
							if (row40.sampleset_population.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_population:");
						errorMessageThrough = "";
						try {
							if (row40.sampleset_sex != null
									&& (!"".equals(row40.sampleset_sex))) {
								String tester_tSchemaComplianceCheck_3 = String
										.valueOf(row40.sampleset_sex);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row40.sampleset_sex != null
								&& (!"".equals(row40.sampleset_sex))) {
							if (row40.sampleset_sex.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_sex:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_3 rsvUtil_tSchemaComplianceCheck_3 = new RowSetValueUtil_tSchemaComplianceCheck_3();

				/**
				 * [tSchemaComplianceCheck_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				try {

					Object filename_tFileInputDelimited_3 = context.workdir
							+ "/tmp/temp.tmp";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0
								|| random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp.tmp", "US-ASCII",
								"\t", "\n", false, 1, 0, 1, -1, true);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null
							&& fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row40 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row40 = new row40Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row40.sampleset_id = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 1;

							row40.sampleset_size = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 2;

							row40.sampleset_taxonomy_id = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 3;

							row40.sampleset_type = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 4;

							row40.sampleset_name = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row40.sampleset_description = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row40.sampleset_phenotype = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row40.sampleset_population = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row40.sampleset_sex = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3);

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row40 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row40"
						if (row40 != null) {
							row28 = null;

							/**
							 * [tSchemaComplianceCheck_3 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_3";

							row27 = null;
							row28 = null;
							rsvUtil_tSchemaComplianceCheck_3
									.setRowValue_0(row40);
							if (rsvUtil_tSchemaComplianceCheck_3.ifPassedThrough) {
								row27 = new row27Struct();
								row27.sampleset_id = row40.sampleset_id;
								row27.sampleset_size = row40.sampleset_size;
								row27.sampleset_taxonomy_id = row40.sampleset_taxonomy_id;
								row27.sampleset_type = row40.sampleset_type;
								row27.sampleset_name = row40.sampleset_name;
								row27.sampleset_description = row40.sampleset_description;
								row27.sampleset_phenotype = row40.sampleset_phenotype;
								row27.sampleset_population = row40.sampleset_population;
								row27.sampleset_sex = row40.sampleset_sex;
							}
							if (!rsvUtil_tSchemaComplianceCheck_3.ifPassedThrough) {
								row28 = new row28Struct();
								row28.sampleset_id = row40.sampleset_id;
								row28.sampleset_size = row40.sampleset_size;
								row28.sampleset_taxonomy_id = row40.sampleset_taxonomy_id;
								row28.sampleset_type = row40.sampleset_type;
								row28.sampleset_name = row40.sampleset_name;
								row28.sampleset_description = row40.sampleset_description;
								row28.sampleset_phenotype = row40.sampleset_phenotype;
								row28.sampleset_population = row40.sampleset_population;
								row28.sampleset_sex = row40.sampleset_sex;
								row28.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_3.resultErrorCodeThrough);
								row28.errorMessage = rsvUtil_tSchemaComplianceCheck_3.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_3.reset();

							tos_count_tSchemaComplianceCheck_3++;

							/**
							 * [tSchemaComplianceCheck_3 main ] stop
							 */
							// Start of branch "row27"
							if (row27 != null) {

								/**
								 * [tUnpivotRow_2 main ] start
								 */

								currentComponent = "tUnpivotRow_2";

								/*
								 * &copy; British Telecommunications plc, 2009,
								 * All Rights Reserved. Licensed for general use
								 * under the terms of GPL v2.
								 */
								String[] pivotKeysArray = { "sampleset_id",
										"sampleset_size",
										"sampleset_taxonomy_id",
										"sampleset_type", "sampleset_name",
										"sampleset_description",
										"sampleset_phenotype",
										"sampleset_population", "sampleset_sex" };

								for (String field : pivotKeysArray) {

									row29.pivot_key = field;
									try {
										row29.pivot_value = row27.getClass()
												.getDeclaredField(field)
												.get(row27).toString();
									} catch (Exception e) {
										row29.pivot_value = null;
									}

									tos_count_tUnpivotRow_2++;

									/**
									 * [tUnpivotRow_2 main ] stop
									 */

									/**
									 * [tFileOutputExcel_8 main ] start
									 */

									currentComponent = "tFileOutputExcel_8";

									xlsxTool_tFileOutputExcel_8.addRow();

									if (row29.pivot_key != null) {

										xlsxTool_tFileOutputExcel_8
												.addCellValue(String
														.valueOf(row29.pivot_key));
									} else {
										xlsxTool_tFileOutputExcel_8
												.addCellNullValue();
									}

									if (row29.pivot_value != null) {

										xlsxTool_tFileOutputExcel_8
												.addCellValue(String
														.valueOf(row29.pivot_value));
									} else {
										xlsxTool_tFileOutputExcel_8
												.addCellNullValue();
									}

									nb_line_tFileOutputExcel_8++;

									tos_count_tFileOutputExcel_8++;

									/**
									 * [tFileOutputExcel_8 main ] stop
									 */
									// end for
								}

							} // End of branch "row27"

							// Start of branch "row28"
							if (row28 != null) {

								/**
								 * [tFilterColumns_6 main ] start
								 */

								currentComponent = "tFilterColumns_6";

								row31.sampleset_id = row28.sampleset_id;

								row31.sampleset_size = row28.sampleset_size;

								row31.sampleset_taxonomy_id = row28.sampleset_taxonomy_id;

								row31.sampleset_type = row28.sampleset_type;

								row31.sampleset_name = row28.sampleset_name;

								row31.sampleset_description = row28.sampleset_description;

								row31.sampleset_phenotype = row28.sampleset_phenotype;

								row31.sampleset_population = row28.sampleset_population;

								row31.sampleset_sex = row28.sampleset_sex;

								row31.errorMessage = row28.errorMessage;

								nb_line_tFilterColumns_6++;

								tos_count_tFilterColumns_6++;

								/**
								 * [tFilterColumns_6 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_4 main ] start
								 */

								currentComponent = "tFileOutputDelimited_4";

								StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
								if (row31.sampleset_id != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_id);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_size != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_size);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_taxonomy_id != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_taxonomy_id);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_type != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_type);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_name != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_name);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_description != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_description);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_phenotype != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_phenotype);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_population != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_population);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.sampleset_sex != null) {
									sb_tFileOutputDelimited_4
											.append(row31.sampleset_sex);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_tFileOutputDelimited_4);
								if (row31.errorMessage != null) {
									sb_tFileOutputDelimited_4
											.append(row31.errorMessage);
								}
								sb_tFileOutputDelimited_4
										.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

								nb_line_tFileOutputDelimited_4++;
								resourceMap.put(
										"nb_line_tFileOutputDelimited_4",
										nb_line_tFileOutputDelimited_4);

								outtFileOutputDelimited_4
										.write(sb_tFileOutputDelimited_4
												.toString());

								tos_count_tFileOutputDelimited_4++;

								/**
								 * [tFileOutputDelimited_4 main ] stop
								 */

							} // End of branch "row28"

						} // End of branch "row40"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_3 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_3";

				ok_Hash.put("tSchemaComplianceCheck_3", true);
				end_Hash.put("tSchemaComplianceCheck_3",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_3 end ] stop
				 */

				/**
				 * [tUnpivotRow_2 end ] start
				 */

				currentComponent = "tUnpivotRow_2";

				ok_Hash.put("tUnpivotRow_2", true);
				end_Hash.put("tUnpivotRow_2", System.currentTimeMillis());

				/**
				 * [tUnpivotRow_2 end ] stop
				 */

				/**
				 * [tFileOutputExcel_8 end ] start
				 */

				currentComponent = "tFileOutputExcel_8";

				xlsxTool_tFileOutputExcel_8.writeExcel(
						fileName_tFileOutputExcel_8, true);

				globalMap.put("tFileOutputExcel_8_NB_LINE",
						nb_line_tFileOutputExcel_8);

				ok_Hash.put("tFileOutputExcel_8", true);
				end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_8 end ] stop
				 */

				/**
				 * [tFilterColumns_6 end ] start
				 */

				currentComponent = "tFilterColumns_6";

				globalMap.put("tFilterColumns_6_NB_LINE",
						nb_line_tFilterColumns_6);

				ok_Hash.put("tFilterColumns_6", true);
				end_Hash.put("tFilterColumns_6", System.currentTimeMillis());

				/**
				 * [tFilterColumns_6 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				if (isFileGenerated_tFileOutputDelimited_4
						&& nb_line_tFileOutputDelimited_4 == 0) {

					filetFileOutputDelimited_4.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_3 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_3";

				/**
				 * [tSchemaComplianceCheck_3 finally ] stop
				 */

				/**
				 * [tUnpivotRow_2 finally ] start
				 */

				currentComponent = "tUnpivotRow_2";

				/**
				 * [tUnpivotRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_8 finally ] start
				 */

				currentComponent = "tFileOutputExcel_8";

				/**
				 * [tFileOutputExcel_8 finally ] stop
				 */

				/**
				 * [tFilterColumns_6 finally ] start
				 */

				currentComponent = "tFilterColumns_6";

				/**
				 * [tFilterColumns_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_4")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_4"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_4")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements
			routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row36Struct row36 = new row36Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						context.workdir + "/bad/samplesets.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
							.substring(0, fileName_tFileOutputDelimited_7
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(0, fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitEvery_tFileOutputDelimited_7 = 1000;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /**
				 * Start field
				 * tFileOutputDelimited_7:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
				 * Start
				 * field tFileOutputDelimited_7:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null
						&& directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(
							directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(
						fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_7, false),
								context.encoding));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("errorMessage");
					outtFileOutputDelimited_7
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7",
						outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7",
						nb_line_tFileOutputDelimited_7);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_7",
						isFileGenerated_tFileOutputDelimited_7);
				resourceMap.put("filetFileOutputDelimited_7",
						filetFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_4 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_4", false);
				start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_4";

				int tos_count_tFixedFlowInput_4 = 0;

				int nb_line_tFixedFlowInput_4 = 0;
				List<row36Struct> cacheList_tFixedFlowInput_4 = new java.util.ArrayList<row36Struct>();
				row36 = new row36Struct();
				row36.errorMessage = "Samplesets sheet should not be empty.";
				cacheList_tFixedFlowInput_4.add(row36);
				row36 = new row36Struct();
				row36.errorMessage = null;
				cacheList_tFixedFlowInput_4.add(row36);
				for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 1; i_tFixedFlowInput_4++) {
					for (row36Struct tmpRow_tFixedFlowInput_4 : cacheList_tFixedFlowInput_4) {
						nb_line_tFixedFlowInput_4++;
						row36 = tmpRow_tFixedFlowInput_4;

						/**
						 * [tFixedFlowInput_4 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_4 main ] start
						 */

						currentComponent = "tFixedFlowInput_4";

						tos_count_tFixedFlowInput_4++;

						/**
						 * [tFixedFlowInput_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_7 main ] start
						 */

						currentComponent = "tFileOutputDelimited_7";

						StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
						if (row36.errorMessage != null) {
							sb_tFileOutputDelimited_7
									.append(row36.errorMessage);
						}
						sb_tFileOutputDelimited_7
								.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

						nb_line_tFileOutputDelimited_7++;
						resourceMap.put("nb_line_tFileOutputDelimited_7",
								nb_line_tFileOutputDelimited_7);

						outtFileOutputDelimited_7
								.write(sb_tFileOutputDelimited_7.toString());

						tos_count_tFileOutputDelimited_7++;

						/**
						 * [tFileOutputDelimited_7 main ] stop
						 */

						/**
						 * [tFixedFlowInput_4 end ] start
						 */

						currentComponent = "tFixedFlowInput_4";

					}
				}
				cacheList_tFixedFlowInput_4.clear();
				globalMap.put("tFixedFlowInput_4_NB_LINE",
						nb_line_tFixedFlowInput_4);

				ok_Hash.put("tFixedFlowInput_4", true);
				end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE",
						nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",
						fileName_tFileOutputDelimited_7);

				if (isFileGenerated_tFileOutputDelimited_7
						&& nb_line_tFileOutputDelimited_7 == 0) {

					filetFileOutputDelimited_7.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_4 finally ] start
				 */

				currentComponent = "tFixedFlowInput_4";

				/**
				 * [tFixedFlowInput_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_7")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_7"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_7")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_3 begin ] start
				 */

				ok_Hash.put("tFileDelete_3", false);
				start_Hash.put("tFileDelete_3", System.currentTimeMillis());

				currentComponent = "tFileDelete_3";

				int tos_count_tFileDelete_3 = 0;

				/**
				 * [tFileDelete_3 begin ] stop
				 */

				/**
				 * [tFileDelete_3 main ] start
				 */

				currentComponent = "tFileDelete_3";

				class DeleteFoldertFileDelete_3 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}

				java.io.File filetFileDelete_3 = new java.io.File(
						context.workdir + "/tmp/");

				if (filetFileDelete_3.exists()
						&& filetFileDelete_3.isDirectory()) {
					DeleteFoldertFileDelete_3 dftFileDelete_3 = new DeleteFoldertFileDelete_3();
					if (dftFileDelete_3.delete(filetFileDelete_3)) {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"Path deleted.");
					} else {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"No path deleted.");
					}
				} else {
					globalMap.put("tFileDelete_3_CURRENT_STATUS",
							"Path does not exist or is invalid.");
					throw new RuntimeException(
							"Path does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_3_DELETE_PATH", context.workdir
						+ "/tmp/");

				tos_count_tFileDelete_3++;

				/**
				 * [tFileDelete_3 main ] stop
				 */

				/**
				 * [tFileDelete_3 end ] start
				 */

				currentComponent = "tFileDelete_3";

				ok_Hash.put("tFileDelete_3", true);
				end_Hash.put("tFileDelete_3", System.currentTimeMillis());

				/**
				 * [tFileDelete_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileDelete_3:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tFileList_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.workdir + "/bad";
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add("*.csv");
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler
							.globToPerl5(
									filemask_tFileList_1.toCharArray(),
									org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1,
									java.util.regex.Pattern.CASE_INSENSITIVE);

					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = false;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileList_1_NB_FILE")) < 1) {

					tFileDelete_1Process(globalMap);
				}

				if (((Integer) globalMap.get("tFileList_1_NB_FILE")) >= 1) {

					tFileDelete_2Process(globalMap);
				}

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_1 begin ] start
				 */

				ok_Hash.put("tFileDelete_1", false);
				start_Hash.put("tFileDelete_1", System.currentTimeMillis());

				currentComponent = "tFileDelete_1";

				int tos_count_tFileDelete_1 = 0;

				/**
				 * [tFileDelete_1 begin ] stop
				 */

				/**
				 * [tFileDelete_1 main ] start
				 */

				currentComponent = "tFileDelete_1";

				class DeleteFoldertFileDelete_1 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}

				java.io.File filetFileDelete_1 = new java.io.File(
						context.workdir + "/bad");

				if (filetFileDelete_1.exists()
						&& filetFileDelete_1.isDirectory()) {
					DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
					if (dftFileDelete_1.delete(filetFileDelete_1)) {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"Path deleted.");
					} else {
						globalMap.put("tFileDelete_1_CURRENT_STATUS",
								"No path deleted.");
					}
				} else {
					globalMap.put("tFileDelete_1_CURRENT_STATUS",
							"Path does not exist or is invalid.");
					throw new RuntimeException(
							"Path does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_1_DELETE_PATH", context.workdir
						+ "/bad");

				tos_count_tFileDelete_1++;

				/**
				 * [tFileDelete_1 main ] stop
				 */

				/**
				 * [tFileDelete_1 end ] start
				 */

				currentComponent = "tFileDelete_1";

				ok_Hash.put("tFileDelete_1", true);
				end_Hash.put("tFileDelete_1", System.currentTimeMillis());

				/**
				 * [tFileDelete_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_1 finally ] start
				 */

				currentComponent = "tFileDelete_1";

				/**
				 * [tFileDelete_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileDelete_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						context.workdir + "/dbVar.xlsx");
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS",
							"File does not exist or is invalid.");
					throw new RuntimeException(
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH", context.workdir
						+ "/dbVar.xlsx");

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println("\nThere are bad files. Check '"
						+ context.workdir
						+ "/bad' and correct the submission file.\n");

				globalMap.put("tDie_1_DIE_MESSAGE",
						"\nThere are bad files. Check '" + context.workdir
								+ "/bad' and correct the submission file.\n");
				globalMap.put("tDie_1_DIE_MESSAGES",
						"\nThere are bad files. Check '" + context.workdir
								+ "/bad' and correct the submission file.\n");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(1);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				/**
				 * [tFileDelete_2 end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String method_type;

		public String getMethod_type() {
			return this.method_type;
		}

		public String experiment_resolution;

		public String getExperiment_resolution() {
			return this.experiment_resolution;
		}

		public String method_platform;

		public String getMethod_platform() {
			return this.method_platform;
		}

		public String method_description;

		public String getMethod_description() {
			return this.method_description;
		}

		public String merged_experiment_ids;

		public String getMerged_experiment_ids() {
			return this.merged_experiment_ids;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String site;

		public String getSite() {
			return this.site;
		}

		public String library_abbrev;

		public String getLibrary_abbrev() {
			return this.library_abbrev;
		}

		public String library_link;

		public String getLibrary_link() {
			return this.library_link;
		}

		public String sequencing_center;

		public String getSequencing_center() {
			return this.sequencing_center;
		}

		public String hardware_type;

		public String getHardware_type() {
			return this.hardware_type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.experiment_id == null) ? 0
								: this.experiment_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.experiment_id == null) {
				if (other.experiment_id != null)
					return false;

			} else if (!this.experiment_id.equals(other.experiment_id))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.experiment_id = this.experiment_id;
			other.method_type = this.method_type;
			other.experiment_resolution = this.experiment_resolution;
			other.method_platform = this.method_platform;
			other.method_description = this.method_description;
			other.merged_experiment_ids = this.merged_experiment_ids;
			other.external_links = this.external_links;
			other.site = this.site;
			other.library_abbrev = this.library_abbrev;
			other.library_link = this.library_link;
			other.sequencing_center = this.sequencing_center;
			other.hardware_type = this.hardware_type;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.experiment_id = this.experiment_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.method_type = readString(dis, ois);

				this.experiment_resolution = readString(dis, ois);

				this.method_platform = readString(dis, ois);

				this.method_description = readString(dis, ois);

				this.merged_experiment_ids = readString(dis, ois);

				this.external_links = readString(dis, ois);

				this.site = readString(dis, ois);

				this.library_abbrev = readString(dis, ois);

				this.library_link = readString(dis, ois);

				this.sequencing_center = readString(dis, ois);

				this.hardware_type = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.method_type, dos, oos);

				writeString(this.experiment_resolution, dos, oos);

				writeString(this.method_platform, dos, oos);

				writeString(this.method_description, dos, oos);

				writeString(this.merged_experiment_ids, dos, oos);

				writeString(this.external_links, dos, oos);

				writeString(this.site, dos, oos);

				writeString(this.library_abbrev, dos, oos);

				writeString(this.library_link, dos, oos);

				writeString(this.sequencing_center, dos, oos);

				writeString(this.hardware_type, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",method_type=" + method_type);
			sb.append(",experiment_resolution=" + experiment_resolution);
			sb.append(",method_platform=" + method_platform);
			sb.append(",method_description=" + method_description);
			sb.append(",merged_experiment_ids=" + merged_experiment_ids);
			sb.append(",external_links=" + external_links);
			sb.append(",site=" + site);
			sb.append(",library_abbrev=" + library_abbrev);
			sb.append(",library_link=" + library_link);
			sb.append(",sequencing_center=" + sequencing_center);
			sb.append(",hardware_type=" + hardware_type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.experiment_id,
					other.experiment_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tFileInputExcel_5 -
				// inputs:(after_tFileInputExcel_4) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_1 - inputs:(row5,row18,row15)
				// outputs:(toMetaDataFile)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tFileInputExcel_5 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_5", false);
				start_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_5";

				int tos_count_tFileInputExcel_5 = 0;

				Object source_tFileInputExcel_5 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_5 = null;

				if (source_tFileInputExcel_5 instanceof java.io.InputStream
						|| source_tFileInputExcel_5 instanceof String) {
					excelReader_tFileInputExcel_5 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_5.addSheetName("EXPERIMENTS",
							false);
					int start_column_tFileInputExcel_5 = 1 - 1;
					int end_column_tFileInputExcel_5 = 20 - 1;
					if (start_column_tFileInputExcel_5 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_5 = start_column_tFileInputExcel_5 + 12 - 1;

					} else if (end_column_tFileInputExcel_5 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_5 = end_column_tFileInputExcel_5 - 12 + 1;
					}

					if (end_column_tFileInputExcel_5 < 0
							|| start_column_tFileInputExcel_5 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_5 = end_column_tFileInputExcel_5;

					int header_tFileInputExcel_5 = 3;
					int limit_tFileInputExcel_5 = 50;

					int nb_line_tFileInputExcel_5 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_5 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_5 = df_tFileInputExcel_5
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_5 instanceof String) {
						excelReader_tFileInputExcel_5.parse(
								(String) source_tFileInputExcel_5, "UTF-8");
					} else if (source_tFileInputExcel_5 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_5.parse(
								(java.io.InputStream) source_tFileInputExcel_5,
								"UTF-8");
					}

					while ((header_tFileInputExcel_5--) > 0
							&& excelReader_tFileInputExcel_5.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_5.next();
					}

					while (excelReader_tFileInputExcel_5.hasNext()) {
						int emptyColumnCount_tFileInputExcel_5 = 0;

						if (limit_tFileInputExcel_5 != -1
								&& nb_line_tFileInputExcel_5 >= limit_tFileInputExcel_5) {
							excelReader_tFileInputExcel_5.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_5 = excelReader_tFileInputExcel_5
								.next();
						row18 = null;
						row18 = null;
						int tempRowLength_tFileInputExcel_5 = 12;

						int columnIndex_tFileInputExcel_5 = 0;

						String[] temp_row_tFileInputExcel_5 = new String[tempRowLength_tFileInputExcel_5];

						for (int i_tFileInputExcel_5 = 0; i_tFileInputExcel_5 < tempRowLength_tFileInputExcel_5; i_tFileInputExcel_5++) {
							int current_tFileInputExcel_5 = i_tFileInputExcel_5
									+ start_column_tFileInputExcel_5;
							if (current_tFileInputExcel_5 <= actual_end_column_tFileInputExcel_5) {
								if (current_tFileInputExcel_5 < row_tFileInputExcel_5
										.size()) {
									String column_tFileInputExcel_5 = row_tFileInputExcel_5
											.get(current_tFileInputExcel_5);
									if (column_tFileInputExcel_5 != null) {
										temp_row_tFileInputExcel_5[i_tFileInputExcel_5] = column_tFileInputExcel_5;
									} else {
										temp_row_tFileInputExcel_5[i_tFileInputExcel_5] = "";
									}
								} else {
									temp_row_tFileInputExcel_5[i_tFileInputExcel_5] = "";
								}
							} else {
								temp_row_tFileInputExcel_5[i_tFileInputExcel_5] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_5 = false;
						row18 = new row18Struct();
						int curColNum_tFileInputExcel_5 = -1;
						String curColName_tFileInputExcel_5 = "";

						try {
							columnIndex_tFileInputExcel_5 = 0;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "experiment_id";

								row18.experiment_id = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.experiment_id = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 1;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "method_type";

								row18.method_type = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.method_type = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 2;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "experiment_resolution";

								row18.experiment_resolution = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.experiment_resolution = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 3;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "method_platform";

								row18.method_platform = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.method_platform = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 4;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "method_description";

								row18.method_description = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.method_description = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 5;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "merged_experiment_ids";

								row18.merged_experiment_ids = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.merged_experiment_ids = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 6;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "external_links";

								row18.external_links = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.external_links = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 7;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "site";

								row18.site = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.site = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 8;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "library_abbrev";

								row18.library_abbrev = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.library_abbrev = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 9;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "library_link";

								row18.library_link = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.library_link = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 10;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "sequencing_center";

								row18.sequencing_center = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.sequencing_center = null;
								emptyColumnCount_tFileInputExcel_5++;
							}
							columnIndex_tFileInputExcel_5 = 11;

							if (temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_5 = columnIndex_tFileInputExcel_5
										+ start_column_tFileInputExcel_5 + 1;
								curColName_tFileInputExcel_5 = "hardware_type";

								row18.hardware_type = temp_row_tFileInputExcel_5[columnIndex_tFileInputExcel_5]
										.trim();
							} else {
								row18.hardware_type = null;
								emptyColumnCount_tFileInputExcel_5++;
							}

							nb_line_tFileInputExcel_5++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_5 = true;
							System.err.println(e.getMessage());
							row18 = null;
						}

						/**
						 * [tFileInputExcel_5 begin ] stop
						 */

						/**
						 * [tFileInputExcel_5 main ] start
						 */

						currentComponent = "tFileInputExcel_5";

						tos_count_tFileInputExcel_5++;

						/**
						 * [tFileInputExcel_5 main ] stop
						 */
						// Start of branch "row18"
						if (row18 != null) {

							/**
							 * [tAdvancedHash_row18 main ] start
							 */

							currentComponent = "tAdvancedHash_row18";

							row18Struct row18_HashRow = new row18Struct();

							row18_HashRow.experiment_id = row18.experiment_id;

							row18_HashRow.method_type = row18.method_type;

							row18_HashRow.experiment_resolution = row18.experiment_resolution;

							row18_HashRow.method_platform = row18.method_platform;

							row18_HashRow.method_description = row18.method_description;

							row18_HashRow.merged_experiment_ids = row18.merged_experiment_ids;

							row18_HashRow.external_links = row18.external_links;

							row18_HashRow.site = row18.site;

							row18_HashRow.library_abbrev = row18.library_abbrev;

							row18_HashRow.library_link = row18.library_link;

							row18_HashRow.sequencing_center = row18.sequencing_center;

							row18_HashRow.hardware_type = row18.hardware_type;

							tHash_Lookup_row18.put(row18_HashRow);

							tos_count_tAdvancedHash_row18++;

							/**
							 * [tAdvancedHash_row18 main ] stop
							 */

						} // End of branch "row18"

						/**
						 * [tFileInputExcel_5 end ] start
						 */

						currentComponent = "tFileInputExcel_5";

					}

					try {
						if (excelReader_tFileInputExcel_5 != null) {
							excelReader_tFileInputExcel_5.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_5) {
						if (!(e_tFileInputExcel_5.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_5.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_5_NB_LINE",
							nb_line_tFileInputExcel_5);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_5", true);
				end_Hash.put("tFileInputExcel_5", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_5 finally ] start
				 */

				currentComponent = "tFileInputExcel_5";

				/**
				 * [tFileInputExcel_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_5_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_convert2dbVar = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String analysis_type;

		public String getAnalysis_type() {
			return this.analysis_type;
		}

		public String reference_type;

		public String getReference_type() {
			return this.reference_type;
		}

		public String reference_version;

		public String getReference_version() {
			return this.reference_version;
		}

		public String reference_value;

		public String getReference_value() {
			return this.reference_value;
		}

		public String analysis_description;

		public String getAnalysis_description() {
			return this.analysis_description;
		}

		public String detection_method;

		public String getDetection_method() {
			return this.detection_method;
		}

		public String detection_description;

		public String getDetection_description() {
			return this.detection_description;
		}

		public String sequencing_type;

		public String getSequencing_type() {
			return this.sequencing_type;
		}

		public String software_name;

		public String getSoftware_name() {
			return this.software_name;
		}

		public String software_version;

		public String getSoftware_version() {
			return this.software_version;
		}

		public String software_type;

		public String getSoftware_type() {
			return this.software_type;
		}

		public String relevant_parameters;

		public String getRelevant_parameters() {
			return this.relevant_parameters;
		}

		public String comments;

		public String getComments() {
			return this.comments;
		}

		public String output_file_name;

		public String getOutput_file_name() {
			return this.output_file_name;
		}

		public String analyst_email;

		public String getAnalyst_email() {
			return this.analyst_email;
		}

		public String output_format;

		public String getOutput_format() {
			return this.output_format;
		}

		public String selection_criteria;

		public String getSelection_criteria() {
			return this.selection_criteria;
		}

		public String selection_criteria_description;

		public String getSelection_criteria_description() {
			return this.selection_criteria_description;
		}

		public String criteriaUsedToMergeSubAnalysisHits;

		public String getCriteriaUsedToMergeSubAnalysisHits() {
			return this.criteriaUsedToMergeSubAnalysisHits;
		}

		public String discarded_samples;

		public String getDiscarded_samples() {
			return this.discarded_samples;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.experiment_id == null) ? 0
								: this.experiment_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.experiment_id == null) {
				if (other.experiment_id != null)
					return false;

			} else if (!this.experiment_id.equals(other.experiment_id))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.experiment_id = this.experiment_id;
			other.analysis_type = this.analysis_type;
			other.reference_type = this.reference_type;
			other.reference_version = this.reference_version;
			other.reference_value = this.reference_value;
			other.analysis_description = this.analysis_description;
			other.detection_method = this.detection_method;
			other.detection_description = this.detection_description;
			other.sequencing_type = this.sequencing_type;
			other.software_name = this.software_name;
			other.software_version = this.software_version;
			other.software_type = this.software_type;
			other.relevant_parameters = this.relevant_parameters;
			other.comments = this.comments;
			other.output_file_name = this.output_file_name;
			other.analyst_email = this.analyst_email;
			other.output_format = this.output_format;
			other.selection_criteria = this.selection_criteria;
			other.selection_criteria_description = this.selection_criteria_description;
			other.criteriaUsedToMergeSubAnalysisHits = this.criteriaUsedToMergeSubAnalysisHits;
			other.discarded_samples = this.discarded_samples;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.experiment_id = this.experiment_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_convert2dbVar.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_convert2dbVar.length == 0) {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_convert2dbVar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_convert2dbVar, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_convert2dbVar, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_convert2dbVar) {

				try {

					int length = 0;

					this.experiment_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.experiment_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.analysis_type = readString(dis, ois);

				this.reference_type = readString(dis, ois);

				this.reference_version = readString(dis, ois);

				this.reference_value = readString(dis, ois);

				this.analysis_description = readString(dis, ois);

				this.detection_method = readString(dis, ois);

				this.detection_description = readString(dis, ois);

				this.sequencing_type = readString(dis, ois);

				this.software_name = readString(dis, ois);

				this.software_version = readString(dis, ois);

				this.software_type = readString(dis, ois);

				this.relevant_parameters = readString(dis, ois);

				this.comments = readString(dis, ois);

				this.output_file_name = readString(dis, ois);

				this.analyst_email = readString(dis, ois);

				this.output_format = readString(dis, ois);

				this.selection_criteria = readString(dis, ois);

				this.selection_criteria_description = readString(dis, ois);

				this.criteriaUsedToMergeSubAnalysisHits = readString(dis, ois);

				this.discarded_samples = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.analysis_type, dos, oos);

				writeString(this.reference_type, dos, oos);

				writeString(this.reference_version, dos, oos);

				writeString(this.reference_value, dos, oos);

				writeString(this.analysis_description, dos, oos);

				writeString(this.detection_method, dos, oos);

				writeString(this.detection_description, dos, oos);

				writeString(this.sequencing_type, dos, oos);

				writeString(this.software_name, dos, oos);

				writeString(this.software_version, dos, oos);

				writeString(this.software_type, dos, oos);

				writeString(this.relevant_parameters, dos, oos);

				writeString(this.comments, dos, oos);

				writeString(this.output_file_name, dos, oos);

				writeString(this.analyst_email, dos, oos);

				writeString(this.output_format, dos, oos);

				writeString(this.selection_criteria, dos, oos);

				writeString(this.selection_criteria_description, dos, oos);

				writeString(this.criteriaUsedToMergeSubAnalysisHits, dos, oos);

				writeString(this.discarded_samples, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("experiment_id=" + experiment_id);
			sb.append(",analysis_type=" + analysis_type);
			sb.append(",reference_type=" + reference_type);
			sb.append(",reference_version=" + reference_version);
			sb.append(",reference_value=" + reference_value);
			sb.append(",analysis_description=" + analysis_description);
			sb.append(",detection_method=" + detection_method);
			sb.append(",detection_description=" + detection_description);
			sb.append(",sequencing_type=" + sequencing_type);
			sb.append(",software_name=" + software_name);
			sb.append(",software_version=" + software_version);
			sb.append(",software_type=" + software_type);
			sb.append(",relevant_parameters=" + relevant_parameters);
			sb.append(",comments=" + comments);
			sb.append(",output_file_name=" + output_file_name);
			sb.append(",analyst_email=" + analyst_email);
			sb.append(",output_format=" + output_format);
			sb.append(",selection_criteria=" + selection_criteria);
			sb.append(",selection_criteria_description="
					+ selection_criteria_description);
			sb.append(",criteriaUsedToMergeSubAnalysisHits="
					+ criteriaUsedToMergeSubAnalysisHits);
			sb.append(",discarded_samples=" + discarded_samples);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.experiment_id,
					other.experiment_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileInputExcel_6 -
				// inputs:(after_tFileInputExcel_4) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_1 - inputs:(row5,row18,row15)
				// outputs:(toMetaDataFile)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileInputExcel_6 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_6", false);
				start_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_6";

				int tos_count_tFileInputExcel_6 = 0;

				Object source_tFileInputExcel_6 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_6 = null;

				if (source_tFileInputExcel_6 instanceof java.io.InputStream
						|| source_tFileInputExcel_6 instanceof String) {
					excelReader_tFileInputExcel_6 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_6.addSheetName("ANALYSIS",
							false);
					int start_column_tFileInputExcel_6 = 1 - 1;
					int end_column_tFileInputExcel_6 = -1;
					if (start_column_tFileInputExcel_6 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_6 = start_column_tFileInputExcel_6 + 21 - 1;

					} else if (end_column_tFileInputExcel_6 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_6 = end_column_tFileInputExcel_6 - 21 + 1;
					}

					if (end_column_tFileInputExcel_6 < 0
							|| start_column_tFileInputExcel_6 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_6 = end_column_tFileInputExcel_6;

					int header_tFileInputExcel_6 = 3;
					int limit_tFileInputExcel_6 = 50;

					int nb_line_tFileInputExcel_6 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_6 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_6 = df_tFileInputExcel_6
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_6 instanceof String) {
						excelReader_tFileInputExcel_6.parse(
								(String) source_tFileInputExcel_6, "UTF-8");
					} else if (source_tFileInputExcel_6 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_6.parse(
								(java.io.InputStream) source_tFileInputExcel_6,
								"UTF-8");
					}

					while ((header_tFileInputExcel_6--) > 0
							&& excelReader_tFileInputExcel_6.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_6.next();
					}

					while (excelReader_tFileInputExcel_6.hasNext()) {
						int emptyColumnCount_tFileInputExcel_6 = 0;

						if (limit_tFileInputExcel_6 != -1
								&& nb_line_tFileInputExcel_6 >= limit_tFileInputExcel_6) {
							excelReader_tFileInputExcel_6.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_6 = excelReader_tFileInputExcel_6
								.next();
						row15 = null;
						row15 = null;
						int tempRowLength_tFileInputExcel_6 = 21;

						int columnIndex_tFileInputExcel_6 = 0;

						String[] temp_row_tFileInputExcel_6 = new String[tempRowLength_tFileInputExcel_6];

						for (int i_tFileInputExcel_6 = 0; i_tFileInputExcel_6 < tempRowLength_tFileInputExcel_6; i_tFileInputExcel_6++) {
							int current_tFileInputExcel_6 = i_tFileInputExcel_6
									+ start_column_tFileInputExcel_6;
							if (current_tFileInputExcel_6 <= actual_end_column_tFileInputExcel_6) {
								if (current_tFileInputExcel_6 < row_tFileInputExcel_6
										.size()) {
									String column_tFileInputExcel_6 = row_tFileInputExcel_6
											.get(current_tFileInputExcel_6);
									if (column_tFileInputExcel_6 != null) {
										temp_row_tFileInputExcel_6[i_tFileInputExcel_6] = column_tFileInputExcel_6;
									} else {
										temp_row_tFileInputExcel_6[i_tFileInputExcel_6] = "";
									}
								} else {
									temp_row_tFileInputExcel_6[i_tFileInputExcel_6] = "";
								}
							} else {
								temp_row_tFileInputExcel_6[i_tFileInputExcel_6] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_6 = false;
						row15 = new row15Struct();
						int curColNum_tFileInputExcel_6 = -1;
						String curColName_tFileInputExcel_6 = "";

						try {
							columnIndex_tFileInputExcel_6 = 0;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "experiment_id";

								row15.experiment_id = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.experiment_id = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 1;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "analysis_type";

								row15.analysis_type = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.analysis_type = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 2;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "reference_type";

								row15.reference_type = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.reference_type = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 3;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "reference_version";

								row15.reference_version = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.reference_version = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 4;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "reference_value";

								row15.reference_value = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.reference_value = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 5;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "analysis_description";

								row15.analysis_description = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.analysis_description = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 6;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "detection_method";

								row15.detection_method = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.detection_method = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 7;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "detection_description";

								row15.detection_description = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.detection_description = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 8;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "sequencing_type";

								row15.sequencing_type = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.sequencing_type = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 9;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "software_name";

								row15.software_name = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.software_name = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 10;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "software_version";

								row15.software_version = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.software_version = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 11;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "software_type";

								row15.software_type = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.software_type = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 12;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "relevant_parameters";

								row15.relevant_parameters = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.relevant_parameters = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 13;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "comments";

								row15.comments = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.comments = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 14;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "output_file_name";

								row15.output_file_name = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.output_file_name = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 15;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "analyst_email";

								row15.analyst_email = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.analyst_email = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 16;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "output_format";

								row15.output_format = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.output_format = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 17;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "selection_criteria";

								row15.selection_criteria = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.selection_criteria = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 18;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "selection_criteria_description";

								row15.selection_criteria_description = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.selection_criteria_description = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 19;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "criteriaUsedToMergeSubAnalysisHits";

								row15.criteriaUsedToMergeSubAnalysisHits = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.criteriaUsedToMergeSubAnalysisHits = null;
								emptyColumnCount_tFileInputExcel_6++;
							}
							columnIndex_tFileInputExcel_6 = 20;

							if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
										+ start_column_tFileInputExcel_6 + 1;
								curColName_tFileInputExcel_6 = "discarded_samples";

								row15.discarded_samples = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6]
										.trim();
							} else {
								row15.discarded_samples = null;
								emptyColumnCount_tFileInputExcel_6++;
							}

							nb_line_tFileInputExcel_6++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_6 = true;
							System.err.println(e.getMessage());
							row15 = null;
						}

						/**
						 * [tFileInputExcel_6 begin ] stop
						 */

						/**
						 * [tFileInputExcel_6 main ] start
						 */

						currentComponent = "tFileInputExcel_6";

						tos_count_tFileInputExcel_6++;

						/**
						 * [tFileInputExcel_6 main ] stop
						 */
						// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.experiment_id = row15.experiment_id;

							row15_HashRow.analysis_type = row15.analysis_type;

							row15_HashRow.reference_type = row15.reference_type;

							row15_HashRow.reference_version = row15.reference_version;

							row15_HashRow.reference_value = row15.reference_value;

							row15_HashRow.analysis_description = row15.analysis_description;

							row15_HashRow.detection_method = row15.detection_method;

							row15_HashRow.detection_description = row15.detection_description;

							row15_HashRow.sequencing_type = row15.sequencing_type;

							row15_HashRow.software_name = row15.software_name;

							row15_HashRow.software_version = row15.software_version;

							row15_HashRow.software_type = row15.software_type;

							row15_HashRow.relevant_parameters = row15.relevant_parameters;

							row15_HashRow.comments = row15.comments;

							row15_HashRow.output_file_name = row15.output_file_name;

							row15_HashRow.analyst_email = row15.analyst_email;

							row15_HashRow.output_format = row15.output_format;

							row15_HashRow.selection_criteria = row15.selection_criteria;

							row15_HashRow.selection_criteria_description = row15.selection_criteria_description;

							row15_HashRow.criteriaUsedToMergeSubAnalysisHits = row15.criteriaUsedToMergeSubAnalysisHits;

							row15_HashRow.discarded_samples = row15.discarded_samples;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFileInputExcel_6 end ] start
						 */

						currentComponent = "tFileInputExcel_6";

					}

					try {
						if (excelReader_tFileInputExcel_6 != null) {
							excelReader_tFileInputExcel_6.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_6) {
						if (!(e_tFileInputExcel_6.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_6.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_6_NB_LINE",
							nb_line_tFileInputExcel_6);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_6", true);
				end_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_6 finally ] start
				 */

				currentComponent = "tFileInputExcel_6";

				/**
				 * [tFileInputExcel_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final convert2dbVar convert2dbVarClass = new convert2dbVar();

		int exitCode = convert2dbVarClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = convert2dbVar.class
					.getClassLoader().getResourceAsStream(
							"checkgnpcnv/convert2dbvar_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.encoding = (String) context.getProperty("encoding");
			context.excelFileIn = (String) context.getProperty("excelFileIn");
			context.properties = (String) context.getProperty("properties");
			context.tab = (String) context.getProperty("tab");
			context.workdir = (String) context.getProperty("workdir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("excelFileIn")) {
				context.excelFileIn = (String) parentContextMap
						.get("excelFileIn");
			}
			if (parentContextMap.containsKey("properties")) {
				context.properties = (String) parentContextMap
						.get("properties");
			}
			if (parentContextMap.containsKey("tab")) {
				context.tab = (String) parentContextMap.get("tab");
			}
			if (parentContextMap.containsKey("workdir")) {
				context.workdir = (String) parentContextMap.get("workdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : convert2dbVar");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 786420 characters generated by Talend Open Studio for Data Integration on the
 * 25 août 2017 11:49:39 CEST
 ************************************************************************************************/
