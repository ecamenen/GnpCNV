// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package checkgnpcnv.checkvariantcalls_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: checkVariantCalls Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.2.1.20160704_1411
 * @status 
 */
public class checkVariantCalls implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (encoding != null) {

				this.setProperty("encoding", encoding.toString());

			}

			if (excelFileIn != null) {

				this.setProperty("excelFileIn", excelFileIn.toString());

			}

			if (properties != null) {

				this.setProperty("properties", properties.toString());

			}

			if (workdir != null) {

				this.setProperty("workdir", workdir.toString());

			}

		}

		public String encoding;

		public String getEncoding() {
			return this.encoding;
		}

		public String excelFileIn;

		public String getExcelFileIn() {
			return this.excelFileIn;
		}

		public String properties;

		public String getProperties() {
			return this.properties;
		}

		public String workdir;

		public String getWorkdir() {
			return this.workdir;
		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "checkVariantCalls";
	private final String projectName = "CHECKGNPCNV";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					checkVariantCalls.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(checkVariantCalls.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputFullRow_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputFullRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileRowCount_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileRowCount_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tSchemaComplianceCheck_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterColumns_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tBufferInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tBufferInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterColumns_6_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputFullRow_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileRowCount_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tBufferInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("* " + jobName);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tFileInputExcel_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row3Struct row3 = new row3Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						context.workdir + "/tmp/temp.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
							.substring(0, fileName_tFileOutputDelimited_4
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(0, fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitEvery_tFileOutputDelimited_4 = 1000;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /**
				 * Start field
				 * tFileOutputDelimited_4:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
				 * Start
				 * field tFileOutputDelimited_4:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null
						&& directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(
							directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(
						fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_4, false),
								context.encoding));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("variant_call_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("variant_call_type");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("experiment_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sample_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sampleset_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("assembly");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("chr");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("contig");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("outer_start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("inner_start");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("inner_stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("outer_stop");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("insertion_length");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("variant_region_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("copy_number");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ref_copy_number");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("description");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("validation");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("zygosity");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("origin");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("phenotype");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("alt_status");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("assembly_");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("from_chr");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("from_coord");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("from_strand");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("to_chr");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("to_coord");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("to_strand");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("mutation_id");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("mutation_order");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("mutation_molecule");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("external_links");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("evidence");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("sequence");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("support");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("support_count");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("log2_value");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("five_outer_flank");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("five_inner_flank");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("three_inner_flank");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("three_outer_flank");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("allele_dose");
					outtFileOutputDelimited_4
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4",
						outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4",
						nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				Object source_tFileInputExcel_1 = context.workdir
						+ context.excelFileIn;
				com.talend.excel.xssf.event.ExcelReader excelReader_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof java.io.InputStream
						|| source_tFileInputExcel_1 instanceof String) {
					excelReader_tFileInputExcel_1 = new com.talend.excel.xssf.event.ExcelReader();
				} else {
					throw new java.lang.Exception(
							"The data source should be specified as Inputstream or File Path!");
				}

				try {
					excelReader_tFileInputExcel_1.addSheetName("VARIANT CALLS",
							false);
					int start_column_tFileInputExcel_1 = 1 - 1;
					int end_column_tFileInputExcel_1 = -1;
					if (start_column_tFileInputExcel_1 >= 0) {// follow start
																// column

						end_column_tFileInputExcel_1 = start_column_tFileInputExcel_1 + 45 - 1;

					} else if (end_column_tFileInputExcel_1 >= 0) {// follow end
																	// column
						start_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 - 45 + 1;
					}

					if (end_column_tFileInputExcel_1 < 0
							|| start_column_tFileInputExcel_1 < 0) {
						throw new RuntimeException(
								"Error start column and end column.");
					}
					int actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1;

					int header_tFileInputExcel_1 = 4;
					int limit_tFileInputExcel_1 = -1;

					int nb_line_tFileInputExcel_1 = 0;

					// for the number format
					java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
							"#.####################################");
					char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1
							.getDecimalFormatSymbols().getDecimalSeparator();

					if (source_tFileInputExcel_1 instanceof String) {
						excelReader_tFileInputExcel_1.parse(
								(String) source_tFileInputExcel_1, "UTF-8");
					} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
						excelReader_tFileInputExcel_1.parse(
								(java.io.InputStream) source_tFileInputExcel_1,
								"UTF-8");
					}

					while ((header_tFileInputExcel_1--) > 0
							&& excelReader_tFileInputExcel_1.hasNext()) {// skip
																			// the
																			// header
						excelReader_tFileInputExcel_1.next();
					}

					while (excelReader_tFileInputExcel_1.hasNext()) {
						int emptyColumnCount_tFileInputExcel_1 = 0;

						if (limit_tFileInputExcel_1 != -1
								&& nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
							excelReader_tFileInputExcel_1.stopRead();
							break;
						}

						java.util.List<String> row_tFileInputExcel_1 = excelReader_tFileInputExcel_1
								.next();
						row13 = null;
						row3 = null;
						int tempRowLength_tFileInputExcel_1 = 45;

						int columnIndex_tFileInputExcel_1 = 0;

						String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];

						for (int i_tFileInputExcel_1 = 0; i_tFileInputExcel_1 < tempRowLength_tFileInputExcel_1; i_tFileInputExcel_1++) {
							int current_tFileInputExcel_1 = i_tFileInputExcel_1
									+ start_column_tFileInputExcel_1;
							if (current_tFileInputExcel_1 <= actual_end_column_tFileInputExcel_1) {
								if (current_tFileInputExcel_1 < row_tFileInputExcel_1
										.size()) {
									String column_tFileInputExcel_1 = row_tFileInputExcel_1
											.get(current_tFileInputExcel_1);
									if (column_tFileInputExcel_1 != null) {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = column_tFileInputExcel_1;
									} else {
										temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
									}
								} else {
									temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
								}
							} else {
								temp_row_tFileInputExcel_1[i_tFileInputExcel_1] = "";
							}
						}

						boolean whetherReject_tFileInputExcel_1 = false;
						row13 = new row13Struct();
						int curColNum_tFileInputExcel_1 = -1;
						String curColName_tFileInputExcel_1 = "";

						try {
							columnIndex_tFileInputExcel_1 = 0;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "variant_call_id";

								row13.variant_call_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.variant_call_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 1;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "variant_call_type";

								row13.variant_call_type = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.variant_call_type = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 2;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "experiment_id";

								row13.experiment_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.experiment_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 3;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "sample_id";

								row13.sample_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.sample_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 4;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "sampleset_id";

								row13.sampleset_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.sampleset_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 5;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "assembly";

								row13.assembly = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.assembly = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 6;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "chr";

								row13.chr = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.chr = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 7;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "contig";

								row13.contig = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.contig = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 8;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "outer_start";

								row13.outer_start = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.outer_start = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 9;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "start";

								row13.start = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.start = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 10;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "inner_start";

								row13.inner_start = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.inner_start = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 11;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "inner_stop";

								row13.inner_stop = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.inner_stop = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 12;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "stop";

								row13.stop = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.stop = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 13;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "outer_stop";

								row13.outer_stop = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.outer_stop = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 14;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "insertion_length";

								row13.insertion_length = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.insertion_length = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 15;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "variant_region_id";

								row13.variant_region_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.variant_region_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 16;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "copy_number";

								row13.copy_number = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.copy_number = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 17;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "ref_copy_number";

								row13.ref_copy_number = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.ref_copy_number = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 18;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "description";

								row13.description = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.description = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 19;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "validation";

								row13.validation = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.validation = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 20;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "zygosity";

								row13.zygosity = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.zygosity = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 21;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "origin";

								row13.origin = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.origin = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 22;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "phenotype";

								row13.phenotype = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.phenotype = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 23;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "alt_status";

								row13.alt_status = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.alt_status = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 24;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "assembly_";

								row13.assembly_ = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.assembly_ = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 25;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "from_chr";

								row13.from_chr = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.from_chr = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 26;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "from_coord";

								row13.from_coord = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.from_coord = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 27;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "from_strand";

								row13.from_strand = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.from_strand = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 28;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "to_chr";

								row13.to_chr = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.to_chr = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 29;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "to_coord";

								row13.to_coord = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.to_coord = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 30;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "to_strand";

								row13.to_strand = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.to_strand = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 31;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "mutation_id";

								row13.mutation_id = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.mutation_id = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 32;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "mutation_order";

								row13.mutation_order = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.mutation_order = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 33;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "mutation_molecule";

								row13.mutation_molecule = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.mutation_molecule = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 34;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "external_links";

								row13.external_links = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.external_links = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 35;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "evidence";

								row13.evidence = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.evidence = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 36;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "sequence";

								row13.sequence = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.sequence = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 37;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "support";

								row13.support = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.support = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 38;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "support_count";

								row13.support_count = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.support_count = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 39;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "log2_value";

								row13.log2_value = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.log2_value = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 40;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "five_outer_flank";

								row13.five_outer_flank = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.five_outer_flank = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 41;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "five_inner_flank";

								row13.five_inner_flank = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.five_inner_flank = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 42;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "three_inner_flank";

								row13.three_inner_flank = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.three_inner_flank = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 43;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "three_outer_flank";

								row13.three_outer_flank = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.three_outer_flank = null;
								emptyColumnCount_tFileInputExcel_1++;
							}
							columnIndex_tFileInputExcel_1 = 44;

							if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
									.trim().length() > 0) {
								curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
										+ start_column_tFileInputExcel_1 + 1;
								curColName_tFileInputExcel_1 = "allele_dose";

								row13.allele_dose = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1]
										.trim();
							} else {
								row13.allele_dose = null;
								emptyColumnCount_tFileInputExcel_1++;
							}

							nb_line_tFileInputExcel_1++;

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputExcel_1 = true;
							row3 = new row3Struct();
							row3.variant_call_id = row13.variant_call_id;
							row3.variant_call_type = row13.variant_call_type;
							row3.experiment_id = row13.experiment_id;
							row3.sample_id = row13.sample_id;
							row3.sampleset_id = row13.sampleset_id;
							row3.assembly = row13.assembly;
							row3.chr = row13.chr;
							row3.contig = row13.contig;
							row3.outer_start = row13.outer_start;
							row3.start = row13.start;
							row3.inner_start = row13.inner_start;
							row3.inner_stop = row13.inner_stop;
							row3.stop = row13.stop;
							row3.outer_stop = row13.outer_stop;
							row3.insertion_length = row13.insertion_length;
							row3.variant_region_id = row13.variant_region_id;
							row3.copy_number = row13.copy_number;
							row3.ref_copy_number = row13.ref_copy_number;
							row3.description = row13.description;
							row3.validation = row13.validation;
							row3.zygosity = row13.zygosity;
							row3.origin = row13.origin;
							row3.phenotype = row13.phenotype;
							row3.alt_status = row13.alt_status;
							row3.assembly_ = row13.assembly_;
							row3.from_chr = row13.from_chr;
							row3.from_coord = row13.from_coord;
							row3.from_strand = row13.from_strand;
							row3.to_chr = row13.to_chr;
							row3.to_coord = row13.to_coord;
							row3.to_strand = row13.to_strand;
							row3.mutation_id = row13.mutation_id;
							row3.mutation_order = row13.mutation_order;
							row3.mutation_molecule = row13.mutation_molecule;
							row3.external_links = row13.external_links;
							row3.evidence = row13.evidence;
							row3.sequence = row13.sequence;
							row3.support = row13.support;
							row3.support_count = row13.support_count;
							row3.log2_value = row13.log2_value;
							row3.five_outer_flank = row13.five_outer_flank;
							row3.five_inner_flank = row13.five_inner_flank;
							row3.three_inner_flank = row13.three_inner_flank;
							row3.three_outer_flank = row13.three_outer_flank;
							row3.allele_dose = row13.allele_dose;
							row3.errorMessage = e.getMessage() + " - Line: "
									+ tos_count_tFileInputExcel_1 + " column: "
									+ curColName_tFileInputExcel_1 + " (No. "
									+ curColNum_tFileInputExcel_1 + ")";
							row13 = null;
						}

						/**
						 * [tFileInputExcel_1 begin ] stop
						 */

						/**
						 * [tFileInputExcel_1 main ] start
						 */

						currentComponent = "tFileInputExcel_1";

						tos_count_tFileInputExcel_1++;

						/**
						 * [tFileInputExcel_1 main ] stop
						 */
						// Start of branch "row13"
						if (row13 != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
							if (row13.variant_call_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.variant_call_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.variant_call_type != null) {
								sb_tFileOutputDelimited_4
										.append(row13.variant_call_type);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.experiment_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.experiment_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.sample_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.sample_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.sampleset_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.sampleset_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.assembly != null) {
								sb_tFileOutputDelimited_4
										.append(row13.assembly);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.chr != null) {
								sb_tFileOutputDelimited_4.append(row13.chr);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.contig != null) {
								sb_tFileOutputDelimited_4.append(row13.contig);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.outer_start != null) {
								sb_tFileOutputDelimited_4
										.append(row13.outer_start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.start != null) {
								sb_tFileOutputDelimited_4.append(row13.start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.inner_start != null) {
								sb_tFileOutputDelimited_4
										.append(row13.inner_start);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.inner_stop != null) {
								sb_tFileOutputDelimited_4
										.append(row13.inner_stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.stop != null) {
								sb_tFileOutputDelimited_4.append(row13.stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.outer_stop != null) {
								sb_tFileOutputDelimited_4
										.append(row13.outer_stop);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.insertion_length != null) {
								sb_tFileOutputDelimited_4
										.append(row13.insertion_length);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.variant_region_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.variant_region_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.copy_number != null) {
								sb_tFileOutputDelimited_4
										.append(row13.copy_number);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.ref_copy_number != null) {
								sb_tFileOutputDelimited_4
										.append(row13.ref_copy_number);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.description != null) {
								sb_tFileOutputDelimited_4
										.append(row13.description);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.validation != null) {
								sb_tFileOutputDelimited_4
										.append(row13.validation);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.zygosity != null) {
								sb_tFileOutputDelimited_4
										.append(row13.zygosity);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.origin != null) {
								sb_tFileOutputDelimited_4.append(row13.origin);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.phenotype != null) {
								sb_tFileOutputDelimited_4
										.append(row13.phenotype);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.alt_status != null) {
								sb_tFileOutputDelimited_4
										.append(row13.alt_status);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.assembly_ != null) {
								sb_tFileOutputDelimited_4
										.append(row13.assembly_);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.from_chr != null) {
								sb_tFileOutputDelimited_4
										.append(row13.from_chr);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.from_coord != null) {
								sb_tFileOutputDelimited_4
										.append(row13.from_coord);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.from_strand != null) {
								sb_tFileOutputDelimited_4
										.append(row13.from_strand);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.to_chr != null) {
								sb_tFileOutputDelimited_4.append(row13.to_chr);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.to_coord != null) {
								sb_tFileOutputDelimited_4
										.append(row13.to_coord);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.to_strand != null) {
								sb_tFileOutputDelimited_4
										.append(row13.to_strand);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.mutation_id != null) {
								sb_tFileOutputDelimited_4
										.append(row13.mutation_id);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.mutation_order != null) {
								sb_tFileOutputDelimited_4
										.append(row13.mutation_order);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.mutation_molecule != null) {
								sb_tFileOutputDelimited_4
										.append(row13.mutation_molecule);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.external_links != null) {
								sb_tFileOutputDelimited_4
										.append(row13.external_links);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.evidence != null) {
								sb_tFileOutputDelimited_4
										.append(row13.evidence);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.sequence != null) {
								sb_tFileOutputDelimited_4
										.append(row13.sequence);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.support != null) {
								sb_tFileOutputDelimited_4.append(row13.support);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.support_count != null) {
								sb_tFileOutputDelimited_4
										.append(row13.support_count);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.log2_value != null) {
								sb_tFileOutputDelimited_4
										.append(row13.log2_value);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.five_outer_flank != null) {
								sb_tFileOutputDelimited_4
										.append(row13.five_outer_flank);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.five_inner_flank != null) {
								sb_tFileOutputDelimited_4
										.append(row13.five_inner_flank);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.three_inner_flank != null) {
								sb_tFileOutputDelimited_4
										.append(row13.three_inner_flank);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.three_outer_flank != null) {
								sb_tFileOutputDelimited_4
										.append(row13.three_outer_flank);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_tFileOutputDelimited_4);
							if (row13.allele_dose != null) {
								sb_tFileOutputDelimited_4
										.append(row13.allele_dose);
							}
							sb_tFileOutputDelimited_4
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4",
									nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4
									.write(sb_tFileOutputDelimited_4.toString());

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

						} // End of branch "row13"

						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tDie_1 main ] start
							 */

							currentComponent = "tDie_1";

							globalMap.put("tDie_1_DIE_PRIORITY", 5);
							System.err.println("Variant sheet badly formated.");

							globalMap.put("tDie_1_DIE_MESSAGE",
									"Variant sheet badly formated.");
							globalMap.put("tDie_1_DIE_MESSAGES",
									"Variant sheet badly formated.");
							currentComponent = "tDie_1";
							status = "failure";
							errorCode = new Integer(1);
							globalMap.put("tDie_1_DIE_CODE", errorCode);

							if (true) {
								throw new TDieException();
							}

							tos_count_tDie_1++;

							/**
							 * [tDie_1 main ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputExcel_1 end ] start
						 */

						currentComponent = "tFileInputExcel_1";

					}

					try {
						if (excelReader_tFileInputExcel_1 != null) {
							excelReader_tFileInputExcel_1.handleException();
						}
					} catch (java.lang.Exception e_tFileInputExcel_1) {
						if (!(e_tFileInputExcel_1.getCause() instanceof com.talend.excel.xssf.event.EnoughDataException)) {

							System.err
									.println(e_tFileInputExcel_1.getMessage());

						}
					}

					globalMap.put("tFileInputExcel_1_NB_LINE",
							nb_line_tFileInputExcel_1);

				} finally {

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE",
						nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",
						fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4",
						System.currentTimeMillis());

				tFileInputFullRow_1Process(globalMap);

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tFileInputExcel_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tFileRowCount_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String line;

		public String getLine() {
			return this.line;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.line = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.line, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("line=" + line);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputFullRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.workdir + "/tmp/temp2.tmp")).getAbsolutePath()
						.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, false),
								context.encoding));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1",
						isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1",
						filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputFullRow_1 begin ] start
				 */

				ok_Hash.put("tFileInputFullRow_1", false);
				start_Hash.put("tFileInputFullRow_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputFullRow_1";

				int tos_count_tFileInputFullRow_1 = 0;

				org.talend.fileprocess.FileInputDelimited fid_tFileInputFullRow_1 = null;

				try {// }
					fid_tFileInputFullRow_1 = new org.talend.fileprocess.FileInputDelimited(
							context.workdir + "/tmp/temp.tmp", "ISO-8859-15",
							"", "\n", true, 0, 0, -1, -1, false);
					while (fid_tFileInputFullRow_1.nextRecord()) {// }
						row11 = null;
						boolean whetherReject_tFileInputFullRow_1 = false;
						row11 = new row11Struct();
						row11.line = fid_tFileInputFullRow_1.get(0);

						/**
						 * [tFileInputFullRow_1 begin ] stop
						 */

						/**
						 * [tFileInputFullRow_1 main ] start
						 */

						currentComponent = "tFileInputFullRow_1";

						tos_count_tFileInputFullRow_1++;

						/**
						 * [tFileInputFullRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						row12 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
								"&&");
						ope_tFilterRow_1.matches(
								(!row11.line.matches("^\t*$")),
								"advanced condition failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row12 == null) {
								row12 = new row12Struct();
							}
							row12.line = row11.line;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */
						// Start of branch "row12"
						if (row12 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (row12.line != null) {
								sb_tFileOutputDelimited_1.append(row12.line);
							}
							sb_tFileOutputDelimited_1
									.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1",
									nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1
									.write(sb_tFileOutputDelimited_1.toString());

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

						} // End of branch "row12"

						/**
						 * [tFileInputFullRow_1 end ] start
						 */

						currentComponent = "tFileInputFullRow_1";

					}
				} finally {
					if (fid_tFileInputFullRow_1 != null) {
						fid_tFileInputFullRow_1.close();
					}
				}
				globalMap.put("tFileInputFullRow_1_NB_LINE",
						fid_tFileInputFullRow_1.getRowNumber());

				ok_Hash.put("tFileInputFullRow_1", true);
				end_Hash.put("tFileInputFullRow_1", System.currentTimeMillis());

				/**
				 * [tFileInputFullRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1
						&& nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputFullRow_1 finally ] start
				 */

				currentComponent = "tFileInputFullRow_1";

				/**
				 * [tFileInputFullRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputFullRow_1_SUBPROCESS_STATE", 1);
	}

	public void tFileRowCount_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileRowCount_1 begin ] start
				 */

				ok_Hash.put("tFileRowCount_1", false);
				start_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				currentComponent = "tFileRowCount_1";

				int tos_count_tFileRowCount_1 = 0;

				/**
				 * [tFileRowCount_1 begin ] stop
				 */

				/**
				 * [tFileRowCount_1 main ] start
				 */

				currentComponent = "tFileRowCount_1";

				String tmp_tFileRowCount_1 = context.workdir + "/tmp/temp2.tmp";
				int emptyLineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xlsx"))
					throw new RuntimeException("not support excel 2007");
				int lineCount_tFileRowCount_1 = 0;
				if (tmp_tFileRowCount_1.toLowerCase().endsWith(".xls")) {
					final jxl.WorkbookSettings wbs_tFileRowCount_1 = new jxl.WorkbookSettings();
					wbs_tFileRowCount_1.setEncoding(context.encoding);
					final jxl.Workbook wb_tFileRowCount_1 = jxl.Workbook
							.getWorkbook(new java.io.BufferedInputStream(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp")),
									wbs_tFileRowCount_1);

					java.util.List<jxl.Sheet> sheets_tFileRowCount_1 = new java.util.ArrayList<jxl.Sheet>();
					;
					sheets_tFileRowCount_1 = java.util.Arrays
							.<jxl.Sheet> asList(wb_tFileRowCount_1.getSheets());

					if (sheets_tFileRowCount_1.size() <= 0) {
						wb_tFileRowCount_1.close();
						throw new RuntimeException("Special sheets not exist!");
					}

					for (jxl.Sheet sheet_tFileRowCount_1 : sheets_tFileRowCount_1) {
						int one_sheet_rows = sheet_tFileRowCount_1.getRows();
						lineCount_tFileRowCount_1 += one_sheet_rows;

						for (int i_tFileRowCount_1 = 0; i_tFileRowCount_1 < one_sheet_rows; i_tFileRowCount_1++) {
							jxl.Cell[] sheet_row = sheet_tFileRowCount_1
									.getRow(i_tFileRowCount_1);

							boolean bIsEmptyRow = true;
							for (jxl.Cell cell : sheet_row) {
								if (cell.getContents() != null) {
									bIsEmptyRow = false;
									break;
								}
							}
							emptyLineCount_tFileRowCount_1 += bIsEmptyRow ? 1
									: 0;
						}
					}
					wb_tFileRowCount_1.close();

				} else {
					java.io.BufferedReader br_tFileRowCount_1 = new java.io.BufferedReader(
							new java.io.InputStreamReader(
									new java.io.FileInputStream(context.workdir
											+ "/tmp/temp2.tmp"),
									context.encoding));
					String rowSeparator_tFileRowCount_1 = "\n";
					byte[] bytes_tFileRowCount_1 = rowSeparator_tFileRowCount_1
							.getBytes();
					int index_tFileRowCount_1 = 0, oneChar_tFileRowCount_1 = 0, tipEmptyLineCount_tFileRowCount_1 = 0;
					boolean bTipEmptyFlagOpen_tFileRowCount_1 = true, bReadyEOF_tFileRowCount_1 = false;

					if (bytes_tFileRowCount_1.length > 0) {
						while ((oneChar_tFileRowCount_1 = br_tFileRowCount_1
								.read()) != -1) {
							if (oneChar_tFileRowCount_1 == bytes_tFileRowCount_1[index_tFileRowCount_1]) {

								if (index_tFileRowCount_1 < bytes_tFileRowCount_1.length - 1) {
									index_tFileRowCount_1++;
									continue; // match next char
								}

								if (index_tFileRowCount_1 == bytes_tFileRowCount_1.length - 1) {
									lineCount_tFileRowCount_1++;
									if (bTipEmptyFlagOpen_tFileRowCount_1) {
										tipEmptyLineCount_tFileRowCount_1++;
										emptyLineCount_tFileRowCount_1++;
									}
									bReadyEOF_tFileRowCount_1 = false; // next
																		// row
																		// must
																		// be
																		// have
																		// char(or
																		// EOF
																		// flag)
									bTipEmptyFlagOpen_tFileRowCount_1 = true;
									index_tFileRowCount_1 = 0;
								}

							} else {
								bReadyEOF_tFileRowCount_1 = true;
								bTipEmptyFlagOpen_tFileRowCount_1 = false;
								tipEmptyLineCount_tFileRowCount_1 = 0;
								index_tFileRowCount_1 = 0;
							}
						}

						if (bReadyEOF_tFileRowCount_1)
							lineCount_tFileRowCount_1++; // add last row if not
															// end by row
															// separator

						if (bTipEmptyFlagOpen_tFileRowCount_1) {
							lineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
							emptyLineCount_tFileRowCount_1 -= tipEmptyLineCount_tFileRowCount_1;
						}
					}
					br_tFileRowCount_1.close();
				}

				globalMap.put("tFileRowCount_1_COUNT",
						lineCount_tFileRowCount_1);

				tos_count_tFileRowCount_1++;

				/**
				 * [tFileRowCount_1 main ] stop
				 */

				/**
				 * [tFileRowCount_1 end ] start
				 */

				currentComponent = "tFileRowCount_1";

				ok_Hash.put("tFileRowCount_1", true);
				end_Hash.put("tFileRowCount_1", System.currentTimeMillis());

				if (((Integer) globalMap.get("tFileRowCount_1_COUNT")) > 1) {

					tFileInputDelimited_2Process(globalMap);
				}

				/**
				 * [tFileRowCount_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileRowCount_1 finally ] start
				 */

				currentComponent = "tFileRowCount_1";

				/**
				 * [tFileRowCount_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileRowCount_1_SUBPROCESS_STATE", 1);
	}

	public static class copyOfcheckLookup_0Struct implements
			routines.system.IPersistableRow<copyOfcheckLookup_0Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.errorMessage = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcheckLookup_0Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOftoMetaDataFileStruct implements
			routines.system.IPersistableRow<copyOfcopyOftoMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOftoMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcopyOfcheckLookupStruct implements
			routines.system.IPersistableRow<copyOfcopyOfcheckLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcopyOfcheckLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOftoMetaDataFileStruct implements
			routines.system.IPersistableRow<copyOftoMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOftoMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcheckLookupStruct implements
			routines.system.IPersistableRow<copyOfcheckLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcheckLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class toMetaDataFileStruct implements
			routines.system.IPersistableRow<toMetaDataFileStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(toMetaDataFileStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class checkLookupStruct implements
			routines.system.IPersistableRow<checkLookupStruct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(checkLookupStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorCode;

		public String getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorCode = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorCode=" + errorCode);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_2Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tFixedFlowInput_1Process(globalMap);
				tFixedFlowInput_2Process(globalMap);
				tFixedFlowInput_3Process(globalMap);
				tFixedFlowInput_4Process(globalMap);

				row1Struct row1 = new row1Struct();
				row5Struct row5 = new row5Struct();
				toMetaDataFileStruct toMetaDataFile = new toMetaDataFileStruct();
				copyOftoMetaDataFileStruct copyOftoMetaDataFile = new copyOftoMetaDataFileStruct();
				copyOfcopyOftoMetaDataFileStruct copyOfcopyOftoMetaDataFile = new copyOfcopyOftoMetaDataFileStruct();
				copyOfcheckLookup_0Struct copyOfcheckLookup_0 = new copyOfcheckLookup_0Struct();
				copyOfcopyOfcheckLookupStruct copyOfcopyOfcheckLookup = new copyOfcopyOfcheckLookupStruct();
				copyOfcheckLookupStruct copyOfcheckLookup = new copyOfcheckLookupStruct();
				checkLookupStruct checkLookup = new checkLookupStruct();
				row9Struct row9 = new row9Struct();
				row6Struct row6 = new row6Struct();

				/**
				 * [tBufferOutput_5 begin ] start
				 */

				ok_Hash.put("tBufferOutput_5", false);
				start_Hash.put("tBufferOutput_5", System.currentTimeMillis());

				currentComponent = "tBufferOutput_5";

				int tos_count_tBufferOutput_5 = 0;

				/**
				 * [tBufferOutput_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcheckLookup_0Struct copyOfcheckLookup_0_tmp = new copyOfcheckLookup_0Struct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tBufferOutput_4 begin ] start
				 */

				ok_Hash.put("tBufferOutput_4", false);
				start_Hash.put("tBufferOutput_4", System.currentTimeMillis());

				currentComponent = "tBufferOutput_4";

				int tos_count_tBufferOutput_4 = 0;

				/**
				 * [tBufferOutput_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfcopyOftoMetaDataFileStruct copyOfcopyOftoMetaDataFile_tmp = new copyOfcopyOftoMetaDataFileStruct();
				copyOfcopyOfcheckLookupStruct copyOfcopyOfcheckLookup_tmp = new copyOfcopyOfcheckLookupStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tBufferOutput_1 begin ] start
				 */

				ok_Hash.put("tBufferOutput_1", false);
				start_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				currentComponent = "tBufferOutput_1";

				int tos_count_tBufferOutput_1 = 0;

				/**
				 * [tBufferOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOftoMetaDataFileStruct copyOftoMetaDataFile_tmp = new copyOftoMetaDataFileStruct();
				copyOfcheckLookupStruct copyOfcheckLookup_tmp = new copyOfcheckLookupStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tBufferOutput_3 begin ] start
				 */

				ok_Hash.put("tBufferOutput_3", false);
				start_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				currentComponent = "tBufferOutput_3";

				int tos_count_tBufferOutput_3 = 0;

				/**
				 * [tBufferOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				toMetaDataFileStruct toMetaDataFile_tmp = new toMetaDataFileStruct();
				checkLookupStruct checkLookup_tmp = new checkLookupStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tBufferOutput_2 begin ] start
				 */

				ok_Hash.put("tBufferOutput_2", false);
				start_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				currentComponent = "tBufferOutput_2";

				int tos_count_tBufferOutput_2 = 0;

				/**
				 * [tBufferOutput_2 begin ] stop
				 */

				/**
				 * [tFilterColumns_1 begin ] start
				 */

				ok_Hash.put("tFilterColumns_1", false);
				start_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				currentComponent = "tFilterColumns_1";

				int tos_count_tFilterColumns_1 = 0;

				int nb_line_tFilterColumns_1 = 0;

				/**
				 * [tFilterColumns_1 begin ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 begin ] start
				 */

				ok_Hash.put("tSchemaComplianceCheck_1", false);
				start_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				currentComponent = "tSchemaComplianceCheck_1";

				int tos_count_tSchemaComplianceCheck_1 = 0;

				class RowSetValueUtil_tSchemaComplianceCheck_1 {

					boolean ifPassedThrough = true;
					int errorCodeThrough = 0;
					String errorMessageThrough = "";
					int resultErrorCodeThrough = 0;
					String resultErrorMessageThrough = "";
					String tmpContentThrough = null;

					boolean ifPassed = true;
					int errorCode = 0;
					String errorMessage = "";

					void handleBigdecimalPrecision(String data, int iPrecision,
							int maxLength) {
						// number of digits before the decimal point(ignoring
						// frontend zeroes)
						int len1 = 0;
						int len2 = 0;
						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
						if (data.startsWith("-")) {
							data = data.substring(1);
						}
						data = org.apache.commons.lang.StringUtils.stripStart(
								data, "0");

						if (data.indexOf(".") >= 0) {
							len1 = data.indexOf(".");
							data = org.apache.commons.lang.StringUtils
									.stripEnd(data, "0");
							len2 = data.length() - (len1 + 1);
						} else {
							len1 = data.length();
						}

						if (iPrecision < len2) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|precision Non-matches";
						} else if (maxLength < len1 + iPrecision) {
							ifPassed = false;
							errorCode += 8;
							errorMessage += "|invalid Length setting is unsuitable for Precision";
						}
					}

					int handleErrorCode(int errorCode, int resultErrorCode) {
						if (errorCode > 0) {
							if (resultErrorCode > 0) {
								resultErrorCode = 16;
							} else {
								resultErrorCode = errorCode;
							}
						}
						return resultErrorCode;
					}

					String handleErrorMessage(String errorMessage,
							String resultErrorMessage, String columnLabel) {
						if (errorMessage.length() > 0) {
							if (resultErrorMessage.length() > 0) {
								resultErrorMessage += ";"
										+ errorMessage.replaceFirst("\\|",
												columnLabel);
							} else {
								resultErrorMessage = errorMessage.replaceFirst(
										"\\|", columnLabel);
							}
						}
						return resultErrorMessage;
					}

					void reset() {
						ifPassedThrough = true;
						errorCodeThrough = 0;
						errorMessageThrough = "";
						resultErrorCodeThrough = 0;
						resultErrorMessageThrough = "";
						tmpContentThrough = null;

						ifPassed = true;
						errorCode = 0;
						errorMessage = "";
					}

					void setRowValue_0(row1Struct row1) {
						// validate nullable (empty as null)
						if ((row1.variant_call_id == null)
								|| ("".equals(row1.variant_call_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.variant_call_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.variant_call_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.variant_call_id != null) {
							if (row1.variant_call_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"variant_call_id:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row1.variant_call_type == null)
								|| ("".equals(row1.variant_call_type))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.variant_call_type != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.variant_call_type);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.variant_call_type != null) {
							if (row1.variant_call_type.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"variant_call_type:");
						errorMessageThrough = "";
						// validate nullable (empty as null)
						if ((row1.experiment_id == null)
								|| ("".equals(row1.experiment_id))) {
							ifPassedThrough = false;
							errorCodeThrough += 4;
							errorMessageThrough += "|empty or null";
						}
						try {
							if (row1.experiment_id != null) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.experiment_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.experiment_id != null) {
							if (row1.experiment_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"experiment_id:");
						errorMessageThrough = "";
						try {
							if (row1.sample_id != null
									&& (!"".equals(row1.sample_id))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sample_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sample_id != null
								&& (!"".equals(row1.sample_id))) {
							if (row1.sample_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sample_id:");
						errorMessageThrough = "";
						try {
							if (row1.sampleset_id != null
									&& (!"".equals(row1.sampleset_id))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sampleset_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sampleset_id != null
								&& (!"".equals(row1.sampleset_id))) {
							if (row1.sampleset_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sampleset_id:");
						errorMessageThrough = "";
						try {
							if (row1.assembly != null
									&& (!"".equals(row1.assembly))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.assembly);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.assembly != null
								&& (!"".equals(row1.assembly))) {
							if (row1.assembly.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"assembly:");
						errorMessageThrough = "";
						try {
							if (row1.chr != null && (!"".equals(row1.chr))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.chr);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.chr != null && (!"".equals(row1.chr))) {
							if (row1.chr.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"chr:");
						errorMessageThrough = "";
						try {
							if (row1.contig != null
									&& (!"".equals(row1.contig))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.contig);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.contig != null && (!"".equals(row1.contig))) {
							if (row1.contig.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"contig:");
						errorMessageThrough = "";
						try {
							if (row1.outer_start != null
									&& (!"".equals(row1.outer_start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.outer_start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.outer_start != null
								&& (!"".equals(row1.outer_start))) {
							if (row1.outer_start.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"outer_start:");
						errorMessageThrough = "";
						try {
							if (row1.start != null && (!"".equals(row1.start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.start != null && (!"".equals(row1.start))) {
							if (row1.start.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"start:");
						errorMessageThrough = "";
						try {
							if (row1.inner_start != null
									&& (!"".equals(row1.inner_start))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.inner_start);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.inner_start != null
								&& (!"".equals(row1.inner_start))) {
							if (row1.inner_start.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"inner_start:");
						errorMessageThrough = "";
						try {
							if (row1.inner_stop != null
									&& (!"".equals(row1.inner_stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.inner_stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.inner_stop != null
								&& (!"".equals(row1.inner_stop))) {
							if (row1.inner_stop.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"inner_stop:");
						errorMessageThrough = "";
						try {
							if (row1.stop != null && (!"".equals(row1.stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.stop != null && (!"".equals(row1.stop))) {
							if (row1.stop.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"stop:");
						errorMessageThrough = "";
						try {
							if (row1.outer_stop != null
									&& (!"".equals(row1.outer_stop))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.outer_stop);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.outer_stop != null
								&& (!"".equals(row1.outer_stop))) {
							if (row1.outer_stop.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"outer_stop:");
						errorMessageThrough = "";
						try {
							if (row1.insertion_length != null
									&& (!"".equals(row1.insertion_length))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.insertion_length);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.insertion_length != null
								&& (!"".equals(row1.insertion_length))) {
							if (row1.insertion_length.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"insertion_length:");
						errorMessageThrough = "";
						try {
							if (row1.variant_region_id != null
									&& (!"".equals(row1.variant_region_id))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.variant_region_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.variant_region_id != null
								&& (!"".equals(row1.variant_region_id))) {
							if (row1.variant_region_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"variant_region_id:");
						errorMessageThrough = "";
						try {
							if (row1.copy_number != null
									&& (!"".equals(row1.copy_number))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.copy_number);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.copy_number != null
								&& (!"".equals(row1.copy_number))) {
							if (row1.copy_number.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"copy_number:");
						errorMessageThrough = "";
						try {
							if (row1.ref_copy_number != null
									&& (!"".equals(row1.ref_copy_number))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.ref_copy_number);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.ref_copy_number != null
								&& (!"".equals(row1.ref_copy_number))) {
							if (row1.ref_copy_number.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"ref_copy_number:");
						errorMessageThrough = "";
						try {
							if (row1.description != null
									&& (!"".equals(row1.description))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.description);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.description != null
								&& (!"".equals(row1.description))) {
							if (row1.description.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"description:");
						errorMessageThrough = "";
						try {
							if (row1.validation != null
									&& (!"".equals(row1.validation))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.validation);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.validation != null
								&& (!"".equals(row1.validation))) {
							if (row1.validation.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"validation:");
						errorMessageThrough = "";
						try {
							if (row1.zygosity != null
									&& (!"".equals(row1.zygosity))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.zygosity);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.zygosity != null
								&& (!"".equals(row1.zygosity))) {
							if (row1.zygosity.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"zygosity:");
						errorMessageThrough = "";
						try {
							if (row1.origin != null
									&& (!"".equals(row1.origin))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.origin);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.origin != null && (!"".equals(row1.origin))) {
							if (row1.origin.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"origin:");
						errorMessageThrough = "";
						try {
							if (row1.phenotype != null
									&& (!"".equals(row1.phenotype))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.phenotype);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.phenotype != null
								&& (!"".equals(row1.phenotype))) {
							if (row1.phenotype.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"phenotype:");
						errorMessageThrough = "";
						try {
							if (row1.alt_status != null
									&& (!"".equals(row1.alt_status))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.alt_status);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.alt_status != null
								&& (!"".equals(row1.alt_status))) {
							if (row1.alt_status.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"alt_status:");
						errorMessageThrough = "";
						try {
							if (row1.assembly_ != null
									&& (!"".equals(row1.assembly_))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.assembly_);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.assembly_ != null
								&& (!"".equals(row1.assembly_))) {
							if (row1.assembly_.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"assembly_:");
						errorMessageThrough = "";
						try {
							if (row1.from_chr != null
									&& (!"".equals(row1.from_chr))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.from_chr);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.from_chr != null
								&& (!"".equals(row1.from_chr))) {
							if (row1.from_chr.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"from_chr:");
						errorMessageThrough = "";
						try {
							if (row1.from_coord != null
									&& (!"".equals(row1.from_coord))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.from_coord);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.from_coord != null
								&& (!"".equals(row1.from_coord))) {
							if (row1.from_coord.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"from_coord:");
						errorMessageThrough = "";
						try {
							if (row1.from_strand != null
									&& (!"".equals(row1.from_strand))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.from_strand);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.from_strand != null
								&& (!"".equals(row1.from_strand))) {
							if (row1.from_strand.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"from_strand:");
						errorMessageThrough = "";
						try {
							if (row1.to_chr != null
									&& (!"".equals(row1.to_chr))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.to_chr);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.to_chr != null && (!"".equals(row1.to_chr))) {
							if (row1.to_chr.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"to_chr:");
						errorMessageThrough = "";
						try {
							if (row1.to_coord != null
									&& (!"".equals(row1.to_coord))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.to_coord);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.to_coord != null
								&& (!"".equals(row1.to_coord))) {
							if (row1.to_coord.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"to_coord:");
						errorMessageThrough = "";
						try {
							if (row1.to_strand != null
									&& (!"".equals(row1.to_strand))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.to_strand);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.to_strand != null
								&& (!"".equals(row1.to_strand))) {
							if (row1.to_strand.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"to_strand:");
						errorMessageThrough = "";
						try {
							if (row1.mutation_id != null
									&& (!"".equals(row1.mutation_id))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.mutation_id);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.mutation_id != null
								&& (!"".equals(row1.mutation_id))) {
							if (row1.mutation_id.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"mutation_id:");
						errorMessageThrough = "";
						try {
							if (row1.mutation_order != null
									&& (!"".equals(row1.mutation_order))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.mutation_order);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.mutation_order != null
								&& (!"".equals(row1.mutation_order))) {
							if (row1.mutation_order.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"mutation_order:");
						errorMessageThrough = "";
						try {
							if (row1.mutation_molecule != null
									&& (!"".equals(row1.mutation_molecule))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.mutation_molecule);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.mutation_molecule != null
								&& (!"".equals(row1.mutation_molecule))) {
							if (row1.mutation_molecule.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"mutation_molecule:");
						errorMessageThrough = "";
						try {
							if (row1.external_links != null
									&& (!"".equals(row1.external_links))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.external_links);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.external_links != null
								&& (!"".equals(row1.external_links))) {
							if (row1.external_links.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"external_links:");
						errorMessageThrough = "";
						try {
							if (row1.evidence != null
									&& (!"".equals(row1.evidence))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.evidence);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.evidence != null
								&& (!"".equals(row1.evidence))) {
							if (row1.evidence.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"evidence:");
						errorMessageThrough = "";
						try {
							if (row1.sequence != null
									&& (!"".equals(row1.sequence))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.sequence);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.sequence != null
								&& (!"".equals(row1.sequence))) {
							if (row1.sequence.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"sequence:");
						errorMessageThrough = "";
						try {
							if (row1.support != null
									&& (!"".equals(row1.support))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.support);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.support != null && (!"".equals(row1.support))) {
							if (row1.support.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"support:");
						errorMessageThrough = "";
						try {
							if (row1.support_count != null
									&& (!"".equals(row1.support_count))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.support_count);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.support_count != null
								&& (!"".equals(row1.support_count))) {
							if (row1.support_count.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"support_count:");
						errorMessageThrough = "";
						try {
							if (row1.log2_value != null
									&& (!"".equals(row1.log2_value))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.log2_value);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.log2_value != null
								&& (!"".equals(row1.log2_value))) {
							if (row1.log2_value.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"log2_value:");
						errorMessageThrough = "";
						try {
							if (row1.five_outer_flank != null
									&& (!"".equals(row1.five_outer_flank))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.five_outer_flank);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.five_outer_flank != null
								&& (!"".equals(row1.five_outer_flank))) {
							if (row1.five_outer_flank.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"five_outer_flank:");
						errorMessageThrough = "";
						try {
							if (row1.five_inner_flank != null
									&& (!"".equals(row1.five_inner_flank))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.five_inner_flank);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.five_inner_flank != null
								&& (!"".equals(row1.five_inner_flank))) {
							if (row1.five_inner_flank.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"five_inner_flank:");
						errorMessageThrough = "";
						try {
							if (row1.three_inner_flank != null
									&& (!"".equals(row1.three_inner_flank))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.three_inner_flank);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.three_inner_flank != null
								&& (!"".equals(row1.three_inner_flank))) {
							if (row1.three_inner_flank.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"three_inner_flank:");
						errorMessageThrough = "";
						try {
							if (row1.three_outer_flank != null
									&& (!"".equals(row1.three_outer_flank))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.three_outer_flank);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.three_outer_flank != null
								&& (!"".equals(row1.three_outer_flank))) {
							if (row1.three_outer_flank.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"three_outer_flank:");
						errorMessageThrough = "";
						try {
							if (row1.allele_dose != null
									&& (!"".equals(row1.allele_dose))) {
								String tester_tSchemaComplianceCheck_1 = String
										.valueOf(row1.allele_dose);
							}
						} catch (java.lang.Exception e) {
							ifPassedThrough = false;
							errorCodeThrough += 2;
							errorMessageThrough += "|wrong type";
						}
						if (row1.allele_dose != null
								&& (!"".equals(row1.allele_dose))) {
							if (row1.allele_dose.length() > 50) {
								ifPassedThrough = false;
								errorCodeThrough += 8;
								errorMessageThrough += "|exceed max length";
							}
						}
						resultErrorCodeThrough = handleErrorCode(
								errorCodeThrough, resultErrorCodeThrough);
						errorCodeThrough = 0;
						resultErrorMessageThrough = handleErrorMessage(
								errorMessageThrough, resultErrorMessageThrough,
								"allele_dose:");
						errorMessageThrough = "";
					}
				}
				RowSetValueUtil_tSchemaComplianceCheck_1 rsvUtil_tSchemaComplianceCheck_1 = new RowSetValueUtil_tSchemaComplianceCheck_1();

				/**
				 * [tSchemaComplianceCheck_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				try {

					Object filename_tFileInputDelimited_2 = context.workdir
							+ "/tmp/temp2.tmp";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0
								|| random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								context.workdir + "/tmp/temp2.tmp", "US-ASCII",
								"\t", "\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null
							&& fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row1.variant_call_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							row1.variant_call_type = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row1.experiment_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							row1.sample_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 4;

							row1.sampleset_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 5;

							row1.assembly = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 6;

							row1.chr = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 7;

							row1.contig = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 8;

							row1.outer_start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 9;

							row1.start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 10;

							row1.inner_start = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 11;

							row1.inner_stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 12;

							row1.stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 13;

							row1.outer_stop = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 14;

							row1.insertion_length = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 15;

							row1.variant_region_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 16;

							row1.copy_number = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 17;

							row1.ref_copy_number = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 18;

							row1.description = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 19;

							row1.validation = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 20;

							row1.zygosity = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 21;

							row1.origin = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 22;

							row1.phenotype = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 23;

							row1.alt_status = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 24;

							row1.assembly_ = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 25;

							row1.from_chr = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 26;

							row1.from_coord = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 27;

							row1.from_strand = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 28;

							row1.to_chr = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 29;

							row1.to_coord = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 30;

							row1.to_strand = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 31;

							row1.mutation_id = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 32;

							row1.mutation_order = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 33;

							row1.mutation_molecule = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 34;

							row1.external_links = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 35;

							row1.evidence = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 36;

							row1.sequence = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 37;

							row1.support = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 38;

							row1.support_count = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 39;

							row1.log2_value = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 40;

							row1.five_outer_flank = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 41;

							row1.five_inner_flank = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 42;

							row1.three_inner_flank = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 43;

							row1.three_outer_flank = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 44;

							row1.allele_dose = fid_tFileInputDelimited_2
									.get(columnIndexWithD_tFileInputDelimited_2);

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {
							row9 = null;

							/**
							 * [tSchemaComplianceCheck_1 main ] start
							 */

							currentComponent = "tSchemaComplianceCheck_1";

							row5 = null;
							row9 = null;
							rsvUtil_tSchemaComplianceCheck_1
									.setRowValue_0(row1);
							if (rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row5 = new row5Struct();
								row5.variant_call_id = row1.variant_call_id;
								row5.variant_call_type = row1.variant_call_type;
								row5.experiment_id = row1.experiment_id;
								row5.sample_id = row1.sample_id;
								row5.sampleset_id = row1.sampleset_id;
								row5.assembly = row1.assembly;
								row5.chr = row1.chr;
								row5.contig = row1.contig;
								row5.outer_start = row1.outer_start;
								row5.start = row1.start;
								row5.inner_start = row1.inner_start;
								row5.inner_stop = row1.inner_stop;
								row5.stop = row1.stop;
								row5.outer_stop = row1.outer_stop;
								row5.insertion_length = row1.insertion_length;
								row5.variant_region_id = row1.variant_region_id;
								row5.copy_number = row1.copy_number;
								row5.ref_copy_number = row1.ref_copy_number;
								row5.description = row1.description;
								row5.validation = row1.validation;
								row5.zygosity = row1.zygosity;
								row5.origin = row1.origin;
								row5.phenotype = row1.phenotype;
								row5.alt_status = row1.alt_status;
								row5.assembly_ = row1.assembly_;
								row5.from_chr = row1.from_chr;
								row5.from_coord = row1.from_coord;
								row5.from_strand = row1.from_strand;
								row5.to_chr = row1.to_chr;
								row5.to_coord = row1.to_coord;
								row5.to_strand = row1.to_strand;
								row5.mutation_id = row1.mutation_id;
								row5.mutation_order = row1.mutation_order;
								row5.mutation_molecule = row1.mutation_molecule;
								row5.external_links = row1.external_links;
								row5.evidence = row1.evidence;
								row5.sequence = row1.sequence;
								row5.support = row1.support;
								row5.support_count = row1.support_count;
								row5.log2_value = row1.log2_value;
								row5.five_outer_flank = row1.five_outer_flank;
								row5.five_inner_flank = row1.five_inner_flank;
								row5.three_inner_flank = row1.three_inner_flank;
								row5.three_outer_flank = row1.three_outer_flank;
								row5.allele_dose = row1.allele_dose;
							}
							if (!rsvUtil_tSchemaComplianceCheck_1.ifPassedThrough) {
								row9 = new row9Struct();
								row9.variant_call_id = row1.variant_call_id;
								row9.variant_call_type = row1.variant_call_type;
								row9.experiment_id = row1.experiment_id;
								row9.sample_id = row1.sample_id;
								row9.sampleset_id = row1.sampleset_id;
								row9.assembly = row1.assembly;
								row9.chr = row1.chr;
								row9.contig = row1.contig;
								row9.outer_start = row1.outer_start;
								row9.start = row1.start;
								row9.inner_start = row1.inner_start;
								row9.inner_stop = row1.inner_stop;
								row9.stop = row1.stop;
								row9.outer_stop = row1.outer_stop;
								row9.insertion_length = row1.insertion_length;
								row9.variant_region_id = row1.variant_region_id;
								row9.copy_number = row1.copy_number;
								row9.ref_copy_number = row1.ref_copy_number;
								row9.description = row1.description;
								row9.validation = row1.validation;
								row9.zygosity = row1.zygosity;
								row9.origin = row1.origin;
								row9.phenotype = row1.phenotype;
								row9.alt_status = row1.alt_status;
								row9.assembly_ = row1.assembly_;
								row9.from_chr = row1.from_chr;
								row9.from_coord = row1.from_coord;
								row9.from_strand = row1.from_strand;
								row9.to_chr = row1.to_chr;
								row9.to_coord = row1.to_coord;
								row9.to_strand = row1.to_strand;
								row9.mutation_id = row1.mutation_id;
								row9.mutation_order = row1.mutation_order;
								row9.mutation_molecule = row1.mutation_molecule;
								row9.external_links = row1.external_links;
								row9.evidence = row1.evidence;
								row9.sequence = row1.sequence;
								row9.support = row1.support;
								row9.support_count = row1.support_count;
								row9.log2_value = row1.log2_value;
								row9.five_outer_flank = row1.five_outer_flank;
								row9.five_inner_flank = row1.five_inner_flank;
								row9.three_inner_flank = row1.three_inner_flank;
								row9.three_outer_flank = row1.three_outer_flank;
								row9.allele_dose = row1.allele_dose;
								row9.errorCode = String
										.valueOf(rsvUtil_tSchemaComplianceCheck_1.resultErrorCodeThrough);
								row9.errorMessage = rsvUtil_tSchemaComplianceCheck_1.resultErrorMessageThrough;
							}
							rsvUtil_tSchemaComplianceCheck_1.reset();

							tos_count_tSchemaComplianceCheck_1++;

							/**
							 * [tSchemaComplianceCheck_1 main ] stop
							 */
							// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row7"
								// /////////////////////////////////////////////

								boolean forceLooprow7 = false;

								row7Struct row7ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_2 = false;

									row7HashKey.OriginCV = row5.origin;

									row7HashKey.hashCodeDirty = true;

									tHash_Lookup_row7.lookup(row7HashKey);

									if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_2 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7
												.getCount(row7HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.OriginCV = '"
									// + row7HashKey.OriginCV + "'");
								} // G 071

								row7Struct row7 = null;

								row7Struct fromLookup_row7 = null;
								row7 = row7Default;

								if (tHash_Lookup_row7 != null
										&& tHash_Lookup_row7.hasNext()) { // G
																			// 099

									fromLookup_row7 = tHash_Lookup_row7.next();

								} // G 099

								if (fromLookup_row7 != null) {
									row7 = fromLookup_row7;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									toMetaDataFile = null;
									checkLookup = null;

									if (!rejectedInnerJoin_tMap_2) {

										// # Output table : 'toMetaDataFile'
										toMetaDataFile_tmp.variant_call_id = row5.variant_call_id;
										toMetaDataFile_tmp.variant_call_type = row5.variant_call_type;
										toMetaDataFile_tmp.experiment_id = row5.experiment_id;
										toMetaDataFile_tmp.sample_id = row5.sample_id;
										toMetaDataFile_tmp.sampleset_id = row5.sampleset_id;
										toMetaDataFile_tmp.assembly = row5.assembly;
										toMetaDataFile_tmp.chr = row5.chr;
										toMetaDataFile_tmp.contig = row5.contig;
										toMetaDataFile_tmp.outer_start = row5.outer_start;
										toMetaDataFile_tmp.start = row5.start;
										toMetaDataFile_tmp.inner_start = row5.inner_start;
										toMetaDataFile_tmp.inner_stop = row5.inner_stop;
										toMetaDataFile_tmp.stop = row5.stop;
										toMetaDataFile_tmp.outer_stop = row5.outer_stop;
										toMetaDataFile_tmp.insertion_length = row5.insertion_length;
										toMetaDataFile_tmp.variant_region_id = row5.variant_region_id;
										toMetaDataFile_tmp.copy_number = row5.copy_number;
										toMetaDataFile_tmp.ref_copy_number = row5.ref_copy_number;
										toMetaDataFile_tmp.description = row5.description;
										toMetaDataFile_tmp.validation = row5.validation;
										toMetaDataFile_tmp.zygosity = row5.zygosity;
										toMetaDataFile_tmp.origin = row5.origin;
										toMetaDataFile_tmp.phenotype = row5.phenotype;
										toMetaDataFile_tmp.alt_status = row5.alt_status;
										toMetaDataFile_tmp.assembly_ = row5.assembly_;
										toMetaDataFile_tmp.from_chr = row5.from_chr;
										toMetaDataFile_tmp.from_coord = row5.from_coord;
										toMetaDataFile_tmp.from_strand = row5.from_strand;
										toMetaDataFile_tmp.to_chr = row5.to_chr;
										toMetaDataFile_tmp.to_coord = row5.to_coord;
										toMetaDataFile_tmp.to_strand = row5.to_strand;
										toMetaDataFile_tmp.mutation_id = row5.mutation_id;
										toMetaDataFile_tmp.mutation_order = row5.mutation_order;
										toMetaDataFile_tmp.mutation_molecule = row5.mutation_molecule;
										toMetaDataFile_tmp.external_links = row5.external_links;
										toMetaDataFile_tmp.evidence = row5.evidence;
										toMetaDataFile_tmp.sequence = row5.sequence;
										toMetaDataFile_tmp.support = row5.support;
										toMetaDataFile_tmp.support_count = row5.support_count;
										toMetaDataFile_tmp.log2_value = row5.log2_value;
										toMetaDataFile_tmp.five_outer_flank = row5.five_outer_flank;
										toMetaDataFile_tmp.five_inner_flank = row5.five_inner_flank;
										toMetaDataFile_tmp.three_inner_flank = row5.three_inner_flank;
										toMetaDataFile_tmp.three_outer_flank = row5.three_outer_flank;
										toMetaDataFile_tmp.allele_dose = row5.allele_dose;
										toMetaDataFile = toMetaDataFile_tmp;
									} // closing inner join bracket (1)
										// ###### START REJECTS #####

									// # Output reject table : 'checkLookup'
									// # Filter conditions
									if (rejectedInnerJoin_tMap_2) {
										checkLookup_tmp.variant_call_id = row5.variant_call_id;
										checkLookup_tmp.variant_call_type = row5.variant_call_type;
										checkLookup_tmp.experiment_id = row5.experiment_id;
										checkLookup_tmp.sample_id = row5.sample_id;
										checkLookup_tmp.sampleset_id = row5.sampleset_id;
										checkLookup_tmp.assembly = row5.assembly;
										checkLookup_tmp.chr = row5.chr;
										checkLookup_tmp.contig = row5.contig;
										checkLookup_tmp.outer_start = row5.outer_start;
										checkLookup_tmp.start = row5.start;
										checkLookup_tmp.inner_start = row5.inner_start;
										checkLookup_tmp.inner_stop = row5.inner_stop;
										checkLookup_tmp.stop = row5.stop;
										checkLookup_tmp.outer_stop = row5.outer_stop;
										checkLookup_tmp.insertion_length = row5.insertion_length;
										checkLookup_tmp.variant_region_id = row5.variant_region_id;
										checkLookup_tmp.copy_number = row5.copy_number;
										checkLookup_tmp.ref_copy_number = row5.ref_copy_number;
										checkLookup_tmp.description = row5.description;
										checkLookup_tmp.validation = row5.validation;
										checkLookup_tmp.zygosity = row5.zygosity;
										checkLookup_tmp.origin = row5.origin;
										checkLookup_tmp.phenotype = row5.phenotype;
										checkLookup_tmp.alt_status = row5.alt_status;
										checkLookup_tmp.assembly_ = row5.assembly_;
										checkLookup_tmp.from_chr = row5.from_chr;
										checkLookup_tmp.from_coord = row5.from_coord;
										checkLookup_tmp.from_strand = row5.from_strand;
										checkLookup_tmp.to_chr = row5.to_chr;
										checkLookup_tmp.to_coord = row5.to_coord;
										checkLookup_tmp.to_strand = row5.to_strand;
										checkLookup_tmp.mutation_id = row5.mutation_id;
										checkLookup_tmp.mutation_order = row5.mutation_order;
										checkLookup_tmp.mutation_molecule = row5.mutation_molecule;
										checkLookup_tmp.external_links = row5.external_links;
										checkLookup_tmp.evidence = row5.evidence;
										checkLookup_tmp.sequence = row5.sequence;
										checkLookup_tmp.support = row5.support;
										checkLookup_tmp.support_count = row5.support_count;
										checkLookup_tmp.log2_value = row5.log2_value;
										checkLookup_tmp.five_outer_flank = row5.five_outer_flank;
										checkLookup_tmp.five_inner_flank = row5.five_inner_flank;
										checkLookup_tmp.three_inner_flank = row5.three_inner_flank;
										checkLookup_tmp.three_outer_flank = row5.three_outer_flank;
										checkLookup_tmp.allele_dose = row5.allele_dose;
										checkLookup_tmp.errorMessage = "Origin ("
												+ row5.origin
												+ ") tab does not match the list!";
										checkLookup = checkLookup_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */
								// Start of branch "toMetaDataFile"
								if (toMetaDataFile != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									// /////////////////////////////////////////////
									// Starting Lookup Table "row15"
									// /////////////////////////////////////////////

									boolean forceLooprow15 = false;

									row15Struct row15ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										row15HashKey.RecipientStatusCV = toMetaDataFile.alt_status;

										row15HashKey.hashCodeDirty = true;

										tHash_Lookup_row15.lookup(row15HashKey);

										if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									if (tHash_Lookup_row15 != null
											&& tHash_Lookup_row15
													.getCount(row15HashKey) > 1) { // G
																					// 071

										// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.RecipientStatusCV = '"
										// + row15HashKey.RecipientStatusCV +
										// "'");
									} // G 071

									row15Struct row15 = null;

									row15Struct fromLookup_row15 = null;
									row15 = row15Default;

									if (tHash_Lookup_row15 != null
											&& tHash_Lookup_row15.hasNext()) { // G
																				// 099

										fromLookup_row15 = tHash_Lookup_row15
												.next();

									} // G 099

									if (fromLookup_row15 != null) {
										row15 = fromLookup_row15;
									}

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
										// ###############################
										// # Output tables

										copyOftoMetaDataFile = null;
										copyOfcheckLookup = null;

										if (!rejectedInnerJoin_tMap_1) {

											// # Output table :
											// 'copyOftoMetaDataFile'
											copyOftoMetaDataFile_tmp.variant_call_id = toMetaDataFile.variant_call_id;
											copyOftoMetaDataFile_tmp.variant_call_type = toMetaDataFile.variant_call_type;
											copyOftoMetaDataFile_tmp.experiment_id = toMetaDataFile.experiment_id;
											copyOftoMetaDataFile_tmp.sample_id = toMetaDataFile.sample_id;
											copyOftoMetaDataFile_tmp.sampleset_id = toMetaDataFile.sampleset_id;
											copyOftoMetaDataFile_tmp.assembly = toMetaDataFile.assembly;
											copyOftoMetaDataFile_tmp.chr = toMetaDataFile.chr;
											copyOftoMetaDataFile_tmp.contig = toMetaDataFile.contig;
											copyOftoMetaDataFile_tmp.outer_start = toMetaDataFile.outer_start;
											copyOftoMetaDataFile_tmp.start = toMetaDataFile.start;
											copyOftoMetaDataFile_tmp.inner_start = toMetaDataFile.inner_start;
											copyOftoMetaDataFile_tmp.inner_stop = toMetaDataFile.inner_stop;
											copyOftoMetaDataFile_tmp.stop = toMetaDataFile.stop;
											copyOftoMetaDataFile_tmp.outer_stop = toMetaDataFile.outer_stop;
											copyOftoMetaDataFile_tmp.insertion_length = toMetaDataFile.insertion_length;
											copyOftoMetaDataFile_tmp.variant_region_id = toMetaDataFile.variant_region_id;
											copyOftoMetaDataFile_tmp.copy_number = toMetaDataFile.copy_number;
											copyOftoMetaDataFile_tmp.ref_copy_number = toMetaDataFile.ref_copy_number;
											copyOftoMetaDataFile_tmp.description = toMetaDataFile.description;
											copyOftoMetaDataFile_tmp.validation = toMetaDataFile.validation;
											copyOftoMetaDataFile_tmp.zygosity = toMetaDataFile.zygosity;
											copyOftoMetaDataFile_tmp.origin = toMetaDataFile.origin;
											copyOftoMetaDataFile_tmp.phenotype = toMetaDataFile.phenotype;
											copyOftoMetaDataFile_tmp.alt_status = toMetaDataFile.alt_status;
											copyOftoMetaDataFile_tmp.assembly_ = toMetaDataFile.assembly_;
											copyOftoMetaDataFile_tmp.from_chr = toMetaDataFile.from_chr;
											copyOftoMetaDataFile_tmp.from_coord = toMetaDataFile.from_coord;
											copyOftoMetaDataFile_tmp.from_strand = toMetaDataFile.from_strand;
											copyOftoMetaDataFile_tmp.to_chr = toMetaDataFile.to_chr;
											copyOftoMetaDataFile_tmp.to_coord = toMetaDataFile.to_coord;
											copyOftoMetaDataFile_tmp.to_strand = toMetaDataFile.to_strand;
											copyOftoMetaDataFile_tmp.mutation_id = toMetaDataFile.mutation_id;
											copyOftoMetaDataFile_tmp.mutation_order = toMetaDataFile.mutation_order;
											copyOftoMetaDataFile_tmp.mutation_molecule = toMetaDataFile.mutation_molecule;
											copyOftoMetaDataFile_tmp.external_links = toMetaDataFile.external_links;
											copyOftoMetaDataFile_tmp.evidence = toMetaDataFile.evidence;
											copyOftoMetaDataFile_tmp.sequence = toMetaDataFile.sequence;
											copyOftoMetaDataFile_tmp.support = toMetaDataFile.support;
											copyOftoMetaDataFile_tmp.support_count = toMetaDataFile.support_count;
											copyOftoMetaDataFile_tmp.log2_value = toMetaDataFile.log2_value;
											copyOftoMetaDataFile_tmp.five_outer_flank = toMetaDataFile.five_outer_flank;
											copyOftoMetaDataFile_tmp.five_inner_flank = toMetaDataFile.five_inner_flank;
											copyOftoMetaDataFile_tmp.three_inner_flank = toMetaDataFile.three_inner_flank;
											copyOftoMetaDataFile_tmp.three_outer_flank = toMetaDataFile.three_outer_flank;
											copyOftoMetaDataFile_tmp.allele_dose = toMetaDataFile.allele_dose;
											copyOftoMetaDataFile = copyOftoMetaDataFile_tmp;
										} // closing inner join bracket (1)
											// ###### START REJECTS #####

										// # Output reject table :
										// 'copyOfcheckLookup'
										// # Filter conditions
										if (rejectedInnerJoin_tMap_1) {
											copyOfcheckLookup_tmp.variant_call_id = toMetaDataFile.variant_call_id;
											copyOfcheckLookup_tmp.variant_call_type = toMetaDataFile.variant_call_type;
											copyOfcheckLookup_tmp.experiment_id = toMetaDataFile.experiment_id;
											copyOfcheckLookup_tmp.sample_id = toMetaDataFile.sample_id;
											copyOfcheckLookup_tmp.sampleset_id = toMetaDataFile.sampleset_id;
											copyOfcheckLookup_tmp.assembly = toMetaDataFile.assembly;
											copyOfcheckLookup_tmp.chr = toMetaDataFile.chr;
											copyOfcheckLookup_tmp.contig = toMetaDataFile.contig;
											copyOfcheckLookup_tmp.outer_start = toMetaDataFile.outer_start;
											copyOfcheckLookup_tmp.start = toMetaDataFile.start;
											copyOfcheckLookup_tmp.inner_start = toMetaDataFile.inner_start;
											copyOfcheckLookup_tmp.inner_stop = toMetaDataFile.inner_stop;
											copyOfcheckLookup_tmp.stop = toMetaDataFile.stop;
											copyOfcheckLookup_tmp.outer_stop = toMetaDataFile.outer_stop;
											copyOfcheckLookup_tmp.insertion_length = toMetaDataFile.insertion_length;
											copyOfcheckLookup_tmp.variant_region_id = toMetaDataFile.variant_region_id;
											copyOfcheckLookup_tmp.copy_number = toMetaDataFile.copy_number;
											copyOfcheckLookup_tmp.ref_copy_number = toMetaDataFile.ref_copy_number;
											copyOfcheckLookup_tmp.description = toMetaDataFile.description;
											copyOfcheckLookup_tmp.validation = toMetaDataFile.validation;
											copyOfcheckLookup_tmp.zygosity = toMetaDataFile.zygosity;
											copyOfcheckLookup_tmp.origin = toMetaDataFile.origin;
											copyOfcheckLookup_tmp.phenotype = toMetaDataFile.phenotype;
											copyOfcheckLookup_tmp.alt_status = toMetaDataFile.alt_status;
											copyOfcheckLookup_tmp.assembly_ = toMetaDataFile.assembly_;
											copyOfcheckLookup_tmp.from_chr = toMetaDataFile.from_chr;
											copyOfcheckLookup_tmp.from_coord = toMetaDataFile.from_coord;
											copyOfcheckLookup_tmp.from_strand = toMetaDataFile.from_strand;
											copyOfcheckLookup_tmp.to_chr = toMetaDataFile.to_chr;
											copyOfcheckLookup_tmp.to_coord = toMetaDataFile.to_coord;
											copyOfcheckLookup_tmp.to_strand = toMetaDataFile.to_strand;
											copyOfcheckLookup_tmp.mutation_id = toMetaDataFile.mutation_id;
											copyOfcheckLookup_tmp.mutation_order = toMetaDataFile.mutation_order;
											copyOfcheckLookup_tmp.mutation_molecule = toMetaDataFile.mutation_molecule;
											copyOfcheckLookup_tmp.external_links = toMetaDataFile.external_links;
											copyOfcheckLookup_tmp.evidence = toMetaDataFile.evidence;
											copyOfcheckLookup_tmp.sequence = toMetaDataFile.sequence;
											copyOfcheckLookup_tmp.support = toMetaDataFile.support;
											copyOfcheckLookup_tmp.support_count = toMetaDataFile.support_count;
											copyOfcheckLookup_tmp.log2_value = toMetaDataFile.log2_value;
											copyOfcheckLookup_tmp.five_outer_flank = toMetaDataFile.five_outer_flank;
											copyOfcheckLookup_tmp.five_inner_flank = toMetaDataFile.five_inner_flank;
											copyOfcheckLookup_tmp.three_inner_flank = toMetaDataFile.three_inner_flank;
											copyOfcheckLookup_tmp.three_outer_flank = toMetaDataFile.three_outer_flank;
											copyOfcheckLookup_tmp.allele_dose = toMetaDataFile.allele_dose;
											copyOfcheckLookup_tmp.errorMessage = "Alt status ("
													+ toMetaDataFile.alt_status
													+ ") tab does not match the list!";
											copyOfcheckLookup = copyOfcheckLookup_tmp;
										} // closing filter/reject
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_1 = false;

									tos_count_tMap_1++;

									/**
									 * [tMap_1 main ] stop
									 */
									// Start of branch "copyOftoMetaDataFile"
									if (copyOftoMetaDataFile != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// /////////////////////////////////////////////
										// Starting Lookup Table "row20"
										// /////////////////////////////////////////////

										boolean forceLooprow20 = false;

										row20Struct row20ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_3 = false;

											row20HashKey.VariantCallZygosityCV = copyOftoMetaDataFile.zygosity;

											row20HashKey.hashCodeDirty = true;

											tHash_Lookup_row20
													.lookup(row20HashKey);

											if (!tHash_Lookup_row20.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_3 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										if (tHash_Lookup_row20 != null
												&& tHash_Lookup_row20
														.getCount(row20HashKey) > 1) { // G
																						// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.VariantCallZygosityCV = '"
											// +
											// row20HashKey.VariantCallZygosityCV
											// + "'");
										} // G 071

										row20Struct row20 = null;

										row20Struct fromLookup_row20 = null;
										row20 = row20Default;

										if (tHash_Lookup_row20 != null
												&& tHash_Lookup_row20.hasNext()) { // G
																					// 099

											fromLookup_row20 = tHash_Lookup_row20
													.next();

										} // G 099

										if (fromLookup_row20 != null) {
											row20 = fromLookup_row20;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
											// ###############################
											// # Output tables

											copyOfcopyOftoMetaDataFile = null;
											copyOfcopyOfcheckLookup = null;

											if (!rejectedInnerJoin_tMap_3) {

												// # Output table :
												// 'copyOfcopyOftoMetaDataFile'
												copyOfcopyOftoMetaDataFile_tmp.variant_call_id = copyOftoMetaDataFile.variant_call_id;
												copyOfcopyOftoMetaDataFile_tmp.variant_call_type = copyOftoMetaDataFile.variant_call_type;
												copyOfcopyOftoMetaDataFile_tmp.experiment_id = copyOftoMetaDataFile.experiment_id;
												copyOfcopyOftoMetaDataFile_tmp.sample_id = copyOftoMetaDataFile.sample_id;
												copyOfcopyOftoMetaDataFile_tmp.sampleset_id = copyOftoMetaDataFile.sampleset_id;
												copyOfcopyOftoMetaDataFile_tmp.assembly = copyOftoMetaDataFile.assembly;
												copyOfcopyOftoMetaDataFile_tmp.chr = copyOftoMetaDataFile.chr;
												copyOfcopyOftoMetaDataFile_tmp.contig = copyOftoMetaDataFile.contig;
												copyOfcopyOftoMetaDataFile_tmp.outer_start = copyOftoMetaDataFile.outer_start;
												copyOfcopyOftoMetaDataFile_tmp.start = copyOftoMetaDataFile.start;
												copyOfcopyOftoMetaDataFile_tmp.inner_start = copyOftoMetaDataFile.inner_start;
												copyOfcopyOftoMetaDataFile_tmp.inner_stop = copyOftoMetaDataFile.inner_stop;
												copyOfcopyOftoMetaDataFile_tmp.stop = copyOftoMetaDataFile.stop;
												copyOfcopyOftoMetaDataFile_tmp.outer_stop = copyOftoMetaDataFile.outer_stop;
												copyOfcopyOftoMetaDataFile_tmp.insertion_length = copyOftoMetaDataFile.insertion_length;
												copyOfcopyOftoMetaDataFile_tmp.variant_region_id = copyOftoMetaDataFile.variant_region_id;
												copyOfcopyOftoMetaDataFile_tmp.copy_number = copyOftoMetaDataFile.copy_number;
												copyOfcopyOftoMetaDataFile_tmp.ref_copy_number = copyOftoMetaDataFile.ref_copy_number;
												copyOfcopyOftoMetaDataFile_tmp.description = copyOftoMetaDataFile.description;
												copyOfcopyOftoMetaDataFile_tmp.validation = copyOftoMetaDataFile.validation;
												copyOfcopyOftoMetaDataFile_tmp.zygosity = copyOftoMetaDataFile.zygosity;
												copyOfcopyOftoMetaDataFile_tmp.origin = copyOftoMetaDataFile.origin;
												copyOfcopyOftoMetaDataFile_tmp.phenotype = copyOftoMetaDataFile.phenotype;
												copyOfcopyOftoMetaDataFile_tmp.alt_status = copyOftoMetaDataFile.alt_status;
												copyOfcopyOftoMetaDataFile_tmp.assembly_ = copyOftoMetaDataFile.assembly_;
												copyOfcopyOftoMetaDataFile_tmp.from_chr = copyOftoMetaDataFile.from_chr;
												copyOfcopyOftoMetaDataFile_tmp.from_coord = copyOftoMetaDataFile.from_coord;
												copyOfcopyOftoMetaDataFile_tmp.from_strand = copyOftoMetaDataFile.from_strand;
												copyOfcopyOftoMetaDataFile_tmp.to_chr = copyOftoMetaDataFile.to_chr;
												copyOfcopyOftoMetaDataFile_tmp.to_coord = copyOftoMetaDataFile.to_coord;
												copyOfcopyOftoMetaDataFile_tmp.to_strand = copyOftoMetaDataFile.to_strand;
												copyOfcopyOftoMetaDataFile_tmp.mutation_id = copyOftoMetaDataFile.mutation_id;
												copyOfcopyOftoMetaDataFile_tmp.mutation_order = copyOftoMetaDataFile.mutation_order;
												copyOfcopyOftoMetaDataFile_tmp.mutation_molecule = copyOftoMetaDataFile.mutation_molecule;
												copyOfcopyOftoMetaDataFile_tmp.external_links = copyOftoMetaDataFile.external_links;
												copyOfcopyOftoMetaDataFile_tmp.evidence = copyOftoMetaDataFile.evidence;
												copyOfcopyOftoMetaDataFile_tmp.sequence = copyOftoMetaDataFile.sequence;
												copyOfcopyOftoMetaDataFile_tmp.support = copyOftoMetaDataFile.support;
												copyOfcopyOftoMetaDataFile_tmp.support_count = copyOftoMetaDataFile.support_count;
												copyOfcopyOftoMetaDataFile_tmp.log2_value = copyOftoMetaDataFile.log2_value;
												copyOfcopyOftoMetaDataFile_tmp.five_outer_flank = copyOftoMetaDataFile.five_outer_flank;
												copyOfcopyOftoMetaDataFile_tmp.five_inner_flank = copyOftoMetaDataFile.five_inner_flank;
												copyOfcopyOftoMetaDataFile_tmp.three_inner_flank = copyOftoMetaDataFile.three_inner_flank;
												copyOfcopyOftoMetaDataFile_tmp.three_outer_flank = copyOftoMetaDataFile.three_outer_flank;
												copyOfcopyOftoMetaDataFile_tmp.allele_dose = copyOftoMetaDataFile.allele_dose;
												copyOfcopyOftoMetaDataFile = copyOfcopyOftoMetaDataFile_tmp;
											} // closing inner join bracket (1)
												// ###### START REJECTS #####

											// # Output reject table :
											// 'copyOfcopyOfcheckLookup'
											// # Filter conditions
											if (rejectedInnerJoin_tMap_3) {
												copyOfcopyOfcheckLookup_tmp.variant_call_id = copyOftoMetaDataFile.variant_call_id;
												copyOfcopyOfcheckLookup_tmp.variant_call_type = copyOftoMetaDataFile.variant_call_type;
												copyOfcopyOfcheckLookup_tmp.experiment_id = copyOftoMetaDataFile.experiment_id;
												copyOfcopyOfcheckLookup_tmp.sample_id = copyOftoMetaDataFile.sample_id;
												copyOfcopyOfcheckLookup_tmp.sampleset_id = copyOftoMetaDataFile.sampleset_id;
												copyOfcopyOfcheckLookup_tmp.assembly = copyOftoMetaDataFile.assembly;
												copyOfcopyOfcheckLookup_tmp.chr = copyOftoMetaDataFile.chr;
												copyOfcopyOfcheckLookup_tmp.contig = copyOftoMetaDataFile.contig;
												copyOfcopyOfcheckLookup_tmp.outer_start = copyOftoMetaDataFile.outer_start;
												copyOfcopyOfcheckLookup_tmp.start = copyOftoMetaDataFile.start;
												copyOfcopyOfcheckLookup_tmp.inner_start = copyOftoMetaDataFile.inner_start;
												copyOfcopyOfcheckLookup_tmp.inner_stop = copyOftoMetaDataFile.inner_stop;
												copyOfcopyOfcheckLookup_tmp.stop = copyOftoMetaDataFile.stop;
												copyOfcopyOfcheckLookup_tmp.outer_stop = copyOftoMetaDataFile.outer_stop;
												copyOfcopyOfcheckLookup_tmp.insertion_length = copyOftoMetaDataFile.insertion_length;
												copyOfcopyOfcheckLookup_tmp.variant_region_id = copyOftoMetaDataFile.variant_region_id;
												copyOfcopyOfcheckLookup_tmp.copy_number = copyOftoMetaDataFile.copy_number;
												copyOfcopyOfcheckLookup_tmp.ref_copy_number = copyOftoMetaDataFile.ref_copy_number;
												copyOfcopyOfcheckLookup_tmp.description = copyOftoMetaDataFile.description;
												copyOfcopyOfcheckLookup_tmp.validation = copyOftoMetaDataFile.validation;
												copyOfcopyOfcheckLookup_tmp.zygosity = copyOftoMetaDataFile.zygosity;
												copyOfcopyOfcheckLookup_tmp.origin = copyOftoMetaDataFile.origin;
												copyOfcopyOfcheckLookup_tmp.phenotype = copyOftoMetaDataFile.phenotype;
												copyOfcopyOfcheckLookup_tmp.alt_status = copyOftoMetaDataFile.alt_status;
												copyOfcopyOfcheckLookup_tmp.assembly_ = copyOftoMetaDataFile.assembly_;
												copyOfcopyOfcheckLookup_tmp.from_chr = copyOftoMetaDataFile.from_chr;
												copyOfcopyOfcheckLookup_tmp.from_coord = copyOftoMetaDataFile.from_coord;
												copyOfcopyOfcheckLookup_tmp.from_strand = copyOftoMetaDataFile.from_strand;
												copyOfcopyOfcheckLookup_tmp.to_chr = copyOftoMetaDataFile.to_chr;
												copyOfcopyOfcheckLookup_tmp.to_coord = copyOftoMetaDataFile.to_coord;
												copyOfcopyOfcheckLookup_tmp.to_strand = copyOftoMetaDataFile.to_strand;
												copyOfcopyOfcheckLookup_tmp.mutation_id = copyOftoMetaDataFile.mutation_id;
												copyOfcopyOfcheckLookup_tmp.mutation_order = copyOftoMetaDataFile.mutation_order;
												copyOfcopyOfcheckLookup_tmp.mutation_molecule = copyOftoMetaDataFile.mutation_molecule;
												copyOfcopyOfcheckLookup_tmp.external_links = copyOftoMetaDataFile.external_links;
												copyOfcopyOfcheckLookup_tmp.evidence = copyOftoMetaDataFile.evidence;
												copyOfcopyOfcheckLookup_tmp.sequence = copyOftoMetaDataFile.sequence;
												copyOfcopyOfcheckLookup_tmp.support = copyOftoMetaDataFile.support;
												copyOfcopyOfcheckLookup_tmp.support_count = copyOftoMetaDataFile.support_count;
												copyOfcopyOfcheckLookup_tmp.log2_value = copyOftoMetaDataFile.log2_value;
												copyOfcopyOfcheckLookup_tmp.five_outer_flank = copyOftoMetaDataFile.five_outer_flank;
												copyOfcopyOfcheckLookup_tmp.five_inner_flank = copyOftoMetaDataFile.five_inner_flank;
												copyOfcopyOfcheckLookup_tmp.three_inner_flank = copyOftoMetaDataFile.three_inner_flank;
												copyOfcopyOfcheckLookup_tmp.three_outer_flank = copyOftoMetaDataFile.three_outer_flank;
												copyOfcopyOfcheckLookup_tmp.allele_dose = copyOftoMetaDataFile.allele_dose;
												copyOfcopyOfcheckLookup_tmp.errorMessage = "Zygosity ("
														+ row5.zygosity
														+ ") tab does not match the list!";
												copyOfcopyOfcheckLookup = copyOfcopyOfcheckLookup_tmp;
											} // closing filter/reject
												// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */
										// Start of branch
										// "copyOfcopyOftoMetaDataFile"
										if (copyOfcopyOftoMetaDataFile != null) {

											/**
											 * [tMap_4 main ] start
											 */

											currentComponent = "tMap_4";

											boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

											// ###############################
											// # Input tables (lookups)
											boolean rejectedInnerJoin_tMap_4 = false;
											boolean mainRowRejected_tMap_4 = false;

											// /////////////////////////////////////////////
											// Starting Lookup Table "row26"
											// /////////////////////////////////////////////

											boolean forceLooprow26 = false;

											row26Struct row26ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_4 = false;

												row26HashKey.VariantCallTypeCV = copyOfcopyOftoMetaDataFile.variant_call_type;

												row26HashKey.hashCodeDirty = true;

												tHash_Lookup_row26
														.lookup(row26HashKey);

												if (!tHash_Lookup_row26
														.hasNext()) { // G_TM_M_090

													rejectedInnerJoin_tMap_4 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											if (tHash_Lookup_row26 != null
													&& tHash_Lookup_row26
															.getCount(row26HashKey) > 1) { // G
																							// 071

												// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row26' and it contains more one result from keys :  row26.VariantCallTypeCV = '"
												// +
												// row26HashKey.VariantCallTypeCV
												// + "'");
											} // G 071

											row26Struct row26 = null;

											row26Struct fromLookup_row26 = null;
											row26 = row26Default;

											if (tHash_Lookup_row26 != null
													&& tHash_Lookup_row26
															.hasNext()) { // G
																			// 099

												fromLookup_row26 = tHash_Lookup_row26
														.next();

											} // G 099

											if (fromLookup_row26 != null) {
												row26 = fromLookup_row26;
											}

											// ###############################
											{ // start of Var scope

												// ###############################
												// # Vars tables

												Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
												// ###############################
												// # Output tables

												copyOfcheckLookup_0 = null;

												if (!rejectedInnerJoin_tMap_4) {
												} // closing inner join bracket
													// (1)
													// ###### START REJECTS
													// #####

												// # Output reject table :
												// 'copyOfcheckLookup_0'
												// # Filter conditions
												if (rejectedInnerJoin_tMap_4) {
													copyOfcheckLookup_0_tmp.variant_call_id = copyOfcopyOftoMetaDataFile.variant_call_id;
													copyOfcheckLookup_0_tmp.variant_call_type = copyOfcopyOftoMetaDataFile.variant_call_type;
													copyOfcheckLookup_0_tmp.experiment_id = copyOfcopyOftoMetaDataFile.experiment_id;
													copyOfcheckLookup_0_tmp.sample_id = copyOfcopyOftoMetaDataFile.sample_id;
													copyOfcheckLookup_0_tmp.sampleset_id = copyOfcopyOftoMetaDataFile.sampleset_id;
													copyOfcheckLookup_0_tmp.assembly = copyOfcopyOftoMetaDataFile.assembly;
													copyOfcheckLookup_0_tmp.chr = copyOfcopyOftoMetaDataFile.chr;
													copyOfcheckLookup_0_tmp.contig = copyOfcopyOftoMetaDataFile.contig;
													copyOfcheckLookup_0_tmp.outer_start = copyOfcopyOftoMetaDataFile.outer_start;
													copyOfcheckLookup_0_tmp.start = copyOfcopyOftoMetaDataFile.start;
													copyOfcheckLookup_0_tmp.inner_start = copyOfcopyOftoMetaDataFile.inner_start;
													copyOfcheckLookup_0_tmp.inner_stop = copyOfcopyOftoMetaDataFile.inner_stop;
													copyOfcheckLookup_0_tmp.stop = copyOfcopyOftoMetaDataFile.stop;
													copyOfcheckLookup_0_tmp.outer_stop = copyOfcopyOftoMetaDataFile.outer_stop;
													copyOfcheckLookup_0_tmp.insertion_length = copyOfcopyOftoMetaDataFile.insertion_length;
													copyOfcheckLookup_0_tmp.variant_region_id = copyOfcopyOftoMetaDataFile.variant_region_id;
													copyOfcheckLookup_0_tmp.copy_number = copyOfcopyOftoMetaDataFile.copy_number;
													copyOfcheckLookup_0_tmp.ref_copy_number = copyOfcopyOftoMetaDataFile.ref_copy_number;
													copyOfcheckLookup_0_tmp.description = copyOfcopyOftoMetaDataFile.description;
													copyOfcheckLookup_0_tmp.validation = copyOfcopyOftoMetaDataFile.validation;
													copyOfcheckLookup_0_tmp.zygosity = copyOfcopyOftoMetaDataFile.zygosity;
													copyOfcheckLookup_0_tmp.origin = copyOfcopyOftoMetaDataFile.origin;
													copyOfcheckLookup_0_tmp.phenotype = copyOfcopyOftoMetaDataFile.phenotype;
													copyOfcheckLookup_0_tmp.alt_status = copyOfcopyOftoMetaDataFile.alt_status;
													copyOfcheckLookup_0_tmp.assembly_ = copyOfcopyOftoMetaDataFile.assembly_;
													copyOfcheckLookup_0_tmp.from_chr = copyOfcopyOftoMetaDataFile.from_chr;
													copyOfcheckLookup_0_tmp.from_coord = copyOfcopyOftoMetaDataFile.from_coord;
													copyOfcheckLookup_0_tmp.from_strand = copyOfcopyOftoMetaDataFile.from_strand;
													copyOfcheckLookup_0_tmp.to_chr = copyOfcopyOftoMetaDataFile.to_chr;
													copyOfcheckLookup_0_tmp.to_coord = copyOfcopyOftoMetaDataFile.to_coord;
													copyOfcheckLookup_0_tmp.to_strand = copyOfcopyOftoMetaDataFile.to_strand;
													copyOfcheckLookup_0_tmp.mutation_id = copyOfcopyOftoMetaDataFile.mutation_id;
													copyOfcheckLookup_0_tmp.mutation_order = copyOfcopyOftoMetaDataFile.mutation_order;
													copyOfcheckLookup_0_tmp.mutation_molecule = copyOfcopyOftoMetaDataFile.mutation_molecule;
													copyOfcheckLookup_0_tmp.external_links = copyOfcopyOftoMetaDataFile.external_links;
													copyOfcheckLookup_0_tmp.evidence = copyOfcopyOftoMetaDataFile.evidence;
													copyOfcheckLookup_0_tmp.sequence = copyOfcopyOftoMetaDataFile.sequence;
													copyOfcheckLookup_0_tmp.support = copyOfcopyOftoMetaDataFile.support;
													copyOfcheckLookup_0_tmp.support_count = copyOfcopyOftoMetaDataFile.support_count;
													copyOfcheckLookup_0_tmp.log2_value = copyOfcopyOftoMetaDataFile.log2_value;
													copyOfcheckLookup_0_tmp.five_outer_flank = copyOfcopyOftoMetaDataFile.five_outer_flank;
													copyOfcheckLookup_0_tmp.five_inner_flank = copyOfcopyOftoMetaDataFile.five_inner_flank;
													copyOfcheckLookup_0_tmp.three_inner_flank = copyOfcopyOftoMetaDataFile.three_inner_flank;
													copyOfcheckLookup_0_tmp.three_outer_flank = copyOfcopyOftoMetaDataFile.three_outer_flank;
													copyOfcheckLookup_0_tmp.errorMessage = "Variant call type ("
															+ copyOfcopyOftoMetaDataFile.variant_call_type
															+ ") tab does not match the list!";
													copyOfcheckLookup_0_tmp.allele_dose = copyOfcopyOftoMetaDataFile.allele_dose;
													copyOfcheckLookup_0 = copyOfcheckLookup_0_tmp;
												} // closing filter/reject
													// ###############################

											} // end of Var scope

											rejectedInnerJoin_tMap_4 = false;

											tos_count_tMap_4++;

											/**
											 * [tMap_4 main ] stop
											 */
											// Start of branch
											// "copyOfcheckLookup_0"
											if (copyOfcheckLookup_0 != null) {

												/**
												 * [tBufferOutput_5 main ] start
												 */

												currentComponent = "tBufferOutput_5";

												String[] row_tBufferOutput_5 = new String[] {
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", "", "",
														"", "", "", "", };
												if (copyOfcheckLookup_0.variant_call_id != null) {

													row_tBufferOutput_5[0] = copyOfcheckLookup_0.variant_call_id;

												} else {
													row_tBufferOutput_5[0] = null;
												}
												if (copyOfcheckLookup_0.variant_call_type != null) {

													row_tBufferOutput_5[1] = copyOfcheckLookup_0.variant_call_type;

												} else {
													row_tBufferOutput_5[1] = null;
												}
												if (copyOfcheckLookup_0.experiment_id != null) {

													row_tBufferOutput_5[2] = copyOfcheckLookup_0.experiment_id;

												} else {
													row_tBufferOutput_5[2] = null;
												}
												if (copyOfcheckLookup_0.sample_id != null) {

													row_tBufferOutput_5[3] = copyOfcheckLookup_0.sample_id;

												} else {
													row_tBufferOutput_5[3] = null;
												}
												if (copyOfcheckLookup_0.sampleset_id != null) {

													row_tBufferOutput_5[4] = copyOfcheckLookup_0.sampleset_id;

												} else {
													row_tBufferOutput_5[4] = null;
												}
												if (copyOfcheckLookup_0.assembly != null) {

													row_tBufferOutput_5[5] = copyOfcheckLookup_0.assembly;

												} else {
													row_tBufferOutput_5[5] = null;
												}
												if (copyOfcheckLookup_0.chr != null) {

													row_tBufferOutput_5[6] = copyOfcheckLookup_0.chr;

												} else {
													row_tBufferOutput_5[6] = null;
												}
												if (copyOfcheckLookup_0.contig != null) {

													row_tBufferOutput_5[7] = copyOfcheckLookup_0.contig;

												} else {
													row_tBufferOutput_5[7] = null;
												}
												if (copyOfcheckLookup_0.outer_start != null) {

													row_tBufferOutput_5[8] = copyOfcheckLookup_0.outer_start;

												} else {
													row_tBufferOutput_5[8] = null;
												}
												if (copyOfcheckLookup_0.start != null) {

													row_tBufferOutput_5[9] = copyOfcheckLookup_0.start;

												} else {
													row_tBufferOutput_5[9] = null;
												}
												if (copyOfcheckLookup_0.inner_start != null) {

													row_tBufferOutput_5[10] = copyOfcheckLookup_0.inner_start;

												} else {
													row_tBufferOutput_5[10] = null;
												}
												if (copyOfcheckLookup_0.inner_stop != null) {

													row_tBufferOutput_5[11] = copyOfcheckLookup_0.inner_stop;

												} else {
													row_tBufferOutput_5[11] = null;
												}
												if (copyOfcheckLookup_0.stop != null) {

													row_tBufferOutput_5[12] = copyOfcheckLookup_0.stop;

												} else {
													row_tBufferOutput_5[12] = null;
												}
												if (copyOfcheckLookup_0.outer_stop != null) {

													row_tBufferOutput_5[13] = copyOfcheckLookup_0.outer_stop;

												} else {
													row_tBufferOutput_5[13] = null;
												}
												if (copyOfcheckLookup_0.insertion_length != null) {

													row_tBufferOutput_5[14] = copyOfcheckLookup_0.insertion_length;

												} else {
													row_tBufferOutput_5[14] = null;
												}
												if (copyOfcheckLookup_0.variant_region_id != null) {

													row_tBufferOutput_5[15] = copyOfcheckLookup_0.variant_region_id;

												} else {
													row_tBufferOutput_5[15] = null;
												}
												if (copyOfcheckLookup_0.copy_number != null) {

													row_tBufferOutput_5[16] = copyOfcheckLookup_0.copy_number;

												} else {
													row_tBufferOutput_5[16] = null;
												}
												if (copyOfcheckLookup_0.ref_copy_number != null) {

													row_tBufferOutput_5[17] = copyOfcheckLookup_0.ref_copy_number;

												} else {
													row_tBufferOutput_5[17] = null;
												}
												if (copyOfcheckLookup_0.description != null) {

													row_tBufferOutput_5[18] = copyOfcheckLookup_0.description;

												} else {
													row_tBufferOutput_5[18] = null;
												}
												if (copyOfcheckLookup_0.validation != null) {

													row_tBufferOutput_5[19] = copyOfcheckLookup_0.validation;

												} else {
													row_tBufferOutput_5[19] = null;
												}
												if (copyOfcheckLookup_0.zygosity != null) {

													row_tBufferOutput_5[20] = copyOfcheckLookup_0.zygosity;

												} else {
													row_tBufferOutput_5[20] = null;
												}
												if (copyOfcheckLookup_0.origin != null) {

													row_tBufferOutput_5[21] = copyOfcheckLookup_0.origin;

												} else {
													row_tBufferOutput_5[21] = null;
												}
												if (copyOfcheckLookup_0.phenotype != null) {

													row_tBufferOutput_5[22] = copyOfcheckLookup_0.phenotype;

												} else {
													row_tBufferOutput_5[22] = null;
												}
												if (copyOfcheckLookup_0.alt_status != null) {

													row_tBufferOutput_5[23] = copyOfcheckLookup_0.alt_status;

												} else {
													row_tBufferOutput_5[23] = null;
												}
												if (copyOfcheckLookup_0.assembly_ != null) {

													row_tBufferOutput_5[24] = copyOfcheckLookup_0.assembly_;

												} else {
													row_tBufferOutput_5[24] = null;
												}
												if (copyOfcheckLookup_0.from_chr != null) {

													row_tBufferOutput_5[25] = copyOfcheckLookup_0.from_chr;

												} else {
													row_tBufferOutput_5[25] = null;
												}
												if (copyOfcheckLookup_0.from_coord != null) {

													row_tBufferOutput_5[26] = copyOfcheckLookup_0.from_coord;

												} else {
													row_tBufferOutput_5[26] = null;
												}
												if (copyOfcheckLookup_0.from_strand != null) {

													row_tBufferOutput_5[27] = copyOfcheckLookup_0.from_strand;

												} else {
													row_tBufferOutput_5[27] = null;
												}
												if (copyOfcheckLookup_0.to_chr != null) {

													row_tBufferOutput_5[28] = copyOfcheckLookup_0.to_chr;

												} else {
													row_tBufferOutput_5[28] = null;
												}
												if (copyOfcheckLookup_0.to_coord != null) {

													row_tBufferOutput_5[29] = copyOfcheckLookup_0.to_coord;

												} else {
													row_tBufferOutput_5[29] = null;
												}
												if (copyOfcheckLookup_0.to_strand != null) {

													row_tBufferOutput_5[30] = copyOfcheckLookup_0.to_strand;

												} else {
													row_tBufferOutput_5[30] = null;
												}
												if (copyOfcheckLookup_0.mutation_id != null) {

													row_tBufferOutput_5[31] = copyOfcheckLookup_0.mutation_id;

												} else {
													row_tBufferOutput_5[31] = null;
												}
												if (copyOfcheckLookup_0.mutation_order != null) {

													row_tBufferOutput_5[32] = copyOfcheckLookup_0.mutation_order;

												} else {
													row_tBufferOutput_5[32] = null;
												}
												if (copyOfcheckLookup_0.mutation_molecule != null) {

													row_tBufferOutput_5[33] = copyOfcheckLookup_0.mutation_molecule;

												} else {
													row_tBufferOutput_5[33] = null;
												}
												if (copyOfcheckLookup_0.external_links != null) {

													row_tBufferOutput_5[34] = copyOfcheckLookup_0.external_links;

												} else {
													row_tBufferOutput_5[34] = null;
												}
												if (copyOfcheckLookup_0.evidence != null) {

													row_tBufferOutput_5[35] = copyOfcheckLookup_0.evidence;

												} else {
													row_tBufferOutput_5[35] = null;
												}
												if (copyOfcheckLookup_0.sequence != null) {

													row_tBufferOutput_5[36] = copyOfcheckLookup_0.sequence;

												} else {
													row_tBufferOutput_5[36] = null;
												}
												if (copyOfcheckLookup_0.support != null) {

													row_tBufferOutput_5[37] = copyOfcheckLookup_0.support;

												} else {
													row_tBufferOutput_5[37] = null;
												}
												if (copyOfcheckLookup_0.support_count != null) {

													row_tBufferOutput_5[38] = copyOfcheckLookup_0.support_count;

												} else {
													row_tBufferOutput_5[38] = null;
												}
												if (copyOfcheckLookup_0.log2_value != null) {

													row_tBufferOutput_5[39] = copyOfcheckLookup_0.log2_value;

												} else {
													row_tBufferOutput_5[39] = null;
												}
												if (copyOfcheckLookup_0.five_outer_flank != null) {

													row_tBufferOutput_5[40] = copyOfcheckLookup_0.five_outer_flank;

												} else {
													row_tBufferOutput_5[40] = null;
												}
												if (copyOfcheckLookup_0.five_inner_flank != null) {

													row_tBufferOutput_5[41] = copyOfcheckLookup_0.five_inner_flank;

												} else {
													row_tBufferOutput_5[41] = null;
												}
												if (copyOfcheckLookup_0.three_inner_flank != null) {

													row_tBufferOutput_5[42] = copyOfcheckLookup_0.three_inner_flank;

												} else {
													row_tBufferOutput_5[42] = null;
												}
												if (copyOfcheckLookup_0.three_outer_flank != null) {

													row_tBufferOutput_5[43] = copyOfcheckLookup_0.three_outer_flank;

												} else {
													row_tBufferOutput_5[43] = null;
												}
												if (copyOfcheckLookup_0.errorMessage != null) {

													row_tBufferOutput_5[44] = copyOfcheckLookup_0.errorMessage;

												} else {
													row_tBufferOutput_5[44] = null;
												}
												if (copyOfcheckLookup_0.allele_dose != null) {

													row_tBufferOutput_5[45] = copyOfcheckLookup_0.allele_dose;

												} else {
													row_tBufferOutput_5[45] = null;
												}
												globalBuffer
														.add(row_tBufferOutput_5);

												tos_count_tBufferOutput_5++;

												/**
												 * [tBufferOutput_5 main ] stop
												 */

											} // End of branch
												// "copyOfcheckLookup_0"

										} // End of branch
											// "copyOfcopyOftoMetaDataFile"

										// Start of branch
										// "copyOfcopyOfcheckLookup"
										if (copyOfcopyOfcheckLookup != null) {

											/**
											 * [tBufferOutput_4 main ] start
											 */

											currentComponent = "tBufferOutput_4";

											String[] row_tBufferOutput_4 = new String[] {
													"", "", "", "", "", "", "",
													"", "", "", "", "", "", "",
													"", "", "", "", "", "", "",
													"", "", "", "", "", "", "",
													"", "", "", "", "", "", "",
													"", "", "", "", "", "", "",
													"", "", "", "", };
											if (copyOfcopyOfcheckLookup.variant_call_id != null) {

												row_tBufferOutput_4[0] = copyOfcopyOfcheckLookup.variant_call_id;

											} else {
												row_tBufferOutput_4[0] = null;
											}
											if (copyOfcopyOfcheckLookup.variant_call_type != null) {

												row_tBufferOutput_4[1] = copyOfcopyOfcheckLookup.variant_call_type;

											} else {
												row_tBufferOutput_4[1] = null;
											}
											if (copyOfcopyOfcheckLookup.experiment_id != null) {

												row_tBufferOutput_4[2] = copyOfcopyOfcheckLookup.experiment_id;

											} else {
												row_tBufferOutput_4[2] = null;
											}
											if (copyOfcopyOfcheckLookup.sample_id != null) {

												row_tBufferOutput_4[3] = copyOfcopyOfcheckLookup.sample_id;

											} else {
												row_tBufferOutput_4[3] = null;
											}
											if (copyOfcopyOfcheckLookup.sampleset_id != null) {

												row_tBufferOutput_4[4] = copyOfcopyOfcheckLookup.sampleset_id;

											} else {
												row_tBufferOutput_4[4] = null;
											}
											if (copyOfcopyOfcheckLookup.assembly != null) {

												row_tBufferOutput_4[5] = copyOfcopyOfcheckLookup.assembly;

											} else {
												row_tBufferOutput_4[5] = null;
											}
											if (copyOfcopyOfcheckLookup.chr != null) {

												row_tBufferOutput_4[6] = copyOfcopyOfcheckLookup.chr;

											} else {
												row_tBufferOutput_4[6] = null;
											}
											if (copyOfcopyOfcheckLookup.contig != null) {

												row_tBufferOutput_4[7] = copyOfcopyOfcheckLookup.contig;

											} else {
												row_tBufferOutput_4[7] = null;
											}
											if (copyOfcopyOfcheckLookup.outer_start != null) {

												row_tBufferOutput_4[8] = copyOfcopyOfcheckLookup.outer_start;

											} else {
												row_tBufferOutput_4[8] = null;
											}
											if (copyOfcopyOfcheckLookup.start != null) {

												row_tBufferOutput_4[9] = copyOfcopyOfcheckLookup.start;

											} else {
												row_tBufferOutput_4[9] = null;
											}
											if (copyOfcopyOfcheckLookup.inner_start != null) {

												row_tBufferOutput_4[10] = copyOfcopyOfcheckLookup.inner_start;

											} else {
												row_tBufferOutput_4[10] = null;
											}
											if (copyOfcopyOfcheckLookup.inner_stop != null) {

												row_tBufferOutput_4[11] = copyOfcopyOfcheckLookup.inner_stop;

											} else {
												row_tBufferOutput_4[11] = null;
											}
											if (copyOfcopyOfcheckLookup.stop != null) {

												row_tBufferOutput_4[12] = copyOfcopyOfcheckLookup.stop;

											} else {
												row_tBufferOutput_4[12] = null;
											}
											if (copyOfcopyOfcheckLookup.outer_stop != null) {

												row_tBufferOutput_4[13] = copyOfcopyOfcheckLookup.outer_stop;

											} else {
												row_tBufferOutput_4[13] = null;
											}
											if (copyOfcopyOfcheckLookup.insertion_length != null) {

												row_tBufferOutput_4[14] = copyOfcopyOfcheckLookup.insertion_length;

											} else {
												row_tBufferOutput_4[14] = null;
											}
											if (copyOfcopyOfcheckLookup.variant_region_id != null) {

												row_tBufferOutput_4[15] = copyOfcopyOfcheckLookup.variant_region_id;

											} else {
												row_tBufferOutput_4[15] = null;
											}
											if (copyOfcopyOfcheckLookup.copy_number != null) {

												row_tBufferOutput_4[16] = copyOfcopyOfcheckLookup.copy_number;

											} else {
												row_tBufferOutput_4[16] = null;
											}
											if (copyOfcopyOfcheckLookup.ref_copy_number != null) {

												row_tBufferOutput_4[17] = copyOfcopyOfcheckLookup.ref_copy_number;

											} else {
												row_tBufferOutput_4[17] = null;
											}
											if (copyOfcopyOfcheckLookup.description != null) {

												row_tBufferOutput_4[18] = copyOfcopyOfcheckLookup.description;

											} else {
												row_tBufferOutput_4[18] = null;
											}
											if (copyOfcopyOfcheckLookup.validation != null) {

												row_tBufferOutput_4[19] = copyOfcopyOfcheckLookup.validation;

											} else {
												row_tBufferOutput_4[19] = null;
											}
											if (copyOfcopyOfcheckLookup.zygosity != null) {

												row_tBufferOutput_4[20] = copyOfcopyOfcheckLookup.zygosity;

											} else {
												row_tBufferOutput_4[20] = null;
											}
											if (copyOfcopyOfcheckLookup.origin != null) {

												row_tBufferOutput_4[21] = copyOfcopyOfcheckLookup.origin;

											} else {
												row_tBufferOutput_4[21] = null;
											}
											if (copyOfcopyOfcheckLookup.phenotype != null) {

												row_tBufferOutput_4[22] = copyOfcopyOfcheckLookup.phenotype;

											} else {
												row_tBufferOutput_4[22] = null;
											}
											if (copyOfcopyOfcheckLookup.alt_status != null) {

												row_tBufferOutput_4[23] = copyOfcopyOfcheckLookup.alt_status;

											} else {
												row_tBufferOutput_4[23] = null;
											}
											if (copyOfcopyOfcheckLookup.assembly_ != null) {

												row_tBufferOutput_4[24] = copyOfcopyOfcheckLookup.assembly_;

											} else {
												row_tBufferOutput_4[24] = null;
											}
											if (copyOfcopyOfcheckLookup.from_chr != null) {

												row_tBufferOutput_4[25] = copyOfcopyOfcheckLookup.from_chr;

											} else {
												row_tBufferOutput_4[25] = null;
											}
											if (copyOfcopyOfcheckLookup.from_coord != null) {

												row_tBufferOutput_4[26] = copyOfcopyOfcheckLookup.from_coord;

											} else {
												row_tBufferOutput_4[26] = null;
											}
											if (copyOfcopyOfcheckLookup.from_strand != null) {

												row_tBufferOutput_4[27] = copyOfcopyOfcheckLookup.from_strand;

											} else {
												row_tBufferOutput_4[27] = null;
											}
											if (copyOfcopyOfcheckLookup.to_chr != null) {

												row_tBufferOutput_4[28] = copyOfcopyOfcheckLookup.to_chr;

											} else {
												row_tBufferOutput_4[28] = null;
											}
											if (copyOfcopyOfcheckLookup.to_coord != null) {

												row_tBufferOutput_4[29] = copyOfcopyOfcheckLookup.to_coord;

											} else {
												row_tBufferOutput_4[29] = null;
											}
											if (copyOfcopyOfcheckLookup.to_strand != null) {

												row_tBufferOutput_4[30] = copyOfcopyOfcheckLookup.to_strand;

											} else {
												row_tBufferOutput_4[30] = null;
											}
											if (copyOfcopyOfcheckLookup.mutation_id != null) {

												row_tBufferOutput_4[31] = copyOfcopyOfcheckLookup.mutation_id;

											} else {
												row_tBufferOutput_4[31] = null;
											}
											if (copyOfcopyOfcheckLookup.mutation_order != null) {

												row_tBufferOutput_4[32] = copyOfcopyOfcheckLookup.mutation_order;

											} else {
												row_tBufferOutput_4[32] = null;
											}
											if (copyOfcopyOfcheckLookup.mutation_molecule != null) {

												row_tBufferOutput_4[33] = copyOfcopyOfcheckLookup.mutation_molecule;

											} else {
												row_tBufferOutput_4[33] = null;
											}
											if (copyOfcopyOfcheckLookup.external_links != null) {

												row_tBufferOutput_4[34] = copyOfcopyOfcheckLookup.external_links;

											} else {
												row_tBufferOutput_4[34] = null;
											}
											if (copyOfcopyOfcheckLookup.evidence != null) {

												row_tBufferOutput_4[35] = copyOfcopyOfcheckLookup.evidence;

											} else {
												row_tBufferOutput_4[35] = null;
											}
											if (copyOfcopyOfcheckLookup.sequence != null) {

												row_tBufferOutput_4[36] = copyOfcopyOfcheckLookup.sequence;

											} else {
												row_tBufferOutput_4[36] = null;
											}
											if (copyOfcopyOfcheckLookup.support != null) {

												row_tBufferOutput_4[37] = copyOfcopyOfcheckLookup.support;

											} else {
												row_tBufferOutput_4[37] = null;
											}
											if (copyOfcopyOfcheckLookup.support_count != null) {

												row_tBufferOutput_4[38] = copyOfcopyOfcheckLookup.support_count;

											} else {
												row_tBufferOutput_4[38] = null;
											}
											if (copyOfcopyOfcheckLookup.log2_value != null) {

												row_tBufferOutput_4[39] = copyOfcopyOfcheckLookup.log2_value;

											} else {
												row_tBufferOutput_4[39] = null;
											}
											if (copyOfcopyOfcheckLookup.five_outer_flank != null) {

												row_tBufferOutput_4[40] = copyOfcopyOfcheckLookup.five_outer_flank;

											} else {
												row_tBufferOutput_4[40] = null;
											}
											if (copyOfcopyOfcheckLookup.five_inner_flank != null) {

												row_tBufferOutput_4[41] = copyOfcopyOfcheckLookup.five_inner_flank;

											} else {
												row_tBufferOutput_4[41] = null;
											}
											if (copyOfcopyOfcheckLookup.three_inner_flank != null) {

												row_tBufferOutput_4[42] = copyOfcopyOfcheckLookup.three_inner_flank;

											} else {
												row_tBufferOutput_4[42] = null;
											}
											if (copyOfcopyOfcheckLookup.three_outer_flank != null) {

												row_tBufferOutput_4[43] = copyOfcopyOfcheckLookup.three_outer_flank;

											} else {
												row_tBufferOutput_4[43] = null;
											}
											if (copyOfcopyOfcheckLookup.allele_dose != null) {

												row_tBufferOutput_4[44] = copyOfcopyOfcheckLookup.allele_dose;

											} else {
												row_tBufferOutput_4[44] = null;
											}
											if (copyOfcopyOfcheckLookup.errorMessage != null) {

												row_tBufferOutput_4[45] = copyOfcopyOfcheckLookup.errorMessage;

											} else {
												row_tBufferOutput_4[45] = null;
											}
											globalBuffer
													.add(row_tBufferOutput_4);

											tos_count_tBufferOutput_4++;

											/**
											 * [tBufferOutput_4 main ] stop
											 */

										} // End of branch
											// "copyOfcopyOfcheckLookup"

									} // End of branch "copyOftoMetaDataFile"

									// Start of branch "copyOfcheckLookup"
									if (copyOfcheckLookup != null) {

										/**
										 * [tBufferOutput_1 main ] start
										 */

										currentComponent = "tBufferOutput_1";

										String[] row_tBufferOutput_1 = new String[] {
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", "", "", "",
												"", "", "", "", "", "", };
										if (copyOfcheckLookup.variant_call_id != null) {

											row_tBufferOutput_1[0] = copyOfcheckLookup.variant_call_id;

										} else {
											row_tBufferOutput_1[0] = null;
										}
										if (copyOfcheckLookup.variant_call_type != null) {

											row_tBufferOutput_1[1] = copyOfcheckLookup.variant_call_type;

										} else {
											row_tBufferOutput_1[1] = null;
										}
										if (copyOfcheckLookup.experiment_id != null) {

											row_tBufferOutput_1[2] = copyOfcheckLookup.experiment_id;

										} else {
											row_tBufferOutput_1[2] = null;
										}
										if (copyOfcheckLookup.sample_id != null) {

											row_tBufferOutput_1[3] = copyOfcheckLookup.sample_id;

										} else {
											row_tBufferOutput_1[3] = null;
										}
										if (copyOfcheckLookup.sampleset_id != null) {

											row_tBufferOutput_1[4] = copyOfcheckLookup.sampleset_id;

										} else {
											row_tBufferOutput_1[4] = null;
										}
										if (copyOfcheckLookup.assembly != null) {

											row_tBufferOutput_1[5] = copyOfcheckLookup.assembly;

										} else {
											row_tBufferOutput_1[5] = null;
										}
										if (copyOfcheckLookup.chr != null) {

											row_tBufferOutput_1[6] = copyOfcheckLookup.chr;

										} else {
											row_tBufferOutput_1[6] = null;
										}
										if (copyOfcheckLookup.contig != null) {

											row_tBufferOutput_1[7] = copyOfcheckLookup.contig;

										} else {
											row_tBufferOutput_1[7] = null;
										}
										if (copyOfcheckLookup.outer_start != null) {

											row_tBufferOutput_1[8] = copyOfcheckLookup.outer_start;

										} else {
											row_tBufferOutput_1[8] = null;
										}
										if (copyOfcheckLookup.start != null) {

											row_tBufferOutput_1[9] = copyOfcheckLookup.start;

										} else {
											row_tBufferOutput_1[9] = null;
										}
										if (copyOfcheckLookup.inner_start != null) {

											row_tBufferOutput_1[10] = copyOfcheckLookup.inner_start;

										} else {
											row_tBufferOutput_1[10] = null;
										}
										if (copyOfcheckLookup.inner_stop != null) {

											row_tBufferOutput_1[11] = copyOfcheckLookup.inner_stop;

										} else {
											row_tBufferOutput_1[11] = null;
										}
										if (copyOfcheckLookup.stop != null) {

											row_tBufferOutput_1[12] = copyOfcheckLookup.stop;

										} else {
											row_tBufferOutput_1[12] = null;
										}
										if (copyOfcheckLookup.outer_stop != null) {

											row_tBufferOutput_1[13] = copyOfcheckLookup.outer_stop;

										} else {
											row_tBufferOutput_1[13] = null;
										}
										if (copyOfcheckLookup.insertion_length != null) {

											row_tBufferOutput_1[14] = copyOfcheckLookup.insertion_length;

										} else {
											row_tBufferOutput_1[14] = null;
										}
										if (copyOfcheckLookup.variant_region_id != null) {

											row_tBufferOutput_1[15] = copyOfcheckLookup.variant_region_id;

										} else {
											row_tBufferOutput_1[15] = null;
										}
										if (copyOfcheckLookup.copy_number != null) {

											row_tBufferOutput_1[16] = copyOfcheckLookup.copy_number;

										} else {
											row_tBufferOutput_1[16] = null;
										}
										if (copyOfcheckLookup.ref_copy_number != null) {

											row_tBufferOutput_1[17] = copyOfcheckLookup.ref_copy_number;

										} else {
											row_tBufferOutput_1[17] = null;
										}
										if (copyOfcheckLookup.description != null) {

											row_tBufferOutput_1[18] = copyOfcheckLookup.description;

										} else {
											row_tBufferOutput_1[18] = null;
										}
										if (copyOfcheckLookup.validation != null) {

											row_tBufferOutput_1[19] = copyOfcheckLookup.validation;

										} else {
											row_tBufferOutput_1[19] = null;
										}
										if (copyOfcheckLookup.zygosity != null) {

											row_tBufferOutput_1[20] = copyOfcheckLookup.zygosity;

										} else {
											row_tBufferOutput_1[20] = null;
										}
										if (copyOfcheckLookup.origin != null) {

											row_tBufferOutput_1[21] = copyOfcheckLookup.origin;

										} else {
											row_tBufferOutput_1[21] = null;
										}
										if (copyOfcheckLookup.phenotype != null) {

											row_tBufferOutput_1[22] = copyOfcheckLookup.phenotype;

										} else {
											row_tBufferOutput_1[22] = null;
										}
										if (copyOfcheckLookup.alt_status != null) {

											row_tBufferOutput_1[23] = copyOfcheckLookup.alt_status;

										} else {
											row_tBufferOutput_1[23] = null;
										}
										if (copyOfcheckLookup.assembly_ != null) {

											row_tBufferOutput_1[24] = copyOfcheckLookup.assembly_;

										} else {
											row_tBufferOutput_1[24] = null;
										}
										if (copyOfcheckLookup.from_chr != null) {

											row_tBufferOutput_1[25] = copyOfcheckLookup.from_chr;

										} else {
											row_tBufferOutput_1[25] = null;
										}
										if (copyOfcheckLookup.from_coord != null) {

											row_tBufferOutput_1[26] = copyOfcheckLookup.from_coord;

										} else {
											row_tBufferOutput_1[26] = null;
										}
										if (copyOfcheckLookup.from_strand != null) {

											row_tBufferOutput_1[27] = copyOfcheckLookup.from_strand;

										} else {
											row_tBufferOutput_1[27] = null;
										}
										if (copyOfcheckLookup.to_chr != null) {

											row_tBufferOutput_1[28] = copyOfcheckLookup.to_chr;

										} else {
											row_tBufferOutput_1[28] = null;
										}
										if (copyOfcheckLookup.to_coord != null) {

											row_tBufferOutput_1[29] = copyOfcheckLookup.to_coord;

										} else {
											row_tBufferOutput_1[29] = null;
										}
										if (copyOfcheckLookup.to_strand != null) {

											row_tBufferOutput_1[30] = copyOfcheckLookup.to_strand;

										} else {
											row_tBufferOutput_1[30] = null;
										}
										if (copyOfcheckLookup.mutation_id != null) {

											row_tBufferOutput_1[31] = copyOfcheckLookup.mutation_id;

										} else {
											row_tBufferOutput_1[31] = null;
										}
										if (copyOfcheckLookup.mutation_order != null) {

											row_tBufferOutput_1[32] = copyOfcheckLookup.mutation_order;

										} else {
											row_tBufferOutput_1[32] = null;
										}
										if (copyOfcheckLookup.mutation_molecule != null) {

											row_tBufferOutput_1[33] = copyOfcheckLookup.mutation_molecule;

										} else {
											row_tBufferOutput_1[33] = null;
										}
										if (copyOfcheckLookup.external_links != null) {

											row_tBufferOutput_1[34] = copyOfcheckLookup.external_links;

										} else {
											row_tBufferOutput_1[34] = null;
										}
										if (copyOfcheckLookup.evidence != null) {

											row_tBufferOutput_1[35] = copyOfcheckLookup.evidence;

										} else {
											row_tBufferOutput_1[35] = null;
										}
										if (copyOfcheckLookup.sequence != null) {

											row_tBufferOutput_1[36] = copyOfcheckLookup.sequence;

										} else {
											row_tBufferOutput_1[36] = null;
										}
										if (copyOfcheckLookup.support != null) {

											row_tBufferOutput_1[37] = copyOfcheckLookup.support;

										} else {
											row_tBufferOutput_1[37] = null;
										}
										if (copyOfcheckLookup.support_count != null) {

											row_tBufferOutput_1[38] = copyOfcheckLookup.support_count;

										} else {
											row_tBufferOutput_1[38] = null;
										}
										if (copyOfcheckLookup.log2_value != null) {

											row_tBufferOutput_1[39] = copyOfcheckLookup.log2_value;

										} else {
											row_tBufferOutput_1[39] = null;
										}
										if (copyOfcheckLookup.five_outer_flank != null) {

											row_tBufferOutput_1[40] = copyOfcheckLookup.five_outer_flank;

										} else {
											row_tBufferOutput_1[40] = null;
										}
										if (copyOfcheckLookup.five_inner_flank != null) {

											row_tBufferOutput_1[41] = copyOfcheckLookup.five_inner_flank;

										} else {
											row_tBufferOutput_1[41] = null;
										}
										if (copyOfcheckLookup.three_inner_flank != null) {

											row_tBufferOutput_1[42] = copyOfcheckLookup.three_inner_flank;

										} else {
											row_tBufferOutput_1[42] = null;
										}
										if (copyOfcheckLookup.three_outer_flank != null) {

											row_tBufferOutput_1[43] = copyOfcheckLookup.three_outer_flank;

										} else {
											row_tBufferOutput_1[43] = null;
										}
										if (copyOfcheckLookup.allele_dose != null) {

											row_tBufferOutput_1[44] = copyOfcheckLookup.allele_dose;

										} else {
											row_tBufferOutput_1[44] = null;
										}
										if (copyOfcheckLookup.errorMessage != null) {

											row_tBufferOutput_1[45] = copyOfcheckLookup.errorMessage;

										} else {
											row_tBufferOutput_1[45] = null;
										}
										globalBuffer.add(row_tBufferOutput_1);

										tos_count_tBufferOutput_1++;

										/**
										 * [tBufferOutput_1 main ] stop
										 */

									} // End of branch "copyOfcheckLookup"

								} // End of branch "toMetaDataFile"

								// Start of branch "checkLookup"
								if (checkLookup != null) {

									/**
									 * [tBufferOutput_3 main ] start
									 */

									currentComponent = "tBufferOutput_3";

									String[] row_tBufferOutput_3 = new String[] {
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", "", "", "", "", "",
											"", "", "", "", "", "", "", "", "",
											"", };
									if (checkLookup.variant_call_id != null) {

										row_tBufferOutput_3[0] = checkLookup.variant_call_id;

									} else {
										row_tBufferOutput_3[0] = null;
									}
									if (checkLookup.variant_call_type != null) {

										row_tBufferOutput_3[1] = checkLookup.variant_call_type;

									} else {
										row_tBufferOutput_3[1] = null;
									}
									if (checkLookup.experiment_id != null) {

										row_tBufferOutput_3[2] = checkLookup.experiment_id;

									} else {
										row_tBufferOutput_3[2] = null;
									}
									if (checkLookup.sample_id != null) {

										row_tBufferOutput_3[3] = checkLookup.sample_id;

									} else {
										row_tBufferOutput_3[3] = null;
									}
									if (checkLookup.sampleset_id != null) {

										row_tBufferOutput_3[4] = checkLookup.sampleset_id;

									} else {
										row_tBufferOutput_3[4] = null;
									}
									if (checkLookup.assembly != null) {

										row_tBufferOutput_3[5] = checkLookup.assembly;

									} else {
										row_tBufferOutput_3[5] = null;
									}
									if (checkLookup.chr != null) {

										row_tBufferOutput_3[6] = checkLookup.chr;

									} else {
										row_tBufferOutput_3[6] = null;
									}
									if (checkLookup.contig != null) {

										row_tBufferOutput_3[7] = checkLookup.contig;

									} else {
										row_tBufferOutput_3[7] = null;
									}
									if (checkLookup.outer_start != null) {

										row_tBufferOutput_3[8] = checkLookup.outer_start;

									} else {
										row_tBufferOutput_3[8] = null;
									}
									if (checkLookup.start != null) {

										row_tBufferOutput_3[9] = checkLookup.start;

									} else {
										row_tBufferOutput_3[9] = null;
									}
									if (checkLookup.inner_start != null) {

										row_tBufferOutput_3[10] = checkLookup.inner_start;

									} else {
										row_tBufferOutput_3[10] = null;
									}
									if (checkLookup.inner_stop != null) {

										row_tBufferOutput_3[11] = checkLookup.inner_stop;

									} else {
										row_tBufferOutput_3[11] = null;
									}
									if (checkLookup.stop != null) {

										row_tBufferOutput_3[12] = checkLookup.stop;

									} else {
										row_tBufferOutput_3[12] = null;
									}
									if (checkLookup.outer_stop != null) {

										row_tBufferOutput_3[13] = checkLookup.outer_stop;

									} else {
										row_tBufferOutput_3[13] = null;
									}
									if (checkLookup.insertion_length != null) {

										row_tBufferOutput_3[14] = checkLookup.insertion_length;

									} else {
										row_tBufferOutput_3[14] = null;
									}
									if (checkLookup.variant_region_id != null) {

										row_tBufferOutput_3[15] = checkLookup.variant_region_id;

									} else {
										row_tBufferOutput_3[15] = null;
									}
									if (checkLookup.copy_number != null) {

										row_tBufferOutput_3[16] = checkLookup.copy_number;

									} else {
										row_tBufferOutput_3[16] = null;
									}
									if (checkLookup.ref_copy_number != null) {

										row_tBufferOutput_3[17] = checkLookup.ref_copy_number;

									} else {
										row_tBufferOutput_3[17] = null;
									}
									if (checkLookup.description != null) {

										row_tBufferOutput_3[18] = checkLookup.description;

									} else {
										row_tBufferOutput_3[18] = null;
									}
									if (checkLookup.validation != null) {

										row_tBufferOutput_3[19] = checkLookup.validation;

									} else {
										row_tBufferOutput_3[19] = null;
									}
									if (checkLookup.zygosity != null) {

										row_tBufferOutput_3[20] = checkLookup.zygosity;

									} else {
										row_tBufferOutput_3[20] = null;
									}
									if (checkLookup.origin != null) {

										row_tBufferOutput_3[21] = checkLookup.origin;

									} else {
										row_tBufferOutput_3[21] = null;
									}
									if (checkLookup.phenotype != null) {

										row_tBufferOutput_3[22] = checkLookup.phenotype;

									} else {
										row_tBufferOutput_3[22] = null;
									}
									if (checkLookup.alt_status != null) {

										row_tBufferOutput_3[23] = checkLookup.alt_status;

									} else {
										row_tBufferOutput_3[23] = null;
									}
									if (checkLookup.assembly_ != null) {

										row_tBufferOutput_3[24] = checkLookup.assembly_;

									} else {
										row_tBufferOutput_3[24] = null;
									}
									if (checkLookup.from_chr != null) {

										row_tBufferOutput_3[25] = checkLookup.from_chr;

									} else {
										row_tBufferOutput_3[25] = null;
									}
									if (checkLookup.from_coord != null) {

										row_tBufferOutput_3[26] = checkLookup.from_coord;

									} else {
										row_tBufferOutput_3[26] = null;
									}
									if (checkLookup.from_strand != null) {

										row_tBufferOutput_3[27] = checkLookup.from_strand;

									} else {
										row_tBufferOutput_3[27] = null;
									}
									if (checkLookup.to_chr != null) {

										row_tBufferOutput_3[28] = checkLookup.to_chr;

									} else {
										row_tBufferOutput_3[28] = null;
									}
									if (checkLookup.to_coord != null) {

										row_tBufferOutput_3[29] = checkLookup.to_coord;

									} else {
										row_tBufferOutput_3[29] = null;
									}
									if (checkLookup.to_strand != null) {

										row_tBufferOutput_3[30] = checkLookup.to_strand;

									} else {
										row_tBufferOutput_3[30] = null;
									}
									if (checkLookup.mutation_id != null) {

										row_tBufferOutput_3[31] = checkLookup.mutation_id;

									} else {
										row_tBufferOutput_3[31] = null;
									}
									if (checkLookup.mutation_order != null) {

										row_tBufferOutput_3[32] = checkLookup.mutation_order;

									} else {
										row_tBufferOutput_3[32] = null;
									}
									if (checkLookup.mutation_molecule != null) {

										row_tBufferOutput_3[33] = checkLookup.mutation_molecule;

									} else {
										row_tBufferOutput_3[33] = null;
									}
									if (checkLookup.external_links != null) {

										row_tBufferOutput_3[34] = checkLookup.external_links;

									} else {
										row_tBufferOutput_3[34] = null;
									}
									if (checkLookup.evidence != null) {

										row_tBufferOutput_3[35] = checkLookup.evidence;

									} else {
										row_tBufferOutput_3[35] = null;
									}
									if (checkLookup.sequence != null) {

										row_tBufferOutput_3[36] = checkLookup.sequence;

									} else {
										row_tBufferOutput_3[36] = null;
									}
									if (checkLookup.support != null) {

										row_tBufferOutput_3[37] = checkLookup.support;

									} else {
										row_tBufferOutput_3[37] = null;
									}
									if (checkLookup.support_count != null) {

										row_tBufferOutput_3[38] = checkLookup.support_count;

									} else {
										row_tBufferOutput_3[38] = null;
									}
									if (checkLookup.log2_value != null) {

										row_tBufferOutput_3[39] = checkLookup.log2_value;

									} else {
										row_tBufferOutput_3[39] = null;
									}
									if (checkLookup.five_outer_flank != null) {

										row_tBufferOutput_3[40] = checkLookup.five_outer_flank;

									} else {
										row_tBufferOutput_3[40] = null;
									}
									if (checkLookup.five_inner_flank != null) {

										row_tBufferOutput_3[41] = checkLookup.five_inner_flank;

									} else {
										row_tBufferOutput_3[41] = null;
									}
									if (checkLookup.three_inner_flank != null) {

										row_tBufferOutput_3[42] = checkLookup.three_inner_flank;

									} else {
										row_tBufferOutput_3[42] = null;
									}
									if (checkLookup.three_outer_flank != null) {

										row_tBufferOutput_3[43] = checkLookup.three_outer_flank;

									} else {
										row_tBufferOutput_3[43] = null;
									}
									if (checkLookup.allele_dose != null) {

										row_tBufferOutput_3[44] = checkLookup.allele_dose;

									} else {
										row_tBufferOutput_3[44] = null;
									}
									if (checkLookup.errorMessage != null) {

										row_tBufferOutput_3[45] = checkLookup.errorMessage;

									} else {
										row_tBufferOutput_3[45] = null;
									}
									globalBuffer.add(row_tBufferOutput_3);

									tos_count_tBufferOutput_3++;

									/**
									 * [tBufferOutput_3 main ] stop
									 */

								} // End of branch "checkLookup"

							} // End of branch "row5"

							// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFilterColumns_1 main ] start
								 */

								currentComponent = "tFilterColumns_1";

								row6.variant_call_id = row9.variant_call_id;

								row6.variant_call_type = row9.variant_call_type;

								row6.experiment_id = row9.experiment_id;

								row6.sample_id = row9.sample_id;

								row6.sampleset_id = row9.sampleset_id;

								row6.assembly = row9.assembly;

								row6.chr = row9.chr;

								row6.contig = row9.contig;

								row6.outer_start = row9.outer_start;

								row6.start = row9.start;

								row6.inner_start = row9.inner_start;

								row6.inner_stop = row9.inner_stop;

								row6.stop = row9.stop;

								row6.outer_stop = row9.outer_stop;

								row6.insertion_length = row9.insertion_length;

								row6.variant_region_id = row9.variant_region_id;

								row6.copy_number = row9.copy_number;

								row6.ref_copy_number = row9.ref_copy_number;

								row6.description = row9.description;

								row6.validation = row9.validation;

								row6.zygosity = row9.zygosity;

								row6.origin = row9.origin;

								row6.phenotype = row9.phenotype;

								row6.alt_status = row9.alt_status;

								row6.assembly_ = row9.assembly_;

								row6.from_chr = row9.from_chr;

								row6.from_coord = row9.from_coord;

								row6.from_strand = row9.from_strand;

								row6.to_chr = row9.to_chr;

								row6.to_coord = row9.to_coord;

								row6.to_strand = row9.to_strand;

								row6.mutation_id = row9.mutation_id;

								row6.mutation_order = row9.mutation_order;

								row6.mutation_molecule = row9.mutation_molecule;

								row6.external_links = row9.external_links;

								row6.evidence = row9.evidence;

								row6.sequence = row9.sequence;

								row6.support = row9.support;

								row6.support_count = row9.support_count;

								row6.log2_value = row9.log2_value;

								row6.five_outer_flank = row9.five_outer_flank;

								row6.five_inner_flank = row9.five_inner_flank;

								row6.three_inner_flank = row9.three_inner_flank;

								row6.three_outer_flank = row9.three_outer_flank;

								row6.allele_dose = row9.allele_dose;

								row6.errorMessage = row9.errorMessage;

								nb_line_tFilterColumns_1++;

								tos_count_tFilterColumns_1++;

								/**
								 * [tFilterColumns_1 main ] stop
								 */

								/**
								 * [tBufferOutput_2 main ] start
								 */

								currentComponent = "tBufferOutput_2";

								String[] row_tBufferOutput_2 = new String[] {
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", "", "", "", "", "", "", "",
										"", "", "", "", "", "", };
								if (row6.variant_call_id != null) {

									row_tBufferOutput_2[0] = row6.variant_call_id;

								} else {
									row_tBufferOutput_2[0] = null;
								}
								if (row6.variant_call_type != null) {

									row_tBufferOutput_2[1] = row6.variant_call_type;

								} else {
									row_tBufferOutput_2[1] = null;
								}
								if (row6.experiment_id != null) {

									row_tBufferOutput_2[2] = row6.experiment_id;

								} else {
									row_tBufferOutput_2[2] = null;
								}
								if (row6.sample_id != null) {

									row_tBufferOutput_2[3] = row6.sample_id;

								} else {
									row_tBufferOutput_2[3] = null;
								}
								if (row6.sampleset_id != null) {

									row_tBufferOutput_2[4] = row6.sampleset_id;

								} else {
									row_tBufferOutput_2[4] = null;
								}
								if (row6.assembly != null) {

									row_tBufferOutput_2[5] = row6.assembly;

								} else {
									row_tBufferOutput_2[5] = null;
								}
								if (row6.chr != null) {

									row_tBufferOutput_2[6] = row6.chr;

								} else {
									row_tBufferOutput_2[6] = null;
								}
								if (row6.contig != null) {

									row_tBufferOutput_2[7] = row6.contig;

								} else {
									row_tBufferOutput_2[7] = null;
								}
								if (row6.outer_start != null) {

									row_tBufferOutput_2[8] = row6.outer_start;

								} else {
									row_tBufferOutput_2[8] = null;
								}
								if (row6.start != null) {

									row_tBufferOutput_2[9] = row6.start;

								} else {
									row_tBufferOutput_2[9] = null;
								}
								if (row6.inner_start != null) {

									row_tBufferOutput_2[10] = row6.inner_start;

								} else {
									row_tBufferOutput_2[10] = null;
								}
								if (row6.inner_stop != null) {

									row_tBufferOutput_2[11] = row6.inner_stop;

								} else {
									row_tBufferOutput_2[11] = null;
								}
								if (row6.stop != null) {

									row_tBufferOutput_2[12] = row6.stop;

								} else {
									row_tBufferOutput_2[12] = null;
								}
								if (row6.outer_stop != null) {

									row_tBufferOutput_2[13] = row6.outer_stop;

								} else {
									row_tBufferOutput_2[13] = null;
								}
								if (row6.insertion_length != null) {

									row_tBufferOutput_2[14] = row6.insertion_length;

								} else {
									row_tBufferOutput_2[14] = null;
								}
								if (row6.variant_region_id != null) {

									row_tBufferOutput_2[15] = row6.variant_region_id;

								} else {
									row_tBufferOutput_2[15] = null;
								}
								if (row6.copy_number != null) {

									row_tBufferOutput_2[16] = row6.copy_number;

								} else {
									row_tBufferOutput_2[16] = null;
								}
								if (row6.ref_copy_number != null) {

									row_tBufferOutput_2[17] = row6.ref_copy_number;

								} else {
									row_tBufferOutput_2[17] = null;
								}
								if (row6.description != null) {

									row_tBufferOutput_2[18] = row6.description;

								} else {
									row_tBufferOutput_2[18] = null;
								}
								if (row6.validation != null) {

									row_tBufferOutput_2[19] = row6.validation;

								} else {
									row_tBufferOutput_2[19] = null;
								}
								if (row6.zygosity != null) {

									row_tBufferOutput_2[20] = row6.zygosity;

								} else {
									row_tBufferOutput_2[20] = null;
								}
								if (row6.origin != null) {

									row_tBufferOutput_2[21] = row6.origin;

								} else {
									row_tBufferOutput_2[21] = null;
								}
								if (row6.phenotype != null) {

									row_tBufferOutput_2[22] = row6.phenotype;

								} else {
									row_tBufferOutput_2[22] = null;
								}
								if (row6.alt_status != null) {

									row_tBufferOutput_2[23] = row6.alt_status;

								} else {
									row_tBufferOutput_2[23] = null;
								}
								if (row6.assembly_ != null) {

									row_tBufferOutput_2[24] = row6.assembly_;

								} else {
									row_tBufferOutput_2[24] = null;
								}
								if (row6.from_chr != null) {

									row_tBufferOutput_2[25] = row6.from_chr;

								} else {
									row_tBufferOutput_2[25] = null;
								}
								if (row6.from_coord != null) {

									row_tBufferOutput_2[26] = row6.from_coord;

								} else {
									row_tBufferOutput_2[26] = null;
								}
								if (row6.from_strand != null) {

									row_tBufferOutput_2[27] = row6.from_strand;

								} else {
									row_tBufferOutput_2[27] = null;
								}
								if (row6.to_chr != null) {

									row_tBufferOutput_2[28] = row6.to_chr;

								} else {
									row_tBufferOutput_2[28] = null;
								}
								if (row6.to_coord != null) {

									row_tBufferOutput_2[29] = row6.to_coord;

								} else {
									row_tBufferOutput_2[29] = null;
								}
								if (row6.to_strand != null) {

									row_tBufferOutput_2[30] = row6.to_strand;

								} else {
									row_tBufferOutput_2[30] = null;
								}
								if (row6.mutation_id != null) {

									row_tBufferOutput_2[31] = row6.mutation_id;

								} else {
									row_tBufferOutput_2[31] = null;
								}
								if (row6.mutation_order != null) {

									row_tBufferOutput_2[32] = row6.mutation_order;

								} else {
									row_tBufferOutput_2[32] = null;
								}
								if (row6.mutation_molecule != null) {

									row_tBufferOutput_2[33] = row6.mutation_molecule;

								} else {
									row_tBufferOutput_2[33] = null;
								}
								if (row6.external_links != null) {

									row_tBufferOutput_2[34] = row6.external_links;

								} else {
									row_tBufferOutput_2[34] = null;
								}
								if (row6.evidence != null) {

									row_tBufferOutput_2[35] = row6.evidence;

								} else {
									row_tBufferOutput_2[35] = null;
								}
								if (row6.sequence != null) {

									row_tBufferOutput_2[36] = row6.sequence;

								} else {
									row_tBufferOutput_2[36] = null;
								}
								if (row6.support != null) {

									row_tBufferOutput_2[37] = row6.support;

								} else {
									row_tBufferOutput_2[37] = null;
								}
								if (row6.support_count != null) {

									row_tBufferOutput_2[38] = row6.support_count;

								} else {
									row_tBufferOutput_2[38] = null;
								}
								if (row6.log2_value != null) {

									row_tBufferOutput_2[39] = row6.log2_value;

								} else {
									row_tBufferOutput_2[39] = null;
								}
								if (row6.five_outer_flank != null) {

									row_tBufferOutput_2[40] = row6.five_outer_flank;

								} else {
									row_tBufferOutput_2[40] = null;
								}
								if (row6.five_inner_flank != null) {

									row_tBufferOutput_2[41] = row6.five_inner_flank;

								} else {
									row_tBufferOutput_2[41] = null;
								}
								if (row6.three_inner_flank != null) {

									row_tBufferOutput_2[42] = row6.three_inner_flank;

								} else {
									row_tBufferOutput_2[42] = null;
								}
								if (row6.three_outer_flank != null) {

									row_tBufferOutput_2[43] = row6.three_outer_flank;

								} else {
									row_tBufferOutput_2[43] = null;
								}
								if (row6.allele_dose != null) {

									row_tBufferOutput_2[44] = row6.allele_dose;

								} else {
									row_tBufferOutput_2[44] = null;
								}
								if (row6.errorMessage != null) {

									row_tBufferOutput_2[45] = row6.errorMessage;

								} else {
									row_tBufferOutput_2[45] = null;
								}
								globalBuffer.add(row_tBufferOutput_2);

								tos_count_tBufferOutput_2++;

								/**
								 * [tBufferOutput_2 main ] stop
								 */

							} // End of branch "row9"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) (context.workdir + "/tmp/temp2.tmp") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE",
								fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 end ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				ok_Hash.put("tSchemaComplianceCheck_1", true);
				end_Hash.put("tSchemaComplianceCheck_1",
						System.currentTimeMillis());

				/**
				 * [tSchemaComplianceCheck_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tBufferOutput_5 end ] start
				 */

				currentComponent = "tBufferOutput_5";

				ok_Hash.put("tBufferOutput_5", true);
				end_Hash.put("tBufferOutput_5", System.currentTimeMillis());

				/**
				 * [tBufferOutput_5 end ] stop
				 */

				/**
				 * [tBufferOutput_4 end ] start
				 */

				currentComponent = "tBufferOutput_4";

				ok_Hash.put("tBufferOutput_4", true);
				end_Hash.put("tBufferOutput_4", System.currentTimeMillis());

				/**
				 * [tBufferOutput_4 end ] stop
				 */

				/**
				 * [tBufferOutput_1 end ] start
				 */

				currentComponent = "tBufferOutput_1";

				ok_Hash.put("tBufferOutput_1", true);
				end_Hash.put("tBufferOutput_1", System.currentTimeMillis());

				/**
				 * [tBufferOutput_1 end ] stop
				 */

				/**
				 * [tBufferOutput_3 end ] start
				 */

				currentComponent = "tBufferOutput_3";

				ok_Hash.put("tBufferOutput_3", true);
				end_Hash.put("tBufferOutput_3", System.currentTimeMillis());

				/**
				 * [tBufferOutput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_1 end ] start
				 */

				currentComponent = "tFilterColumns_1";

				globalMap.put("tFilterColumns_1_NB_LINE",
						nb_line_tFilterColumns_1);

				ok_Hash.put("tFilterColumns_1", true);
				end_Hash.put("tFilterColumns_1", System.currentTimeMillis());

				/**
				 * [tFilterColumns_1 end ] stop
				 */

				/**
				 * [tBufferOutput_2 end ] start
				 */

				currentComponent = "tBufferOutput_2";

				ok_Hash.put("tBufferOutput_2", true);
				end_Hash.put("tBufferOutput_2", System.currentTimeMillis());

				/**
				 * [tBufferOutput_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tFileInputDelimited_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tBufferInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row26");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row20");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tSchemaComplianceCheck_1 finally ] start
				 */

				currentComponent = "tSchemaComplianceCheck_1";

				/**
				 * [tSchemaComplianceCheck_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tBufferOutput_5 finally ] start
				 */

				currentComponent = "tBufferOutput_5";

				/**
				 * [tBufferOutput_5 finally ] stop
				 */

				/**
				 * [tBufferOutput_4 finally ] start
				 */

				currentComponent = "tBufferOutput_4";

				/**
				 * [tBufferOutput_4 finally ] stop
				 */

				/**
				 * [tBufferOutput_1 finally ] start
				 */

				currentComponent = "tBufferOutput_1";

				/**
				 * [tBufferOutput_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_3 finally ] start
				 */

				currentComponent = "tBufferOutput_3";

				/**
				 * [tBufferOutput_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_1 finally ] start
				 */

				currentComponent = "tFilterColumns_1";

				/**
				 * [tFilterColumns_1 finally ] stop
				 */

				/**
				 * [tBufferOutput_2 finally ] start
				 */

				currentComponent = "tBufferOutput_2";

				/**
				 * [tBufferOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String variant_call_id;

		public String getVariant_call_id() {
			return this.variant_call_id;
		}

		public String variant_call_type;

		public String getVariant_call_type() {
			return this.variant_call_type;
		}

		public String experiment_id;

		public String getExperiment_id() {
			return this.experiment_id;
		}

		public String sample_id;

		public String getSample_id() {
			return this.sample_id;
		}

		public String sampleset_id;

		public String getSampleset_id() {
			return this.sampleset_id;
		}

		public String assembly;

		public String getAssembly() {
			return this.assembly;
		}

		public String chr;

		public String getChr() {
			return this.chr;
		}

		public String contig;

		public String getContig() {
			return this.contig;
		}

		public String outer_start;

		public String getOuter_start() {
			return this.outer_start;
		}

		public String start;

		public String getStart() {
			return this.start;
		}

		public String inner_start;

		public String getInner_start() {
			return this.inner_start;
		}

		public String inner_stop;

		public String getInner_stop() {
			return this.inner_stop;
		}

		public String stop;

		public String getStop() {
			return this.stop;
		}

		public String outer_stop;

		public String getOuter_stop() {
			return this.outer_stop;
		}

		public String insertion_length;

		public String getInsertion_length() {
			return this.insertion_length;
		}

		public String variant_region_id;

		public String getVariant_region_id() {
			return this.variant_region_id;
		}

		public String copy_number;

		public String getCopy_number() {
			return this.copy_number;
		}

		public String ref_copy_number;

		public String getRef_copy_number() {
			return this.ref_copy_number;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String validation;

		public String getValidation() {
			return this.validation;
		}

		public String zygosity;

		public String getZygosity() {
			return this.zygosity;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String phenotype;

		public String getPhenotype() {
			return this.phenotype;
		}

		public String alt_status;

		public String getAlt_status() {
			return this.alt_status;
		}

		public String assembly_;

		public String getAssembly_() {
			return this.assembly_;
		}

		public String from_chr;

		public String getFrom_chr() {
			return this.from_chr;
		}

		public String from_coord;

		public String getFrom_coord() {
			return this.from_coord;
		}

		public String from_strand;

		public String getFrom_strand() {
			return this.from_strand;
		}

		public String to_chr;

		public String getTo_chr() {
			return this.to_chr;
		}

		public String to_coord;

		public String getTo_coord() {
			return this.to_coord;
		}

		public String to_strand;

		public String getTo_strand() {
			return this.to_strand;
		}

		public String mutation_id;

		public String getMutation_id() {
			return this.mutation_id;
		}

		public String mutation_order;

		public String getMutation_order() {
			return this.mutation_order;
		}

		public String mutation_molecule;

		public String getMutation_molecule() {
			return this.mutation_molecule;
		}

		public String external_links;

		public String getExternal_links() {
			return this.external_links;
		}

		public String evidence;

		public String getEvidence() {
			return this.evidence;
		}

		public String sequence;

		public String getSequence() {
			return this.sequence;
		}

		public String support;

		public String getSupport() {
			return this.support;
		}

		public String support_count;

		public String getSupport_count() {
			return this.support_count;
		}

		public String log2_value;

		public String getLog2_value() {
			return this.log2_value;
		}

		public String five_outer_flank;

		public String getFive_outer_flank() {
			return this.five_outer_flank;
		}

		public String five_inner_flank;

		public String getFive_inner_flank() {
			return this.five_inner_flank;
		}

		public String three_inner_flank;

		public String getThree_inner_flank() {
			return this.three_inner_flank;
		}

		public String three_outer_flank;

		public String getThree_outer_flank() {
			return this.three_outer_flank;
		}

		public String allele_dose;

		public String getAllele_dose() {
			return this.allele_dose;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.variant_call_id = readString(dis);

					this.variant_call_type = readString(dis);

					this.experiment_id = readString(dis);

					this.sample_id = readString(dis);

					this.sampleset_id = readString(dis);

					this.assembly = readString(dis);

					this.chr = readString(dis);

					this.contig = readString(dis);

					this.outer_start = readString(dis);

					this.start = readString(dis);

					this.inner_start = readString(dis);

					this.inner_stop = readString(dis);

					this.stop = readString(dis);

					this.outer_stop = readString(dis);

					this.insertion_length = readString(dis);

					this.variant_region_id = readString(dis);

					this.copy_number = readString(dis);

					this.ref_copy_number = readString(dis);

					this.description = readString(dis);

					this.validation = readString(dis);

					this.zygosity = readString(dis);

					this.origin = readString(dis);

					this.phenotype = readString(dis);

					this.alt_status = readString(dis);

					this.assembly_ = readString(dis);

					this.from_chr = readString(dis);

					this.from_coord = readString(dis);

					this.from_strand = readString(dis);

					this.to_chr = readString(dis);

					this.to_coord = readString(dis);

					this.to_strand = readString(dis);

					this.mutation_id = readString(dis);

					this.mutation_order = readString(dis);

					this.mutation_molecule = readString(dis);

					this.external_links = readString(dis);

					this.evidence = readString(dis);

					this.sequence = readString(dis);

					this.support = readString(dis);

					this.support_count = readString(dis);

					this.log2_value = readString(dis);

					this.five_outer_flank = readString(dis);

					this.five_inner_flank = readString(dis);

					this.three_inner_flank = readString(dis);

					this.three_outer_flank = readString(dis);

					this.allele_dose = readString(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.variant_call_id, dos);

				// String

				writeString(this.variant_call_type, dos);

				// String

				writeString(this.experiment_id, dos);

				// String

				writeString(this.sample_id, dos);

				// String

				writeString(this.sampleset_id, dos);

				// String

				writeString(this.assembly, dos);

				// String

				writeString(this.chr, dos);

				// String

				writeString(this.contig, dos);

				// String

				writeString(this.outer_start, dos);

				// String

				writeString(this.start, dos);

				// String

				writeString(this.inner_start, dos);

				// String

				writeString(this.inner_stop, dos);

				// String

				writeString(this.stop, dos);

				// String

				writeString(this.outer_stop, dos);

				// String

				writeString(this.insertion_length, dos);

				// String

				writeString(this.variant_region_id, dos);

				// String

				writeString(this.copy_number, dos);

				// String

				writeString(this.ref_copy_number, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.validation, dos);

				// String

				writeString(this.zygosity, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.phenotype, dos);

				// String

				writeString(this.alt_status, dos);

				// String

				writeString(this.assembly_, dos);

				// String

				writeString(this.from_chr, dos);

				// String

				writeString(this.from_coord, dos);

				// String

				writeString(this.from_strand, dos);

				// String

				writeString(this.to_chr, dos);

				// String

				writeString(this.to_coord, dos);

				// String

				writeString(this.to_strand, dos);

				// String

				writeString(this.mutation_id, dos);

				// String

				writeString(this.mutation_order, dos);

				// String

				writeString(this.mutation_molecule, dos);

				// String

				writeString(this.external_links, dos);

				// String

				writeString(this.evidence, dos);

				// String

				writeString(this.sequence, dos);

				// String

				writeString(this.support, dos);

				// String

				writeString(this.support_count, dos);

				// String

				writeString(this.log2_value, dos);

				// String

				writeString(this.five_outer_flank, dos);

				// String

				writeString(this.five_inner_flank, dos);

				// String

				writeString(this.three_inner_flank, dos);

				// String

				writeString(this.three_outer_flank, dos);

				// String

				writeString(this.allele_dose, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("variant_call_id=" + variant_call_id);
			sb.append(",variant_call_type=" + variant_call_type);
			sb.append(",experiment_id=" + experiment_id);
			sb.append(",sample_id=" + sample_id);
			sb.append(",sampleset_id=" + sampleset_id);
			sb.append(",assembly=" + assembly);
			sb.append(",chr=" + chr);
			sb.append(",contig=" + contig);
			sb.append(",outer_start=" + outer_start);
			sb.append(",start=" + start);
			sb.append(",inner_start=" + inner_start);
			sb.append(",inner_stop=" + inner_stop);
			sb.append(",stop=" + stop);
			sb.append(",outer_stop=" + outer_stop);
			sb.append(",insertion_length=" + insertion_length);
			sb.append(",variant_region_id=" + variant_region_id);
			sb.append(",copy_number=" + copy_number);
			sb.append(",ref_copy_number=" + ref_copy_number);
			sb.append(",description=" + description);
			sb.append(",validation=" + validation);
			sb.append(",zygosity=" + zygosity);
			sb.append(",origin=" + origin);
			sb.append(",phenotype=" + phenotype);
			sb.append(",alt_status=" + alt_status);
			sb.append(",assembly_=" + assembly_);
			sb.append(",from_chr=" + from_chr);
			sb.append(",from_coord=" + from_coord);
			sb.append(",from_strand=" + from_strand);
			sb.append(",to_chr=" + to_chr);
			sb.append(",to_coord=" + to_coord);
			sb.append(",to_strand=" + to_strand);
			sb.append(",mutation_id=" + mutation_id);
			sb.append(",mutation_order=" + mutation_order);
			sb.append(",mutation_molecule=" + mutation_molecule);
			sb.append(",external_links=" + external_links);
			sb.append(",evidence=" + evidence);
			sb.append(",sequence=" + sequence);
			sb.append(",support=" + support);
			sb.append(",support_count=" + support_count);
			sb.append(",log2_value=" + log2_value);
			sb.append(",five_outer_flank=" + five_outer_flank);
			sb.append(",five_inner_flank=" + five_inner_flank);
			sb.append(",three_inner_flank=" + three_inner_flank);
			sb.append(",three_outer_flank=" + three_outer_flank);
			sb.append(",allele_dose=" + allele_dose);
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tBufferInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						context.workdir + "/bad/variantCalls.csv"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
							.substring(0, fileName_tFileOutputDelimited_2
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(0, fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitEvery_tFileOutputDelimited_2 = 1000;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /**
				 * Start field
				 * tFileOutputDelimited_2:FIELDSEPARATOR
				 */
				"\t"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
				 * Start
				 * field tFileOutputDelimited_2:ROWSEPARATOR
				 */
				"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null
						&& directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(
							directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(
						fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_2, false),
								context.encoding));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("variant_call_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("variant_call_type");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("experiment_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sample_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sampleset_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assembly");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("contig");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_start");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("inner_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("outer_stop");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("insertion_length");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("variant_region_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("copy_number");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("ref_copy_number");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("description");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("validation");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("zygosity");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("origin");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("phenotype");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("alt_status");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("assembly_");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_coord");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("from_strand");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_chr");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_coord");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("to_strand");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_id");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_order");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("mutation_molecule");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("external_links");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("evidence");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("sequence");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("support");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("support_count");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("log2_value");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("five_outer_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("five_inner_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("three_inner_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("three_outer_flank");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("allele_dose");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("errorMessage");
					outtFileOutputDelimited_2
							.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2",
						outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2",
						nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2",
						isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2",
						filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tBufferInput_1 begin ] start
				 */

				ok_Hash.put("tBufferInput_1", false);
				start_Hash.put("tBufferInput_1", System.currentTimeMillis());

				currentComponent = "tBufferInput_1";

				int tos_count_tBufferInput_1 = 0;

				int nb_line_tBufferInput_1 = 0;

				String[] row_tBufferInput_1 = new String[46];
				for (int n = 0; n < globalBuffer.size(); n++) {
					row_tBufferInput_1 = (String[]) globalBuffer.get(n);
					if (0 < row_tBufferInput_1.length) {

						row4.variant_call_id = row_tBufferInput_1[0];

					}

					else {
						row4.variant_call_id = null;
					}
					if (1 < row_tBufferInput_1.length) {

						row4.variant_call_type = row_tBufferInput_1[1];

					}

					else {
						row4.variant_call_type = null;
					}
					if (2 < row_tBufferInput_1.length) {

						row4.experiment_id = row_tBufferInput_1[2];

					}

					else {
						row4.experiment_id = null;
					}
					if (3 < row_tBufferInput_1.length) {

						row4.sample_id = row_tBufferInput_1[3];

					}

					else {
						row4.sample_id = null;
					}
					if (4 < row_tBufferInput_1.length) {

						row4.sampleset_id = row_tBufferInput_1[4];

					}

					else {
						row4.sampleset_id = null;
					}
					if (5 < row_tBufferInput_1.length) {

						row4.assembly = row_tBufferInput_1[5];

					}

					else {
						row4.assembly = null;
					}
					if (6 < row_tBufferInput_1.length) {

						row4.chr = row_tBufferInput_1[6];

					}

					else {
						row4.chr = null;
					}
					if (7 < row_tBufferInput_1.length) {

						row4.contig = row_tBufferInput_1[7];

					}

					else {
						row4.contig = null;
					}
					if (8 < row_tBufferInput_1.length) {

						row4.outer_start = row_tBufferInput_1[8];

					}

					else {
						row4.outer_start = null;
					}
					if (9 < row_tBufferInput_1.length) {

						row4.start = row_tBufferInput_1[9];

					}

					else {
						row4.start = null;
					}
					if (10 < row_tBufferInput_1.length) {

						row4.inner_start = row_tBufferInput_1[10];

					}

					else {
						row4.inner_start = null;
					}
					if (11 < row_tBufferInput_1.length) {

						row4.inner_stop = row_tBufferInput_1[11];

					}

					else {
						row4.inner_stop = null;
					}
					if (12 < row_tBufferInput_1.length) {

						row4.stop = row_tBufferInput_1[12];

					}

					else {
						row4.stop = null;
					}
					if (13 < row_tBufferInput_1.length) {

						row4.outer_stop = row_tBufferInput_1[13];

					}

					else {
						row4.outer_stop = null;
					}
					if (14 < row_tBufferInput_1.length) {

						row4.insertion_length = row_tBufferInput_1[14];

					}

					else {
						row4.insertion_length = null;
					}
					if (15 < row_tBufferInput_1.length) {

						row4.variant_region_id = row_tBufferInput_1[15];

					}

					else {
						row4.variant_region_id = null;
					}
					if (16 < row_tBufferInput_1.length) {

						row4.copy_number = row_tBufferInput_1[16];

					}

					else {
						row4.copy_number = null;
					}
					if (17 < row_tBufferInput_1.length) {

						row4.ref_copy_number = row_tBufferInput_1[17];

					}

					else {
						row4.ref_copy_number = null;
					}
					if (18 < row_tBufferInput_1.length) {

						row4.description = row_tBufferInput_1[18];

					}

					else {
						row4.description = null;
					}
					if (19 < row_tBufferInput_1.length) {

						row4.validation = row_tBufferInput_1[19];

					}

					else {
						row4.validation = null;
					}
					if (20 < row_tBufferInput_1.length) {

						row4.zygosity = row_tBufferInput_1[20];

					}

					else {
						row4.zygosity = null;
					}
					if (21 < row_tBufferInput_1.length) {

						row4.origin = row_tBufferInput_1[21];

					}

					else {
						row4.origin = null;
					}
					if (22 < row_tBufferInput_1.length) {

						row4.phenotype = row_tBufferInput_1[22];

					}

					else {
						row4.phenotype = null;
					}
					if (23 < row_tBufferInput_1.length) {

						row4.alt_status = row_tBufferInput_1[23];

					}

					else {
						row4.alt_status = null;
					}
					if (24 < row_tBufferInput_1.length) {

						row4.assembly_ = row_tBufferInput_1[24];

					}

					else {
						row4.assembly_ = null;
					}
					if (25 < row_tBufferInput_1.length) {

						row4.from_chr = row_tBufferInput_1[25];

					}

					else {
						row4.from_chr = null;
					}
					if (26 < row_tBufferInput_1.length) {

						row4.from_coord = row_tBufferInput_1[26];

					}

					else {
						row4.from_coord = null;
					}
					if (27 < row_tBufferInput_1.length) {

						row4.from_strand = row_tBufferInput_1[27];

					}

					else {
						row4.from_strand = null;
					}
					if (28 < row_tBufferInput_1.length) {

						row4.to_chr = row_tBufferInput_1[28];

					}

					else {
						row4.to_chr = null;
					}
					if (29 < row_tBufferInput_1.length) {

						row4.to_coord = row_tBufferInput_1[29];

					}

					else {
						row4.to_coord = null;
					}
					if (30 < row_tBufferInput_1.length) {

						row4.to_strand = row_tBufferInput_1[30];

					}

					else {
						row4.to_strand = null;
					}
					if (31 < row_tBufferInput_1.length) {

						row4.mutation_id = row_tBufferInput_1[31];

					}

					else {
						row4.mutation_id = null;
					}
					if (32 < row_tBufferInput_1.length) {

						row4.mutation_order = row_tBufferInput_1[32];

					}

					else {
						row4.mutation_order = null;
					}
					if (33 < row_tBufferInput_1.length) {

						row4.mutation_molecule = row_tBufferInput_1[33];

					}

					else {
						row4.mutation_molecule = null;
					}
					if (34 < row_tBufferInput_1.length) {

						row4.external_links = row_tBufferInput_1[34];

					}

					else {
						row4.external_links = null;
					}
					if (35 < row_tBufferInput_1.length) {

						row4.evidence = row_tBufferInput_1[35];

					}

					else {
						row4.evidence = null;
					}
					if (36 < row_tBufferInput_1.length) {

						row4.sequence = row_tBufferInput_1[36];

					}

					else {
						row4.sequence = null;
					}
					if (37 < row_tBufferInput_1.length) {

						row4.support = row_tBufferInput_1[37];

					}

					else {
						row4.support = null;
					}
					if (38 < row_tBufferInput_1.length) {

						row4.support_count = row_tBufferInput_1[38];

					}

					else {
						row4.support_count = null;
					}
					if (39 < row_tBufferInput_1.length) {

						row4.log2_value = row_tBufferInput_1[39];

					}

					else {
						row4.log2_value = null;
					}
					if (40 < row_tBufferInput_1.length) {

						row4.five_outer_flank = row_tBufferInput_1[40];

					}

					else {
						row4.five_outer_flank = null;
					}
					if (41 < row_tBufferInput_1.length) {

						row4.five_inner_flank = row_tBufferInput_1[41];

					}

					else {
						row4.five_inner_flank = null;
					}
					if (42 < row_tBufferInput_1.length) {

						row4.three_inner_flank = row_tBufferInput_1[42];

					}

					else {
						row4.three_inner_flank = null;
					}
					if (43 < row_tBufferInput_1.length) {

						row4.three_outer_flank = row_tBufferInput_1[43];

					}

					else {
						row4.three_outer_flank = null;
					}
					if (44 < row_tBufferInput_1.length) {

						row4.allele_dose = row_tBufferInput_1[44];

					}

					else {
						row4.allele_dose = null;
					}
					if (45 < row_tBufferInput_1.length) {

						row4.errorMessage = row_tBufferInput_1[45];

					}

					else {
						row4.errorMessage = null;
					}

					/**
					 * [tBufferInput_1 begin ] stop
					 */

					/**
					 * [tBufferInput_1 main ] start
					 */

					currentComponent = "tBufferInput_1";

					tos_count_tBufferInput_1++;

					/**
					 * [tBufferInput_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row4.variant_call_id != null) {
						sb_tFileOutputDelimited_2.append(row4.variant_call_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.variant_call_type != null) {
						sb_tFileOutputDelimited_2
								.append(row4.variant_call_type);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.experiment_id != null) {
						sb_tFileOutputDelimited_2.append(row4.experiment_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sample_id != null) {
						sb_tFileOutputDelimited_2.append(row4.sample_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sampleset_id != null) {
						sb_tFileOutputDelimited_2.append(row4.sampleset_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.assembly != null) {
						sb_tFileOutputDelimited_2.append(row4.assembly);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.chr != null) {
						sb_tFileOutputDelimited_2.append(row4.chr);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.contig != null) {
						sb_tFileOutputDelimited_2.append(row4.contig);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.outer_start != null) {
						sb_tFileOutputDelimited_2.append(row4.outer_start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.start != null) {
						sb_tFileOutputDelimited_2.append(row4.start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.inner_start != null) {
						sb_tFileOutputDelimited_2.append(row4.inner_start);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.inner_stop != null) {
						sb_tFileOutputDelimited_2.append(row4.inner_stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.stop != null) {
						sb_tFileOutputDelimited_2.append(row4.stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.outer_stop != null) {
						sb_tFileOutputDelimited_2.append(row4.outer_stop);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.insertion_length != null) {
						sb_tFileOutputDelimited_2.append(row4.insertion_length);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.variant_region_id != null) {
						sb_tFileOutputDelimited_2
								.append(row4.variant_region_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.copy_number != null) {
						sb_tFileOutputDelimited_2.append(row4.copy_number);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.ref_copy_number != null) {
						sb_tFileOutputDelimited_2.append(row4.ref_copy_number);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.description != null) {
						sb_tFileOutputDelimited_2.append(row4.description);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.validation != null) {
						sb_tFileOutputDelimited_2.append(row4.validation);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.zygosity != null) {
						sb_tFileOutputDelimited_2.append(row4.zygosity);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.origin != null) {
						sb_tFileOutputDelimited_2.append(row4.origin);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.phenotype != null) {
						sb_tFileOutputDelimited_2.append(row4.phenotype);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.alt_status != null) {
						sb_tFileOutputDelimited_2.append(row4.alt_status);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.assembly_ != null) {
						sb_tFileOutputDelimited_2.append(row4.assembly_);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.from_chr != null) {
						sb_tFileOutputDelimited_2.append(row4.from_chr);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.from_coord != null) {
						sb_tFileOutputDelimited_2.append(row4.from_coord);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.from_strand != null) {
						sb_tFileOutputDelimited_2.append(row4.from_strand);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.to_chr != null) {
						sb_tFileOutputDelimited_2.append(row4.to_chr);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.to_coord != null) {
						sb_tFileOutputDelimited_2.append(row4.to_coord);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.to_strand != null) {
						sb_tFileOutputDelimited_2.append(row4.to_strand);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.mutation_id != null) {
						sb_tFileOutputDelimited_2.append(row4.mutation_id);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.mutation_order != null) {
						sb_tFileOutputDelimited_2.append(row4.mutation_order);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.mutation_molecule != null) {
						sb_tFileOutputDelimited_2
								.append(row4.mutation_molecule);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.external_links != null) {
						sb_tFileOutputDelimited_2.append(row4.external_links);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.evidence != null) {
						sb_tFileOutputDelimited_2.append(row4.evidence);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.sequence != null) {
						sb_tFileOutputDelimited_2.append(row4.sequence);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.support != null) {
						sb_tFileOutputDelimited_2.append(row4.support);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.support_count != null) {
						sb_tFileOutputDelimited_2.append(row4.support_count);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.log2_value != null) {
						sb_tFileOutputDelimited_2.append(row4.log2_value);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.five_outer_flank != null) {
						sb_tFileOutputDelimited_2.append(row4.five_outer_flank);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.five_inner_flank != null) {
						sb_tFileOutputDelimited_2.append(row4.five_inner_flank);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.three_inner_flank != null) {
						sb_tFileOutputDelimited_2
								.append(row4.three_inner_flank);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.three_outer_flank != null) {
						sb_tFileOutputDelimited_2
								.append(row4.three_outer_flank);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.allele_dose != null) {
						sb_tFileOutputDelimited_2.append(row4.allele_dose);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row4.errorMessage != null) {
						sb_tFileOutputDelimited_2.append(row4.errorMessage);
					}
					sb_tFileOutputDelimited_2
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2",
							nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2
							.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tBufferInput_1 end ] start
					 */

					currentComponent = "tBufferInput_1";

					nb_line_tBufferInput_1++;
				}
				globalMap.put("tBufferInput_1_NB_LINE", nb_line_tBufferInput_1);

				ok_Hash.put("tBufferInput_1", true);
				end_Hash.put("tBufferInput_1", System.currentTimeMillis());

				/**
				 * [tBufferInput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE",
						nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",
						fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2
						&& nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tBufferInput_1 finally ] start
				 */

				currentComponent = "tBufferInput_1";

				/**
				 * [tBufferInput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap
							.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer.valueOf(String.valueOf(resourceMap
									.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap
								.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tBufferInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.OriginCV == null) ? 0 : this.OriginCV
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.OriginCV == null) {
				if (other.OriginCV != null)
					return false;

			} else if (!this.OriginCV.equals(other.OriginCV))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.OriginCV = this.OriginCV;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.OriginCV = this.OriginCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.OriginCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OriginCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OriginCV=" + OriginCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.OriginCV, other.OriginCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements
			routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.OriginCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OriginCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OriginCV=" + OriginCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.OriginCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.OriginCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("OriginCV=" + OriginCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				row2Struct row2 = new row2Struct();
				row10Struct row10 = new row10Struct();

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tUnite_1 - inputs:(row17,row10)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 -
				// inputs:(row7) outputs:()
				// linked node: tMap_2 - inputs:(row5,row7)
				// outputs:(toMetaDataFile,checkLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				int nb_line_tFixedFlowInput_1 = 0;
				List<row17Struct> cacheList_tFixedFlowInput_1 = new java.util.ArrayList<row17Struct>();
				row17 = new row17Struct();
				row17.OriginCV = "";
				cacheList_tFixedFlowInput_1.add(row17);
				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {
					for (row17Struct tmpRow_tFixedFlowInput_1 : cacheList_tFixedFlowInput_1) {
						nb_line_tFixedFlowInput_1++;
						row17 = tmpRow_tFixedFlowInput_1;

						/**
						 * [tFixedFlowInput_1 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_1 main ] start
						 */

						currentComponent = "tFixedFlowInput_1";

						tos_count_tFixedFlowInput_1++;

						/**
						 * [tFixedFlowInput_1 main ] stop
						 */

						/**
						 * [tUnite_1 main ] start
						 */

						currentComponent = "tUnite_1";

						// ////////

						// for output
						row7 = new row7Struct();

						row7.OriginCV = row17.OriginCV;

						nb_line_tUnite_1++;

						// ////////

						tos_count_tUnite_1++;

						/**
						 * [tUnite_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.OriginCV = row7.OriginCV;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tFixedFlowInput_1 end ] start
						 */

						currentComponent = "tFixedFlowInput_1";

					}
				}
				cacheList_tFixedFlowInput_1.clear();
				globalMap.put("tFixedFlowInput_1_NB_LINE",
						nb_line_tFixedFlowInput_1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 begin ] start
				 */

				ok_Hash.put("tFilterColumns_2", false);
				start_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				currentComponent = "tFilterColumns_2";

				int tos_count_tFilterColumns_2 = 0;

				int nb_line_tFilterColumns_2 = 0;

				/**
				 * [tFilterColumns_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('\"');

						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('\"');

							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row2.AnalysisTypeCV = null;

								row2.CollectionCV = null;

								row2.ContactRoleCV = null;

								row2.LinkDbCV = null;

								row2.MethodTypeCV = null;

								row2.OriginCV = null;

								row2.RecipientStatusCV = null;

								row2.ReferenceTypeCV = null;

								row2.SamplesetTypeCV = null;

								row2.SexCV = null;

								row2.StrandTypeCV = null;

								row2.StudyTypeCV = null;

								row2.SubjectAgeUnitsCV = null;

								row2.VariantCallTypeCV = null;

								row2.VariantCallZygosityCV = null;

								row2.VariantRegionTypeCV = null;

								row2.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.AnalysisTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.CollectionCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ContactRoleCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.LinkDbCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.MethodTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.OriginCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.RecipientStatusCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.ReferenceTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SamplesetTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SexCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StrandTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.StudyTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.SubjectAgeUnitsCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantCallZygosityCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.VariantRegionTypeCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row2.BooleanCV = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row2.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row2 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tFilterColumns_2 main ] start
							 */

							currentComponent = "tFilterColumns_2";

							row10.OriginCV = row2.OriginCV;

							nb_line_tFilterColumns_2++;

							tos_count_tFilterColumns_2++;

							/**
							 * [tFilterColumns_2 main ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							// ////////

							// for output
							row7 = new row7Struct();

							row7.OriginCV = row10.OriginCV;

							nb_line_tUnite_1++;

							// ////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.OriginCV = row7.OriginCV;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterColumns_2 end ] start
				 */

				currentComponent = "tFilterColumns_2";

				globalMap.put("tFilterColumns_2_NB_LINE",
						nb_line_tFilterColumns_2);

				ok_Hash.put("tFilterColumns_2", true);
				end_Hash.put("tFilterColumns_2", System.currentTimeMillis());

				/**
				 * [tFilterColumns_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterColumns_2 finally ] start
				 */

				currentComponent = "tFilterColumns_2";

				/**
				 * [tFilterColumns_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements
			routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.RecipientStatusCV == null) ? 0
								: this.RecipientStatusCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.RecipientStatusCV == null) {
				if (other.RecipientStatusCV != null)
					return false;

			} else if (!this.RecipientStatusCV.equals(other.RecipientStatusCV))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.RecipientStatusCV = this.RecipientStatusCV;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.RecipientStatusCV = this.RecipientStatusCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.RecipientStatusCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RecipientStatusCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RecipientStatusCV=" + RecipientStatusCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.RecipientStatusCV,
					other.RecipientStatusCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.RecipientStatusCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RecipientStatusCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RecipientStatusCV=" + RecipientStatusCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements
			routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.RecipientStatusCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.RecipientStatusCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RecipientStatusCV=" + RecipientStatusCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				row16Struct row16 = new row16Struct();
				row18Struct row18 = new row18Struct();

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tUnite_2 - inputs:(row14,row18)
				// outputs:(row15,row15) | target node:tAdvancedHash_row15 -
				// inputs:(row15) outputs:()
				// linked node: tMap_1 - inputs:(toMetaDataFile,row15)
				// outputs:(copyOftoMetaDataFile,copyOfcheckLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct> getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				int nb_line_tFixedFlowInput_2 = 0;
				List<row14Struct> cacheList_tFixedFlowInput_2 = new java.util.ArrayList<row14Struct>();
				row14 = new row14Struct();
				row14.RecipientStatusCV = "";
				cacheList_tFixedFlowInput_2.add(row14);
				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {
					for (row14Struct tmpRow_tFixedFlowInput_2 : cacheList_tFixedFlowInput_2) {
						nb_line_tFixedFlowInput_2++;
						row14 = tmpRow_tFixedFlowInput_2;

						/**
						 * [tFixedFlowInput_2 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_2 main ] start
						 */

						currentComponent = "tFixedFlowInput_2";

						tos_count_tFixedFlowInput_2++;

						/**
						 * [tFixedFlowInput_2 main ] stop
						 */

						/**
						 * [tUnite_2 main ] start
						 */

						currentComponent = "tUnite_2";

						// ////////

						// for output
						row15 = new row15Struct();

						row15.RecipientStatusCV = row14.RecipientStatusCV;

						nb_line_tUnite_2++;

						// ////////

						tos_count_tUnite_2++;

						/**
						 * [tUnite_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row15 main ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						row15Struct row15_HashRow = new row15Struct();

						row15_HashRow.RecipientStatusCV = row15.RecipientStatusCV;

						tHash_Lookup_row15.put(row15_HashRow);

						tos_count_tAdvancedHash_row15++;

						/**
						 * [tAdvancedHash_row15 main ] stop
						 */

						/**
						 * [tFixedFlowInput_2 end ] start
						 */

						currentComponent = "tFixedFlowInput_2";

					}
				}
				cacheList_tFixedFlowInput_2.clear();
				globalMap.put("tFixedFlowInput_2_NB_LINE",
						nb_line_tFixedFlowInput_2);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tFilterColumns_4 begin ] start
				 */

				ok_Hash.put("tFilterColumns_4", false);
				start_Hash.put("tFilterColumns_4", System.currentTimeMillis());

				currentComponent = "tFilterColumns_4";

				int tos_count_tFilterColumns_4 = 0;

				int nb_line_tFilterColumns_4 = 0;

				/**
				 * [tFilterColumns_4 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /**
				 * Start field
				 * tFileInputDelimited_3:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_3:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_3)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_3[0]);
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('\"');

						csvReadertFileInputDelimited_3
								.setEscapeChar(csvReadertFileInputDelimited_3
										.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_3.readNext()) {

								rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
										.getValues();
								if (!(rowtFileInputDelimited_3.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_3[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_3++;

								}

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
									: totalLinetFileInputDelimited_3
											- footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3 ? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_3)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_3[0]);
							}
							csvReadertFileInputDelimited_3
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('\"');

							csvReadertFileInputDelimited_3
									.setEscapeChar(csvReadertFileInputDelimited_3
											.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_3 != 0
							&& csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3
								.getValues();

						if (rowtFileInputDelimited_3.length == 1
								&& ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row16 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row16 = new row16Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_3[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row16.AnalysisTypeCV = null;

								row16.CollectionCV = null;

								row16.ContactRoleCV = null;

								row16.LinkDbCV = null;

								row16.MethodTypeCV = null;

								row16.OriginCV = null;

								row16.RecipientStatusCV = null;

								row16.ReferenceTypeCV = null;

								row16.SamplesetTypeCV = null;

								row16.SexCV = null;

								row16.StrandTypeCV = null;

								row16.StudyTypeCV = null;

								row16.SubjectAgeUnitsCV = null;

								row16.VariantCallTypeCV = null;

								row16.VariantCallZygosityCV = null;

								row16.VariantRegionTypeCV = null;

								row16.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.AnalysisTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.CollectionCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.ContactRoleCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.LinkDbCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.MethodTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 5;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.OriginCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 6;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.RecipientStatusCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 7;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.ReferenceTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 8;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.SamplesetTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 9;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.SexCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 10;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.StrandTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 11;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.StudyTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 12;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.SubjectAgeUnitsCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 13;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.VariantCallTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 14;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.VariantCallZygosityCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 15;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.VariantRegionTypeCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_3 = 16;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row16.BooleanCV = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {
									row16.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row16 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */
						// Start of branch "row16"
						if (row16 != null) {

							/**
							 * [tFilterColumns_4 main ] start
							 */

							currentComponent = "tFilterColumns_4";

							row18.RecipientStatusCV = row16.RecipientStatusCV;

							nb_line_tFilterColumns_4++;

							tos_count_tFilterColumns_4++;

							/**
							 * [tFilterColumns_4 main ] stop
							 */

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							// ////////

							// for output
							row15 = new row15Struct();

							row15.RecipientStatusCV = row18.RecipientStatusCV;

							nb_line_tUnite_2++;

							// ////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tAdvancedHash_row15 main ] start
							 */

							currentComponent = "tAdvancedHash_row15";

							row15Struct row15_HashRow = new row15Struct();

							row15_HashRow.RecipientStatusCV = row15.RecipientStatusCV;

							tHash_Lookup_row15.put(row15_HashRow);

							tos_count_tAdvancedHash_row15++;

							/**
							 * [tAdvancedHash_row15 main ] stop
							 */

						} // End of branch "row16"

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE",
								nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tFilterColumns_4 end ] start
				 */

				currentComponent = "tFilterColumns_4";

				globalMap.put("tFilterColumns_4_NB_LINE",
						nb_line_tFilterColumns_4);

				ok_Hash.put("tFilterColumns_4", true);
				end_Hash.put("tFilterColumns_4", System.currentTimeMillis());

				/**
				 * [tFilterColumns_4 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tFilterColumns_4 finally ] start
				 */

				currentComponent = "tFilterColumns_4";

				/**
				 * [tFilterColumns_4 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements
			routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.VariantCallZygosityCV == null) ? 0
								: this.VariantCallZygosityCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.VariantCallZygosityCV == null) {
				if (other.VariantCallZygosityCV != null)
					return false;

			} else if (!this.VariantCallZygosityCV
					.equals(other.VariantCallZygosityCV))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.VariantCallZygosityCV = this.VariantCallZygosityCV;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.VariantCallZygosityCV = this.VariantCallZygosityCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallZygosityCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallZygosityCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VariantCallZygosityCV,
					other.VariantCallZygosityCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements
			routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallZygosityCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallZygosityCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements
			routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallZygosityCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallZygosityCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				row21Struct row21 = new row21Struct();
				row22Struct row22 = new row22Struct();

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tUnite_3 - inputs:(row19,row22)
				// outputs:(row20,row20) | target node:tAdvancedHash_row20 -
				// inputs:(row20) outputs:()
				// linked node: tMap_3 - inputs:(copyOftoMetaDataFile,row20)
				// outputs:(copyOfcopyOftoMetaDataFile,copyOfcopyOfcheckLookup)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct> getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tUnite_3 begin ] start
				 */

				ok_Hash.put("tUnite_3", false);
				start_Hash.put("tUnite_3", System.currentTimeMillis());

				currentComponent = "tUnite_3";

				int tos_count_tUnite_3 = 0;

				int nb_line_tUnite_3 = 0;

				/**
				 * [tUnite_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				int nb_line_tFixedFlowInput_3 = 0;
				List<row19Struct> cacheList_tFixedFlowInput_3 = new java.util.ArrayList<row19Struct>();
				row19 = new row19Struct();
				row19.VariantCallZygosityCV = null;
				cacheList_tFixedFlowInput_3.add(row19);
				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {
					for (row19Struct tmpRow_tFixedFlowInput_3 : cacheList_tFixedFlowInput_3) {
						nb_line_tFixedFlowInput_3++;
						row19 = tmpRow_tFixedFlowInput_3;

						/**
						 * [tFixedFlowInput_3 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_3 main ] start
						 */

						currentComponent = "tFixedFlowInput_3";

						tos_count_tFixedFlowInput_3++;

						/**
						 * [tFixedFlowInput_3 main ] stop
						 */

						/**
						 * [tUnite_3 main ] start
						 */

						currentComponent = "tUnite_3";

						// ////////

						// for output
						row20 = new row20Struct();

						row20.VariantCallZygosityCV = row19.VariantCallZygosityCV;

						nb_line_tUnite_3++;

						// ////////

						tos_count_tUnite_3++;

						/**
						 * [tUnite_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row20 main ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						row20Struct row20_HashRow = new row20Struct();

						row20_HashRow.VariantCallZygosityCV = row20.VariantCallZygosityCV;

						tHash_Lookup_row20.put(row20_HashRow);

						tos_count_tAdvancedHash_row20++;

						/**
						 * [tAdvancedHash_row20 main ] stop
						 */

						/**
						 * [tFixedFlowInput_3 end ] start
						 */

						currentComponent = "tFixedFlowInput_3";

					}
				}
				cacheList_tFixedFlowInput_3.clear();
				globalMap.put("tFixedFlowInput_3_NB_LINE",
						nb_line_tFixedFlowInput_3);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tFilterColumns_5 begin ] start
				 */

				ok_Hash.put("tFilterColumns_5", false);
				start_Hash.put("tFilterColumns_5", System.currentTimeMillis());

				currentComponent = "tFilterColumns_5";

				int tos_count_tFilterColumns_5 = 0;

				int nb_line_tFilterColumns_5 = 0;

				/**
				 * [tFilterColumns_5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_4", false);
				start_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_4";

				int tos_count_tFileInputDelimited_4 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_4 = 0;
				int footer_tFileInputDelimited_4 = 0;
				int totalLinetFileInputDelimited_4 = 0;
				int limittFileInputDelimited_4 = -1;
				int lastLinetFileInputDelimited_4 = -1;

				char fieldSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_4 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_4[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_4 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_4 = /**
				 * Start field
				 * tFileInputDelimited_4:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_4:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_4 = null;

				try {

					String[] rowtFileInputDelimited_4 = null;
					int currentLinetFileInputDelimited_4 = 0;
					int outputLinetFileInputDelimited_4 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_4 = 0;
							if (footer_value_tFileInputDelimited_4 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_4,
									fieldSeparator_tFileInputDelimited_4[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_4)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_4[0]);
						}

						csvReadertFileInputDelimited_4.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
							csvReadertFileInputDelimited_4.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_4[0]);

						csvReadertFileInputDelimited_4.setQuoteChar('\"');

						csvReadertFileInputDelimited_4
								.setEscapeChar(csvReadertFileInputDelimited_4
										.getQuoteChar());

						if (footer_tFileInputDelimited_4 > 0) {
							for (totalLinetFileInputDelimited_4 = 0; totalLinetFileInputDelimited_4 < 1; totalLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
							csvReadertFileInputDelimited_4
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_4.readNext()) {

								rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
										.getValues();
								if (!(rowtFileInputDelimited_4.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_4[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_4++;

								}

							}
							int lastLineTemptFileInputDelimited_4 = totalLinetFileInputDelimited_4
									- footer_tFileInputDelimited_4 < 0 ? 0
									: totalLinetFileInputDelimited_4
											- footer_tFileInputDelimited_4;
							if (lastLinetFileInputDelimited_4 > 0) {
								lastLinetFileInputDelimited_4 = lastLinetFileInputDelimited_4 < lastLineTemptFileInputDelimited_4 ? lastLinetFileInputDelimited_4
										: lastLineTemptFileInputDelimited_4;
							} else {
								lastLinetFileInputDelimited_4 = lastLineTemptFileInputDelimited_4;
							}

							csvReadertFileInputDelimited_4.close();
							if (filename_tFileInputDelimited_4 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_4,
										fieldSeparator_tFileInputDelimited_4[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_4 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_4)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_4[0]);
							}
							csvReadertFileInputDelimited_4
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_4[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_4[0] != '\r'))
								csvReadertFileInputDelimited_4
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_4[0]);

							csvReadertFileInputDelimited_4.setQuoteChar('\"');

							csvReadertFileInputDelimited_4
									.setEscapeChar(csvReadertFileInputDelimited_4
											.getQuoteChar());

						}

						if (limittFileInputDelimited_4 != 0) {
							for (currentLinetFileInputDelimited_4 = 0; currentLinetFileInputDelimited_4 < 1; currentLinetFileInputDelimited_4++) {
								csvReadertFileInputDelimited_4.readNext();
							}
						}
						csvReadertFileInputDelimited_4
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_4 != 0
							&& csvReadertFileInputDelimited_4 != null
							&& csvReadertFileInputDelimited_4.readNext()) {
						rowstate_tFileInputDelimited_4.reset();

						rowtFileInputDelimited_4 = csvReadertFileInputDelimited_4
								.getValues();

						if (rowtFileInputDelimited_4.length == 1
								&& ("\015").equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_4++;

						if (lastLinetFileInputDelimited_4 > -1
								&& currentLinetFileInputDelimited_4 > lastLinetFileInputDelimited_4) {
							break;
						}
						outputLinetFileInputDelimited_4++;
						if (limittFileInputDelimited_4 > 0
								&& outputLinetFileInputDelimited_4 > limittFileInputDelimited_4) {
							break;
						}

						row21 = null;

						boolean whetherReject_tFileInputDelimited_4 = false;
						row21 = new row21Struct();
						try {

							char fieldSeparator_tFileInputDelimited_4_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_4_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_4.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_4[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row21.AnalysisTypeCV = null;

								row21.CollectionCV = null;

								row21.ContactRoleCV = null;

								row21.LinkDbCV = null;

								row21.MethodTypeCV = null;

								row21.OriginCV = null;

								row21.RecipientStatusCV = null;

								row21.ReferenceTypeCV = null;

								row21.SamplesetTypeCV = null;

								row21.SexCV = null;

								row21.StrandTypeCV = null;

								row21.StudyTypeCV = null;

								row21.SubjectAgeUnitsCV = null;

								row21.VariantCallTypeCV = null;

								row21.VariantCallZygosityCV = null;

								row21.VariantRegionTypeCV = null;

								row21.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_4 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_4 = 0;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.AnalysisTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 1;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.CollectionCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 2;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.ContactRoleCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 3;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.LinkDbCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 4;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.MethodTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 5;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.OriginCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 6;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.RecipientStatusCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 7;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.ReferenceTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 8;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.SamplesetTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 9;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.SexCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 10;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.StrandTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 11;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.StudyTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 12;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.SubjectAgeUnitsCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 13;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.VariantCallTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 14;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.VariantCallZygosityCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 15;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.VariantRegionTypeCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_4 = 16;

								if (columnIndexWithD_tFileInputDelimited_4 < rowtFileInputDelimited_4.length) {

									row21.BooleanCV = rowtFileInputDelimited_4[columnIndexWithD_tFileInputDelimited_4];

								} else {
									row21.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_4.getException() != null) {
								throw rowstate_tFileInputDelimited_4
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_4 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_4 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_4 main ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						tos_count_tFileInputDelimited_4++;

						/**
						 * [tFileInputDelimited_4 main ] stop
						 */
						// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tFilterColumns_5 main ] start
							 */

							currentComponent = "tFilterColumns_5";

							row22.VariantCallZygosityCV = row21.VariantCallZygosityCV;

							nb_line_tFilterColumns_5++;

							tos_count_tFilterColumns_5++;

							/**
							 * [tFilterColumns_5 main ] stop
							 */

							/**
							 * [tUnite_3 main ] start
							 */

							currentComponent = "tUnite_3";

							// ////////

							// for output
							row20 = new row20Struct();

							row20.VariantCallZygosityCV = row22.VariantCallZygosityCV;

							nb_line_tUnite_3++;

							// ////////

							tos_count_tUnite_3++;

							/**
							 * [tUnite_3 main ] stop
							 */

							/**
							 * [tAdvancedHash_row20 main ] start
							 */

							currentComponent = "tAdvancedHash_row20";

							row20Struct row20_HashRow = new row20Struct();

							row20_HashRow.VariantCallZygosityCV = row20.VariantCallZygosityCV;

							tHash_Lookup_row20.put(row20_HashRow);

							tos_count_tAdvancedHash_row20++;

							/**
							 * [tAdvancedHash_row20 main ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_4 end ] start
						 */

						currentComponent = "tFileInputDelimited_4";

						nb_line_tFileInputDelimited_4++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_4 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_4 != null) {
							csvReadertFileInputDelimited_4.close();
						}
					}
					if (csvReadertFileInputDelimited_4 != null) {
						globalMap.put("tFileInputDelimited_4_NB_LINE",
								nb_line_tFileInputDelimited_4);
					}

				}

				ok_Hash.put("tFileInputDelimited_4", true);
				end_Hash.put("tFileInputDelimited_4",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_4 end ] stop
				 */

				/**
				 * [tFilterColumns_5 end ] start
				 */

				currentComponent = "tFilterColumns_5";

				globalMap.put("tFilterColumns_5_NB_LINE",
						nb_line_tFilterColumns_5);

				ok_Hash.put("tFilterColumns_5", true);
				end_Hash.put("tFilterColumns_5", System.currentTimeMillis());

				/**
				 * [tFilterColumns_5 end ] stop
				 */

				/**
				 * [tUnite_3 end ] start
				 */

				currentComponent = "tUnite_3";

				globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);

				ok_Hash.put("tUnite_3", true);
				end_Hash.put("tUnite_3", System.currentTimeMillis());

				/**
				 * [tUnite_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_4 finally ] start
				 */

				currentComponent = "tFileInputDelimited_4";

				/**
				 * [tFileInputDelimited_4 finally ] stop
				 */

				/**
				 * [tFilterColumns_5 finally ] start
				 */

				currentComponent = "tFilterColumns_5";

				/**
				 * [tFilterColumns_5 finally ] stop
				 */

				/**
				 * [tUnite_3 finally ] start
				 */

				currentComponent = "tUnite_3";

				/**
				 * [tUnite_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.VariantCallTypeCV == null) ? 0
								: this.VariantCallTypeCV.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.VariantCallTypeCV == null) {
				if (other.VariantCallTypeCV != null)
					return false;

			} else if (!this.VariantCallTypeCV.equals(other.VariantCallTypeCV))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.VariantCallTypeCV = this.VariantCallTypeCV;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.VariantCallTypeCV = this.VariantCallTypeCV;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

			}

			finally {
			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

			} finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.VariantCallTypeCV,
					other.VariantCallTypeCV);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.VariantCallTypeCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.VariantCallTypeCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements
			routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_CHECKGNPCNV_checkVariantCalls = new byte[0];
		static byte[] commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[0];

		public String AnalysisTypeCV;

		public String getAnalysisTypeCV() {
			return this.AnalysisTypeCV;
		}

		public String CollectionCV;

		public String getCollectionCV() {
			return this.CollectionCV;
		}

		public String ContactRoleCV;

		public String getContactRoleCV() {
			return this.ContactRoleCV;
		}

		public String LinkDbCV;

		public String getLinkDbCV() {
			return this.LinkDbCV;
		}

		public String MethodTypeCV;

		public String getMethodTypeCV() {
			return this.MethodTypeCV;
		}

		public String OriginCV;

		public String getOriginCV() {
			return this.OriginCV;
		}

		public String RecipientStatusCV;

		public String getRecipientStatusCV() {
			return this.RecipientStatusCV;
		}

		public String ReferenceTypeCV;

		public String getReferenceTypeCV() {
			return this.ReferenceTypeCV;
		}

		public String SamplesetTypeCV;

		public String getSamplesetTypeCV() {
			return this.SamplesetTypeCV;
		}

		public String SexCV;

		public String getSexCV() {
			return this.SexCV;
		}

		public String StrandTypeCV;

		public String getStrandTypeCV() {
			return this.StrandTypeCV;
		}

		public String StudyTypeCV;

		public String getStudyTypeCV() {
			return this.StudyTypeCV;
		}

		public String SubjectAgeUnitsCV;

		public String getSubjectAgeUnitsCV() {
			return this.SubjectAgeUnitsCV;
		}

		public String VariantCallTypeCV;

		public String getVariantCallTypeCV() {
			return this.VariantCallTypeCV;
		}

		public String VariantCallZygosityCV;

		public String getVariantCallZygosityCV() {
			return this.VariantCallZygosityCV;
		}

		public String VariantRegionTypeCV;

		public String getVariantRegionTypeCV() {
			return this.VariantRegionTypeCV;
		}

		public String BooleanCV;

		public String getBooleanCV() {
			return this.BooleanCV;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CHECKGNPCNV_checkVariantCalls.length) {
					if (length < 1024
							&& commonByteArray_CHECKGNPCNV_checkVariantCalls.length == 0) {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[1024];
					} else {
						commonByteArray_CHECKGNPCNV_checkVariantCalls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length);
				strReturn = new String(
						commonByteArray_CHECKGNPCNV_checkVariantCalls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CHECKGNPCNV_checkVariantCalls) {

				try {

					int length = 0;

					this.AnalysisTypeCV = readString(dis);

					this.CollectionCV = readString(dis);

					this.ContactRoleCV = readString(dis);

					this.LinkDbCV = readString(dis);

					this.MethodTypeCV = readString(dis);

					this.OriginCV = readString(dis);

					this.RecipientStatusCV = readString(dis);

					this.ReferenceTypeCV = readString(dis);

					this.SamplesetTypeCV = readString(dis);

					this.SexCV = readString(dis);

					this.StrandTypeCV = readString(dis);

					this.StudyTypeCV = readString(dis);

					this.SubjectAgeUnitsCV = readString(dis);

					this.VariantCallTypeCV = readString(dis);

					this.VariantCallZygosityCV = readString(dis);

					this.VariantRegionTypeCV = readString(dis);

					this.BooleanCV = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.AnalysisTypeCV, dos);

				// String

				writeString(this.CollectionCV, dos);

				// String

				writeString(this.ContactRoleCV, dos);

				// String

				writeString(this.LinkDbCV, dos);

				// String

				writeString(this.MethodTypeCV, dos);

				// String

				writeString(this.OriginCV, dos);

				// String

				writeString(this.RecipientStatusCV, dos);

				// String

				writeString(this.ReferenceTypeCV, dos);

				// String

				writeString(this.SamplesetTypeCV, dos);

				// String

				writeString(this.SexCV, dos);

				// String

				writeString(this.StrandTypeCV, dos);

				// String

				writeString(this.StudyTypeCV, dos);

				// String

				writeString(this.SubjectAgeUnitsCV, dos);

				// String

				writeString(this.VariantCallTypeCV, dos);

				// String

				writeString(this.VariantCallZygosityCV, dos);

				// String

				writeString(this.VariantRegionTypeCV, dos);

				// String

				writeString(this.BooleanCV, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AnalysisTypeCV=" + AnalysisTypeCV);
			sb.append(",CollectionCV=" + CollectionCV);
			sb.append(",ContactRoleCV=" + ContactRoleCV);
			sb.append(",LinkDbCV=" + LinkDbCV);
			sb.append(",MethodTypeCV=" + MethodTypeCV);
			sb.append(",OriginCV=" + OriginCV);
			sb.append(",RecipientStatusCV=" + RecipientStatusCV);
			sb.append(",ReferenceTypeCV=" + ReferenceTypeCV);
			sb.append(",SamplesetTypeCV=" + SamplesetTypeCV);
			sb.append(",SexCV=" + SexCV);
			sb.append(",StrandTypeCV=" + StrandTypeCV);
			sb.append(",StudyTypeCV=" + StudyTypeCV);
			sb.append(",SubjectAgeUnitsCV=" + SubjectAgeUnitsCV);
			sb.append(",VariantCallTypeCV=" + VariantCallTypeCV);
			sb.append(",VariantCallZygosityCV=" + VariantCallZygosityCV);
			sb.append(",VariantRegionTypeCV=" + VariantRegionTypeCV);
			sb.append(",BooleanCV=" + BooleanCV);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();

				row24Struct row24 = new row24Struct();
				row25Struct row25 = new row25Struct();

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tUnite_4 - inputs:(row23,row25)
				// outputs:(row26,row26) | target node:tAdvancedHash_row26 -
				// inputs:(row26) outputs:()
				// linked node: tMap_4 -
				// inputs:(copyOfcopyOftoMetaDataFile,row26)
				// outputs:(copyOfcheckLookup_0)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct> getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tUnite_4 begin ] start
				 */

				ok_Hash.put("tUnite_4", false);
				start_Hash.put("tUnite_4", System.currentTimeMillis());

				currentComponent = "tUnite_4";

				int tos_count_tUnite_4 = 0;

				int nb_line_tUnite_4 = 0;

				/**
				 * [tUnite_4 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_4 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_4", false);
				start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_4";

				int tos_count_tFixedFlowInput_4 = 0;

				int nb_line_tFixedFlowInput_4 = 0;
				List<row23Struct> cacheList_tFixedFlowInput_4 = new java.util.ArrayList<row23Struct>();
				row23 = new row23Struct();
				row23.VariantCallTypeCV = null;
				cacheList_tFixedFlowInput_4.add(row23);
				for (int i_tFixedFlowInput_4 = 0; i_tFixedFlowInput_4 < 1; i_tFixedFlowInput_4++) {
					for (row23Struct tmpRow_tFixedFlowInput_4 : cacheList_tFixedFlowInput_4) {
						nb_line_tFixedFlowInput_4++;
						row23 = tmpRow_tFixedFlowInput_4;

						/**
						 * [tFixedFlowInput_4 begin ] stop
						 */

						/**
						 * [tFixedFlowInput_4 main ] start
						 */

						currentComponent = "tFixedFlowInput_4";

						tos_count_tFixedFlowInput_4++;

						/**
						 * [tFixedFlowInput_4 main ] stop
						 */

						/**
						 * [tUnite_4 main ] start
						 */

						currentComponent = "tUnite_4";

						// ////////

						// for output
						row26 = new row26Struct();

						row26.VariantCallTypeCV = row23.VariantCallTypeCV;

						nb_line_tUnite_4++;

						// ////////

						tos_count_tUnite_4++;

						/**
						 * [tUnite_4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row26 main ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						row26Struct row26_HashRow = new row26Struct();

						row26_HashRow.VariantCallTypeCV = row26.VariantCallTypeCV;

						tHash_Lookup_row26.put(row26_HashRow);

						tos_count_tAdvancedHash_row26++;

						/**
						 * [tAdvancedHash_row26 main ] stop
						 */

						/**
						 * [tFixedFlowInput_4 end ] start
						 */

						currentComponent = "tFixedFlowInput_4";

					}
				}
				cacheList_tFixedFlowInput_4.clear();
				globalMap.put("tFixedFlowInput_4_NB_LINE",
						nb_line_tFixedFlowInput_4);

				ok_Hash.put("tFixedFlowInput_4", true);
				end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_4 end ] stop
				 */

				/**
				 * [tFilterColumns_6 begin ] start
				 */

				ok_Hash.put("tFilterColumns_6", false);
				start_Hash.put("tFilterColumns_6", System.currentTimeMillis());

				currentComponent = "tFilterColumns_6";

				int tos_count_tFilterColumns_6 = 0;

				int nb_line_tFilterColumns_6 = 0;

				/**
				 * [tFilterColumns_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_5", false);
				start_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_5";

				int tos_count_tFileInputDelimited_5 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_5 = 0;
				int footer_tFileInputDelimited_5 = 0;
				int totalLinetFileInputDelimited_5 = 0;
				int limittFileInputDelimited_5 = -1;
				int lastLinetFileInputDelimited_5 = -1;

				char fieldSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "\t").length() > 0) {
					fieldSeparator_tFileInputDelimited_5 = ((String) "\t")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_5[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_5 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_5 = /**
				 * Start field
				 * tFileInputDelimited_5:FILENAME
				 */
				context.workdir + "/tmp/staticData.tmp"/**
				 * End field
				 * tFileInputDelimited_5:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_5 = null;

				try {

					String[] rowtFileInputDelimited_5 = null;
					int currentLinetFileInputDelimited_5 = 0;
					int outputLinetFileInputDelimited_5 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_5 = 0;
							if (footer_value_tFileInputDelimited_5 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_5,
									fieldSeparator_tFileInputDelimited_5[0],
									context.encoding);
						} else {
							csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_5)),
													context.encoding)),
									fieldSeparator_tFileInputDelimited_5[0]);
						}

						csvReadertFileInputDelimited_5.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
							csvReadertFileInputDelimited_5.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_5[0]);

						csvReadertFileInputDelimited_5.setQuoteChar('\"');

						csvReadertFileInputDelimited_5
								.setEscapeChar(csvReadertFileInputDelimited_5
										.getQuoteChar());

						if (footer_tFileInputDelimited_5 > 0) {
							for (totalLinetFileInputDelimited_5 = 0; totalLinetFileInputDelimited_5 < 1; totalLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
							csvReadertFileInputDelimited_5
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_5.readNext()) {

								rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
										.getValues();
								if (!(rowtFileInputDelimited_5.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_5[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_5++;

								}

							}
							int lastLineTemptFileInputDelimited_5 = totalLinetFileInputDelimited_5
									- footer_tFileInputDelimited_5 < 0 ? 0
									: totalLinetFileInputDelimited_5
											- footer_tFileInputDelimited_5;
							if (lastLinetFileInputDelimited_5 > 0) {
								lastLinetFileInputDelimited_5 = lastLinetFileInputDelimited_5 < lastLineTemptFileInputDelimited_5 ? lastLinetFileInputDelimited_5
										: lastLineTemptFileInputDelimited_5;
							} else {
								lastLinetFileInputDelimited_5 = lastLineTemptFileInputDelimited_5;
							}

							csvReadertFileInputDelimited_5.close();
							if (filename_tFileInputDelimited_5 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_5,
										fieldSeparator_tFileInputDelimited_5[0],
										context.encoding);
							} else {
								csvReadertFileInputDelimited_5 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_5)),
														context.encoding)),
										fieldSeparator_tFileInputDelimited_5[0]);
							}
							csvReadertFileInputDelimited_5
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_5[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_5[0] != '\r'))
								csvReadertFileInputDelimited_5
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_5[0]);

							csvReadertFileInputDelimited_5.setQuoteChar('\"');

							csvReadertFileInputDelimited_5
									.setEscapeChar(csvReadertFileInputDelimited_5
											.getQuoteChar());

						}

						if (limittFileInputDelimited_5 != 0) {
							for (currentLinetFileInputDelimited_5 = 0; currentLinetFileInputDelimited_5 < 1; currentLinetFileInputDelimited_5++) {
								csvReadertFileInputDelimited_5.readNext();
							}
						}
						csvReadertFileInputDelimited_5
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}// TD110 end

					while (limittFileInputDelimited_5 != 0
							&& csvReadertFileInputDelimited_5 != null
							&& csvReadertFileInputDelimited_5.readNext()) {
						rowstate_tFileInputDelimited_5.reset();

						rowtFileInputDelimited_5 = csvReadertFileInputDelimited_5
								.getValues();

						if (rowtFileInputDelimited_5.length == 1
								&& ("\015").equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_5++;

						if (lastLinetFileInputDelimited_5 > -1
								&& currentLinetFileInputDelimited_5 > lastLinetFileInputDelimited_5) {
							break;
						}
						outputLinetFileInputDelimited_5++;
						if (limittFileInputDelimited_5 > 0
								&& outputLinetFileInputDelimited_5 > limittFileInputDelimited_5) {
							break;
						}

						row24 = null;

						boolean whetherReject_tFileInputDelimited_5 = false;
						row24 = new row24Struct();
						try {

							char fieldSeparator_tFileInputDelimited_5_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "\t").length() > 0) {
								fieldSeparator_tFileInputDelimited_5_ListType = ((String) "\t")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_5.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_5[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row24.AnalysisTypeCV = null;

								row24.CollectionCV = null;

								row24.ContactRoleCV = null;

								row24.LinkDbCV = null;

								row24.MethodTypeCV = null;

								row24.OriginCV = null;

								row24.RecipientStatusCV = null;

								row24.ReferenceTypeCV = null;

								row24.SamplesetTypeCV = null;

								row24.SexCV = null;

								row24.StrandTypeCV = null;

								row24.StudyTypeCV = null;

								row24.SubjectAgeUnitsCV = null;

								row24.VariantCallTypeCV = null;

								row24.VariantCallZygosityCV = null;

								row24.VariantRegionTypeCV = null;

								row24.BooleanCV = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_5 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_5 = 0;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.AnalysisTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.AnalysisTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 1;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.CollectionCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.CollectionCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 2;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.ContactRoleCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.ContactRoleCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 3;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.LinkDbCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.LinkDbCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 4;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.MethodTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.MethodTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 5;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.OriginCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.OriginCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 6;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.RecipientStatusCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.RecipientStatusCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 7;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.ReferenceTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.ReferenceTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 8;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.SamplesetTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.SamplesetTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 9;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.SexCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.SexCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 10;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.StrandTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.StrandTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 11;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.StudyTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.StudyTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 12;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.SubjectAgeUnitsCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.SubjectAgeUnitsCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 13;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.VariantCallTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.VariantCallTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 14;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.VariantCallZygosityCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.VariantCallZygosityCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 15;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.VariantRegionTypeCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.VariantRegionTypeCV = null;
								}

								columnIndexWithD_tFileInputDelimited_5 = 16;

								if (columnIndexWithD_tFileInputDelimited_5 < rowtFileInputDelimited_5.length) {

									row24.BooleanCV = rowtFileInputDelimited_5[columnIndexWithD_tFileInputDelimited_5];

								} else {
									row24.BooleanCV = null;
								}

							}

							if (rowstate_tFileInputDelimited_5.getException() != null) {
								throw rowstate_tFileInputDelimited_5
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_5 = true;

							System.err.println(e.getMessage());
							row24 = null;

						}

						/**
						 * [tFileInputDelimited_5 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_5 main ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						tos_count_tFileInputDelimited_5++;

						/**
						 * [tFileInputDelimited_5 main ] stop
						 */
						// Start of branch "row24"
						if (row24 != null) {

							/**
							 * [tFilterColumns_6 main ] start
							 */

							currentComponent = "tFilterColumns_6";

							row25.VariantCallTypeCV = row24.VariantCallTypeCV;

							nb_line_tFilterColumns_6++;

							tos_count_tFilterColumns_6++;

							/**
							 * [tFilterColumns_6 main ] stop
							 */

							/**
							 * [tUnite_4 main ] start
							 */

							currentComponent = "tUnite_4";

							// ////////

							// for output
							row26 = new row26Struct();

							row26.VariantCallTypeCV = row25.VariantCallTypeCV;

							nb_line_tUnite_4++;

							// ////////

							tos_count_tUnite_4++;

							/**
							 * [tUnite_4 main ] stop
							 */

							/**
							 * [tAdvancedHash_row26 main ] start
							 */

							currentComponent = "tAdvancedHash_row26";

							row26Struct row26_HashRow = new row26Struct();

							row26_HashRow.VariantCallTypeCV = row26.VariantCallTypeCV;

							tHash_Lookup_row26.put(row26_HashRow);

							tos_count_tAdvancedHash_row26++;

							/**
							 * [tAdvancedHash_row26 main ] stop
							 */

						} // End of branch "row24"

						/**
						 * [tFileInputDelimited_5 end ] start
						 */

						currentComponent = "tFileInputDelimited_5";

						nb_line_tFileInputDelimited_5++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_5 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_5 != null) {
							csvReadertFileInputDelimited_5.close();
						}
					}
					if (csvReadertFileInputDelimited_5 != null) {
						globalMap.put("tFileInputDelimited_5_NB_LINE",
								nb_line_tFileInputDelimited_5);
					}

				}

				ok_Hash.put("tFileInputDelimited_5", true);
				end_Hash.put("tFileInputDelimited_5",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_5 end ] stop
				 */

				/**
				 * [tFilterColumns_6 end ] start
				 */

				currentComponent = "tFilterColumns_6";

				globalMap.put("tFilterColumns_6_NB_LINE",
						nb_line_tFilterColumns_6);

				ok_Hash.put("tFilterColumns_6", true);
				end_Hash.put("tFilterColumns_6", System.currentTimeMillis());

				/**
				 * [tFilterColumns_6 end ] stop
				 */

				/**
				 * [tUnite_4 end ] start
				 */

				currentComponent = "tUnite_4";

				globalMap.put("tUnite_4_NB_LINE", nb_line_tUnite_4);

				ok_Hash.put("tUnite_4", true);
				end_Hash.put("tUnite_4", System.currentTimeMillis());

				/**
				 * [tUnite_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_4 finally ] start
				 */

				currentComponent = "tFixedFlowInput_4";

				/**
				 * [tFixedFlowInput_4 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_5 finally ] start
				 */

				currentComponent = "tFileInputDelimited_5";

				/**
				 * [tFileInputDelimited_5 finally ] stop
				 */

				/**
				 * [tFilterColumns_6 finally ] start
				 */

				currentComponent = "tFilterColumns_6";

				/**
				 * [tFilterColumns_6 finally ] stop
				 */

				/**
				 * [tUnite_4 finally ] start
				 */

				currentComponent = "tUnite_4";

				/**
				 * [tUnite_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final checkVariantCalls checkVariantCallsClass = new checkVariantCalls();

		int exitCode = checkVariantCallsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = (String[][]) globalBuffer
				.toArray(new String[globalBuffer.size()][]);

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		hastBufferOutput = true;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = checkVariantCalls.class
					.getClassLoader().getResourceAsStream(
							"checkgnpcnv/checkvariantcalls_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.encoding = (String) context.getProperty("encoding");
			context.excelFileIn = (String) context.getProperty("excelFileIn");
			context.properties = (String) context.getProperty("properties");
			context.workdir = (String) context.getProperty("workdir");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("encoding")) {
				context.encoding = (String) parentContextMap.get("encoding");
			}
			if (parentContextMap.containsKey("excelFileIn")) {
				context.excelFileIn = (String) parentContextMap
						.get("excelFileIn");
			}
			if (parentContextMap.containsKey("properties")) {
				context.properties = (String) parentContextMap
						.get("properties");
			}
			if (parentContextMap.containsKey("workdir")) {
				context.workdir = (String) parentContextMap.get("workdir");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : checkVariantCalls");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 716606 characters generated by Talend Open Studio for Data Integration on the
 * 25 août 2017 11:50:53 CEST
 ************************************************************************************************/
